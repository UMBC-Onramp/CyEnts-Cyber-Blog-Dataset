
With this discovery, the team created a tool to assist with the creation of this exploit.
The tool pulls out all possible ROP gadgets with usable memory addresses and determines if an addition or subtraction equation could call one of the two system calls found in memory, using only the values that will bypass the filter.
The address for system in libuClibc-0.9.33.2.so, 0x2B0C0FD4, did not have any usable operands.
However, 0x2AD104F4 did.
We found several “filter-proof” operands that when added together equaled 0x2AD104F4.
We employed our tool’s output for all possible ROP gadgets that bypass the filter to build an ROP chain, which uses an addition instruction to create the final address for system and stores it in $s0.
After the addition, another gadget moves the address for system into $t9 and calls system.
This final gadget also moves an address that can be controlled from the stack into the register holding the parameter for the system call.
The entire ROP chain consists of only three gadgets, which easily fit in the stack space provided by the buffer overflow.
Piecing everything together Earlier we discovered two attack techniques that can be used with this vulnerability: a write-what-where, and overwriting the return address on the stack.