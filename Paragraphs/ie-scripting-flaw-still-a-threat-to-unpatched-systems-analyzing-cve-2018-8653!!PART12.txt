
First, we set up a couple of arrays, so that everything that can be preallocated is allocated, and the heap is in a somewhat ready state for the use after free.
Then, we declare our custom callback and trigger the vulnerability: For some reason, the objects array needs to be freed and garbage collected before the next step of the exploit.
This could be due to some side effect of freeing the ActiveXObject.
The memory is reclaimed when we assign “1” to the property reallocPropertyName.
That variable is a magic string that will be copied over the recently freed memory to mimic legitimate variables.
It is created as shown: The 0x0003 is a variable type that tells us the following value is an integer and that 1337 is its value.
The string needs to be long enough to trigger an allocation of the same or similar size as the memory block that was recently freed.
To summarize, JavaScript variables (here, the RegExp objects) are stored in a block; when all the variables from the block are freed, the block itself is freed.
In the right circumstances, the newly allocated string can take the place of the recently freed block, and because “this” is still dangling in our callback, it can be used for some type confusion.