
In contrast, memory dereferences within the null page in the kernel are commonly exploited because the attacker can first map the null page from user-mode, as is the case with this exploits.
The steps taken for successful 32-bit exploitation are: Map the null page: ntdll!ZwAllocateVirtualMemory(…,BaseAddress=0x1, …)
Build a malformed win32k!tagWND structure at the null page such that it is properly validated in the kernel Trigger vulnerability Attacker’s callback in win32k!tagWND.lpfnWndProc executes in kernel-mode Callback overwrites EPROCESS.Token to elevate privileges Spawns a child process that inherits the elevated access token 32-bit Windows 8 and later users are not affected by this exploit.
The Windows 8 Null Page protection prohibits user-mode processes from mapping the null page and causes the exploits to fail.
In the 64-bit version of the exploit, dereferencing offsets from a high 32-bit memory address do not wrap, as it is well within the addressable memory range for a 64-bit user-mode process.