
To execute this module, it performs process hollowing.
It does this by copying a Windows file, “certutil.exe”, from either “%Windir%\\SysWOW64\\certutil.exe” or “%Windir%\\system32\\certutil.exe” into the “%temp%” folder.
It then renames it to a random file name, like “uvbubqj.exe”.
Next, the thread-module creates a suspended process with this file.
As you may see in the command line string in Figure 2.1, “uvbubqj.exe” is the copied “certutil.exe”, “/scomma” and the subsequent temporary file —“C:\\Users\\Bobs\\AppData\\Local\\Temp\\60B2.tmp” — are the parameters for the process.
The temporary file name is generated by calling the API GetTempFileNameW().
The path of the temporary file “60B2.tmp” is read by the functional module and used to save stolen information.
The sixth argument to CreateProcessW() is 0x00000004, which is a creation flag indicating “CREATE_SUSPENDED” with which CreateProcessW() creates a process and enters suspended status.
It then calls a group of APIs, like GetThreadContext(), VirtualAllocEx(), ReadProcessMemory(), WriteProcessMemory(), and so on, to inject the final functional module into the new process’  memory.
The API SetThreadContext() is called later to set the new process EIP register pointing to the entry point of the functional module, which is invoked after calling the API ResumeThread().