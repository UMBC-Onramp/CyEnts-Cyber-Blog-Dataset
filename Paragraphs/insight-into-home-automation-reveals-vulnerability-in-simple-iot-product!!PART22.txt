
After running a few tests, we noticed that only ASCII characters can make it onto the stack.
Before the vulnerable code is executed, the packet is parsed by the open-source XML parser “mxml.”
This library follows the standard of allowing only ASCII and Unicode characters to exist between tags.
This standard is very problematic for both shellcode and return-oriented programming (ROP) techniques because both memory address and shellcode tend to use mostly nonreadable characters.
We could use several techniques to combat room on the stack; however, due to the hard limitation on characters that will pass through the XML sanitization process, it would be best to use functions that are already loaded into memory.