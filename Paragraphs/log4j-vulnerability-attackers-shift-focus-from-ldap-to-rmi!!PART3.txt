
Figure 1.
Log4j RMI attack overview As in many other Log4j attacks, an exploit string is inserted into the request’s User-Agent field, where it will be processed by Log4j.
This time, however, the exploit string references an RMI service rather than an LDAP service.
Figure 2.
HTTP POST request with Log4j exploit.
As seen in this packet capture, Log4j evaluates the contents of the ${…} string and generates a call to the attacker-controlled RMI service, which returns Java code that will be executed on the targeted machine: Figure 3.