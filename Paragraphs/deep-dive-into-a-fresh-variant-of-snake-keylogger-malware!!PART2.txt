
Here we go.
What the Captured Microsoft Excel Sample Looks Like This Excel sample, delivered as an attachment in a phishing email, contains malicious Macro VBA code.
Figure 1.1 shows a screenshot of when it is opened.
It displays a vague picture of a document and asks the victim to click the yellow button to get a clearer image.
Once the yellow button “Enable Content” is clicked by victim, the malicious VBA code is executed in the background.
The malicious macro project that contains the malicious VBA code is password protected so it cannot be viewed by the analyzer.
However, we were able to modify its binary file to remove this restriction.
Going through its code, a “Workbook_Activate()” method is automatically called when the document is opened.
It writes a piece of PowerShell code from a local variable into a BAT file.
Figure 1.2 shows partial VBA code of this method, where variable “s” holds the PowerShell code and \"Gqyztfbtsogpnruooqr.bat\" is the BAT file, which is finally executed by calling code “x = Shell(bat, 0)”.
The bottom of Figure 1.2 shows the content of variable “s”, which contains the base64-encoded PowerShell code that is decoded by PowerShell.exe when it is executed.