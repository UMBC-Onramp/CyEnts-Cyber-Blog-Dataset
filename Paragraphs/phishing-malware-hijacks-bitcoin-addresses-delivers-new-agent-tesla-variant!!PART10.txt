
The first one dynamically loads a .Net EXE (“the loader”) from an array ($Cli555) and calls its function WpfControlLibrary1.LOGO.Run() to deploy the real Agent Tesla from another array onto the MSBuild.exe process.
I manually extracted the loader to a local file and the Run() function is displayed in Figure 4.1 using dnSpy debugger.
The Run() function obtains the full path of a target process ('C:\\Windows\\Microsoft.
NET\\Framework\\v4.0.30319\\MSBuild.exe') and the binary data of the Agent Tesla variant from the second parameter.
It then calls another function, PEfX2B8Tl(), to deploy this Agent Tesla variant onto the target process.
As you can see in Figure 4.1, I have simplified the function for a clearer view.
It first calls the API function CreateProcess() with CreateFlag 0x4 (CREATE_SUSPENDED) to create a suspended MSBuild.exe process.
 
It then calls a bunch of familiar API functions, such as GetThreadContext(), ReadProcessMemory(), NtUnmapViewOfSection(), VirtualAllocEx(), WriteProcessMemory(), SetThreadContext(), and ResumeThread().