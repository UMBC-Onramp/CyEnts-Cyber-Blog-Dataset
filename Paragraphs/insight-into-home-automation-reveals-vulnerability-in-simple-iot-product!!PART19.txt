
Taking a look at the registers, we find the data from our packet in XML tags “EnergyPerUnitCostVersion” is in $v1, leading to an “invalid write access” segmentation fault error.
After statically analyzing the function, it appears to copy data from one section to another, looking three times for a 0x7C or “|” character.
If it never finds the “|,” it keeps copying into a statically defined buffer.
To fully understand why the overwrite occurs, let’s take a look at the stack as we step through the function: 2EF17630 2AC692F0 MEMORY:2AC692F0 2EF17634 00000000 MEMORY:saved_fp 2EF17638 34333231 MEMORY:34333231 ← previously copied data 2EF1763C 00000035 MEMORY:retaddr+31  ← next byte will be written at 0x 2EF1763D 2EF17640 00000000 MEMORY:saved_fp ← zeroed out memory prepared for the copy 2EF17644 00000000 MEMORY:saved_fp 2EF17648 00000000 MEMORY:saved_fp 2EF1764C 00000000 MEMORY:saved_fp 2EF17650 2EF17638 MEMORY:2EF17638 ← start writing at this address; can be overwritten As the function copies data onto the stack, it eventually copies over the address for the original buffer.