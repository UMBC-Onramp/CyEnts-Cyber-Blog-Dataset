
0x43e02c: 'kernel32.FlsGetValue(0x0)' -> 0x4150 0x43e068: 'kernel32.EncodePointer(0x704c)' -> 0x704d 0x43c260: 'KERNEL32.LeaveCriticalSection(0x466f28)' ->
None 0x422151: 'USER32.GetSystemMetrics(0xb)' -> 0x1 0x422158: 'USER32.GetSystemMetrics(0xc)' -> 0x1 0x42215f: 'USER32.GetSystemMetrics(0x2)' -> 0x1 0x422169: 'USER32.GetSystemMetrics(0x3)' ->
0x1 0x422184: 'GDI32.GetDeviceCaps(0x288, 0x58)' ->
None Figure 9: Identifying beginning of MFC code in Speakeasy API logs To intercept execution at this stage I created an API hook for GetDeviceCaps as shown in Figure 10.
The hook confirms the function is being called for the first time on line 2.
1: def mfc_init_hook(self, emu, api_name, func, params): 2:     if not self.trigger_hit: 3:         self.trigger_hit = True 4:         self.h_code_hook =   self.add_code_hook(self.start_unpack_func_hook) 5:         self.logger.debug(\"[*] MFC init api hit, starting unpack function\") Figure 10: API hook set for GetDeviceCaps Line 4 shows the creation of a code hook using the add_code_hook function of the Speakeasy class.
Code hooks allow you to specify a callback function that is called before each instruction that is emulated.
Speakeasy also allows you to optionally specify an address range for which the code hook will be effective by specifying begin and end parameters.