
The GetSysColor hook returns 0
If an API function requires more finessed handling, you can implement a more specific and meaningful hook that suits your needs.
If your hook implementation is robust enough, you might consider contributing it to the Speakeasy project as an API handler!
Adding an API Handler Within the speakeasy/winenv/api directory you'll find usermode and kernelmode subdirectories that contain Python files for corresponding binary modules.
These files contain the API handlers for each module.
In usermode/kernel32.py , we see a handler defined for SetEnvironmentVariable as shown in Figure 6.
1: @apihook('SetEnvironmentVariable', argc=2) 2: def SetEnvironmentVariable(self, emu, argv, ctx={}): 3:     ''' 4:     BOOL SetEnvironmentVariable( 5:         LPCTSTR lpName, 6:         LPCTSTR lpValue 7:         ); 8:     ''' 9:     lpName, lpValue = argv 10:    cw = self.get_char_width(ctx) 11:    if lpName and lpValue: 12:        name = self.read_mem_string(lpName, cw) 13:
        val = self.read_mem_string(lpValue, cw) 14:
        argv[0] = name 15:        argv[1]
= val 16:        emu.set_env(name, val) 17:    return True Figure 6: API handler for SetEnvironmentVariable
A handler begins with a function decorator (line 1) that defines the name of the API and the number of parameters it accepts.