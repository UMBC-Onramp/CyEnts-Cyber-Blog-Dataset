
An easy trick is to notice the magic offset 0x3D0 to see if this value is used anywhere else.
We find it near the top of the same function (the unpatched version is on the left):
Diving into the nitty gritty of garbage collection for jscript.dll is beyond the scope of this post, so let’s make some assumptions.
In C++/C#, GCRoot would usually design a template to keep track of references pointing to the object being used, so those do not have garbage collection.
Here it looks as though we are saving stack addresses (aka local variables) into a list of GCRoot objects to tell the garbage collector not to collect the objects whose pointers are on those specific locations on the stack.
In hindsight this makes sense; we were able to “delete this” because “this” was not tracked by the garbage collector, so now Microsoft makes sure to specifically add that stack variable to the tracked elements.