
Fortunately for us, this process has already been explored by the security community , and iMX parsing libraries exist to manipulate the raw NAND dump and remove existing extraneous data.
Figure 16 shows the results of re-running binwalk on the output of the imx-nand-convert script.
Figure 16: binwalk scan of fixed NAND dump This time, we see only one JFFS2 filesystem, at the very round offset of 0x880000 .
Using the extraction ( -e ) feature of binwalk , we can now obtain parsed versions of the U-Boot bootloader, Linux kernel, and JFFS2 system.
The final hurdle we need to overcome is mounting the extracted JFFS2 filesystem in a way that allows us to explore the contents.
On Linux, the easiest way to perform this is to use the mtd , mtdblock , and nandsim kernel modules .
The nandsim module simulates a given NAND device and uses the mtd and JFFS2 subsystems to parse and manage appropriately.
The key piece of information that needs to be passed to the nandsim module is the ONFI chip identifier, which can be obtained from the NAND datasheet or by requesting the ID from the IC using a generic reader (like the XGecu Pro used in the Data Extraction section).