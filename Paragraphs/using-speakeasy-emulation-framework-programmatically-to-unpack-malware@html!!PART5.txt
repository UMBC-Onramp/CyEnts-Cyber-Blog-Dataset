
The API hooking mechanism in Speakeasy provides flexibility and control over emulation.
Let’s examine a few uses of API hooking within the context of emulating unpacking code to retrieve an unpacked payload.
Bypassing Unsupported APIs When Speakeasy encounters an unsupported Windows API call, it stops emulation and provides the name of the API function that is not supported.
If the API function in question is not critical for unpacking the binary, you can add an API hook that simply returns a value that allows execution to continue.
For example, a recent sample’s unpacking code contained API calls that had no effect on the unpacking process.
One such API call was to GetSysColor .
In order to bypass this call and allow execution to continue, an API hook may be added as shown in Figure 4.
self.add_api_hook(self.getsyscolor_hook, 'user32', 'GetSysColor', argc=1 ) Figure 4: Adding an API hook According to MSDN , this function takes 1 parameter and returns an RGB color value represented as a DWORD .