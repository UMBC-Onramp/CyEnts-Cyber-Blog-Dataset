
It offers an API to enumerate opaque objects that belong to the Windows world (mostly ActiveX components, such as a file system descriptor used to list drives on a system).
However, it can also be called on a JavaScript array.
In this situation, one can access the array member as usual, but objects created this way are stored slightly differently in memory.
This is the cause of interesting side effects.
The objects created by calling the Enumerator.prototype.item() function are recognized as an ActiveXObject and, as seen in the creation of eObj, we can under certain circumstances overwrite the “prototype” member that should have been a read-only property.
Unexpected side effect: The ability to overwrite the prototype member of an ActiveXObject can seem innocuous at first, but it can be leveraged to explore a code path that should not be reachable.
When using the “instanceof” keyword, we can see that the right side of the keyword expects a function.
However, with a specially crafted object, the instanceof call succeeds and, worse, we can control the code being executed.
The edge case of invoking instanceof on a specially crafted ActiveXObject gives us the opportunity to run custom JavaScript code from a callback we control, which is typically an error-prone situation.