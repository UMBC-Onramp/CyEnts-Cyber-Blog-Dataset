By Philippe Laulheret and Eoin Carroll on Jan 10, 2019 Microsoft recently patched a critical flaw in Internet Explorer’s scripting engine that could lead to remote code execution.

The vulnerability is being exploited in the wild and was originally reported by a researcher from Google’s Threat Analysis Group.

Microsoft released an out-of-band patch to fix the vulnerability before the normal patch cycle.

McAfee products received an update to detect the threat shortly after the patch was released.

A remote attacker can target Internet Explorer Versions 9 through 11 via a specially crafted website, while a local attacker on a rogue network could also target the Web Proxy Auto-Discovery service, which uses the same vulnerable scripting engine (jscript.dll).

Microsoft Edge is not affected; however, other Windows applications that include the scripting engine might be vulnerable until the security patch from Microsoft is applied.

Context Vulnerabilities targeting Internet Explorer that can be triggered either remotely or locally are prime tools for cybercriminals to compromise many unpatched computers.

That is why criminals usually integrate those vulnerabilities into exploit kits, which propagate malware or conduct other nefarious activities against compromised hosts.

The threat of exploit kits is one reason to track this type of vulnerability and to ensure all security patches are deployed in a timely manner.

In 2018, more than 100 memory corruption vulnerabilities were found in a Microsoft scripting engine (either for Internet Explorer or Edge).

See the MITRE website for more details.

(For defense-in-depth, products such as McAfee Endpoint Security or McAfee Host Intrusion Prevention can detect and eradicate such threats until patches can be applied.)

Once a CVE ID is released, cybercriminals can take as little as a few weeks (or in some cases days) to integrate it into their exploit kit.

For example, CVE-2018-8174 was initially reported to Microsoft in late April by two teams of threat researchers who had observed its exploitation in the wild.

Microsoft published an advisory within a week, in early May.

Meanwhile, the researchers published their security analysis of the exploit.

Only two weeks later a proof-of-concept exploit was publicly released .

In the next couple of weeks exploit kits RIG and Magnitude integrated their weaponized versions of the exploit.

(A more detailed timeline can be found here .)

It took less than a month for cybercriminals to weaponize the vulnerability initially disclosed by Microsoft; therefore, it is critical to understand the threat posed by these attack vectors, and to ensure counter measures are in place to stop the threat before it can do any damage.

Technical details The IE scripting engine jscript.dll is a code base that has been heavily audited: https://googleprojectzero.blogspot.com/2017/12/apacolypse-now-exploiting-windows-10-in_18.html https://www.exploit-db.com/search?q=jscript It is no surprise that exploitable bugs are becoming more exotic.

This is the case for CVE 2018-8653, which takes three seemingly innocent behaviors and turns them into a use-after-free flaw.

A Microsoft-specific extension triggers a rarely explored code path that eventually misbehaves and invokes a frequently used function with unusual arguments.

This leads to the use-after-free condition that was exploited in the wild.

The enumerator object: The entry point for this vulnerability is a Microsoft-specific extension, the enumerator object.

It offers an API to enumerate opaque objects that belong to the Windows world (mostly ActiveX components, such as a file system descriptor used to list drives on a system).

However, it can also be called on a JavaScript array.

In this situation, one can access the array member as usual, but objects created this way are stored slightly differently in memory.

This is the cause of interesting side effects.

The objects created by calling the Enumerator.prototype.item() function are recognized as an ActiveXObject and, as seen in the creation of eObj, we can under certain circumstances overwrite the “prototype” member that should have been a read-only property.

Unexpected side effect: The ability to overwrite the prototype member of an ActiveXObject can seem innocuous at first, but it can be leveraged to explore a code path that should not be reachable.

When using the “instanceof” keyword, we can see that the right side of the keyword expects a function.

However, with a specially crafted object, the instanceof call succeeds and, worse, we can control the code being executed.

The edge case of invoking instanceof on a specially crafted ActiveXObject gives us the opportunity to run custom JavaScript code from a callback we control, which is typically an error-prone situation.

Attackers successfully turned this bug into a use-after-free condition, as we shall see next.

Exploiting the bug: Without getting into too much detail (see the proof of concept later in this document for more info), this bug can be turned into a “delete this” type of primitive, which resembles previously reported bugs .

When the callback function (“f” in our previous example) is invoked, the keyword “this” points to eObj.prototype.

If we set it to null and then trigger a garbage collection, the memory backing the object can be freed and later reclaimed.

However, as mentioned in the Project Zero bug report , to be successful an entire block of variables needs to be cleared before the memory is freed.

The out-of-band patch: Microsoft released an unscheduled patch to fix this vulnerability.

It is common practice for us to look at what changed before and after the patch.

Interestingly, this patch changes the strict minimum number of bytes, while the version number of the DLL remains unchanged.

Using the popular diffing tool Diaphora, we compared the version of jscript.dll for Windows 10, x64-bit edition (feature version 1809).

We can see that only a few functions were modified.

All but one point to array-related functions.

Those were probably patches addressing CVE 2018-8631 (jscript!JsArrayFunctionHeapSort out-of-bounds write).

The only one remaining that was substantially modified is NameTbl::InvokeInternal.

Diaphora provides us with a diff of the assembly code of the two versions of the function.

In this instance, it is easier to compare the functions side by side in Ida Pro to see what has changed.

A quick glance toward the end of the function shows the introduction of two calls to GCRoot::~GCRoot (the destructor of the object GCRoot).

Looking at the implementation of ~GCRoot, we see it is the same code as that inlined in that function created by the compiler in the older version of the DLL.

In the newer version of the DLL, this function is called twice; while in the unpatched version, the code was called only once (inlined by the compiler, hence the absence of a function call).

In C++ parlance, ~GCRoot is the destructor of GCRoot, so we may want to find the constructor of GCRoot.

An easy trick is to notice the magic offset 0x3D0 to see if this value is used anywhere else.

We find it near the top of the same function (the unpatched version is on the left):

Diving into the nitty gritty of garbage collection for jscript.dll is beyond the scope of this post, so let’s make some assumptions.

In C++/C#, GCRoot would usually design a template to keep track of references pointing to the object being used, so those do not have garbage collection.

Here it looks as though we are saving stack addresses (aka local variables) into a list of GCRoot objects to tell the garbage collector not to collect the objects whose pointers are on those specific locations on the stack.

In hindsight this makes sense; we were able to “delete this” because “this” was not tracked by the garbage collector, so now Microsoft makes sure to specifically add that stack variable to the tracked elements.

We can verify this hypothesis by tracing the code around an invocation of instanceof.

It turns out that just before invoking our custom “isPrototypeOf” callback function, a call to NameTbl::GetVarThis stores a pointer in the newly “protected” stack variable and then invokes ScrFncObj::Call to execute our callback.

Looking at unexpected behavior in `instanceof`: Curious readers might wonder why it is possible to invoke instanceof on a custom object rather than on a function (as described previously).

When instanceof is invoked in JavaScript, the CScriptRuntime::InstOf function is called behind the scene.

Early on, the function distinguishes two cases.

If the variable type is 0x81 (which seems to be a broad type for a JavaScript object on the heap), then it invokes a virtual function that returns true/false if the object can be called.

On the other hand, if the type is not 0x81, a different path is followed; it tries to automatically resolve the prototype object and invoke isPrototypeOf.

The 0x81 path:

The not 0x81 path: Proof of concept Now that we have seen the ins and outs of the bug, let’s look at a simple proof of concept that exhibits the use-after-free behavior.

First, we set up a couple of arrays, so that everything that can be preallocated is allocated, and the heap is in a somewhat ready state for the use after free.

Then, we declare our custom callback and trigger the vulnerability: For some reason, the objects array needs to be freed and garbage collected before the next step of the exploit.

This could be due to some side effect of freeing the ActiveXObject.

The memory is reclaimed when we assign “1” to the property reallocPropertyName.

That variable is a magic string that will be copied over the recently freed memory to mimic legitimate variables.

It is created as shown: The 0x0003 is a variable type that tells us the following value is an integer and that 1337 is its value.

The string needs to be long enough to trigger an allocation of the same or similar size as the memory block that was recently freed.

To summarize, JavaScript variables (here, the RegExp objects) are stored in a block; when all the variables from the block are freed, the block itself is freed.

In the right circumstances, the newly allocated string can take the place of the recently freed block, and because “this” is still dangling in our callback, it can be used for some type confusion.

(This is the method used by the attackers, but beyond the scope of this post.)

In this example, the code will print 1337 instead of an empty RegExp.

McAfee coverage Please refer to the McAfee product bulletin for full coverage updates.

Here is a short summary of current product coverage as of this writing.

Endpoint products: Endpoint Security (ENS), ENS Adaptive Threat Protection (ENS-ATP), Host Intrusion Prevention (HIPS), VirusScan Enterprise (VSE), WSS.

ENS (10.2.0+) with Exploit Prevention Proactively covered by McAfee Generic Buffer Overflow Protection Signature ID 428 HIPS (8.0.0+) Proactively covered by McAfee Generic Buffer Overflow Protection Signature ID 428 ENS (all versions) and WSS (all versions).

Coverage based on samples observed so far.

This protection is expected to be expanded over the next few days as viable exploitation attempts are seen.

Minimum DAT: V3 DAT (3564) Detection names: Exploit-CVE2018-8653 and Exploit-CVE2018-8653.a VSE (8.8+).

Coverage based on samples observed so far.

This protection is expected to be expanded over the next few days as viable exploitation attempts are seen.

Minimum DAT: V2 DAT (9113)

Detection names: Exploit-CVE2018-8653 and Exploit-CVE2018-8653.a Content summary DATs: V2 DAT (9113), V3 DAT (3564)

Generic Buffer Overflow Protection Signature ID 428 MITRE score The base score (CVSS v3.0) for this vulnerability is 7.5 (High) with an impact score of 5.9 and an exploitability score of 1.6.

Conclusion CVE-2018-8653 targets multiple versions of Internet Explorer and other applications that rely on the same scripting engine.

Attackers can execute arbitrary code on unpatched hosts from specifically crafted web pages or JavaScript files.

Even though the bug was recently fixed by Microsoft, we can expect exploit kits to soon deploy a weaponized version of this critical vulnerability, leveraging it to target remaining unpatched systems.

The technical analysis in this post should provide enough information for defenders to ensure their systems will withstand the threat and to know which primitives to look for as an entry point for the attack.

McAfee security products can be leveraged to provide specific “virtual patching” for this threat until full software patches can be deployed, while current generic buffer overflow protection rules can be used to fingerprint exploit attempts against this and similar vulnerabilities.




